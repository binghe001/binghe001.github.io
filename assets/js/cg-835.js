(window.webpackJsonp=window.webpackJsonp||[]).push([[835],{1171:function(t,e,r){"use strict";r.r(e);var n=r(15),o=Object(n.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"《高性能polaris网关》通用处理器-第11节-mpmc模式缓冲队列自定义并发环形队列的设计和实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#《高性能polaris网关》通用处理器-第11节-mpmc模式缓冲队列自定义并发环形队列的设计和实现"}},[t._v("#")]),t._v(" 《高性能Polaris网关》通用处理器-第11节：MPMC模式缓冲队列自定义并发环形队列的设计和实现")]),t._v(" "),e("p",[t._v("作者：冰河\n"),e("br"),t._v("星球："),e("a",{attrs:{href:"http://m6z.cn/6aeFbs",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://m6z.cn/6aeFbs"),e("OutboundLink")],1),t._v(" "),e("br"),t._v("博客："),e("a",{attrs:{href:"https://binghe.gitcode.host",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://binghe.gitcode.host"),e("OutboundLink")],1),t._v(" "),e("br"),t._v("文章汇总："),e("a",{attrs:{href:"https://binghe.gitcode.host/md/all/all.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://binghe.gitcode.host/md/all/all.html"),e("OutboundLink")],1),t._v(" "),e("br"),t._v("源码获取地址："),e("a",{attrs:{href:"https://t.zsxq.com/0dhvFs5oR",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://t.zsxq.com/0dhvFs5oR"),e("OutboundLink")],1)]),t._v(" "),e("blockquote",[e("p",[t._v("沉淀，成长，突破，帮助他人，成就自我。")])]),t._v(" "),e("ul",[e("li",[t._v("本节难度：★★☆☆☆")]),t._v(" "),e("li",[t._v("本节重点：对MPMC模式缓冲队列的并发环形队列进行设计与实现，结合JDK中的ConcurrentLinkedQueue理解高性能网关的并发队列设计。重点掌握整体调用链路的设计思路和设计方法，并能够将其灵活应用到自身实际项目中。")])]),t._v(" "),e("p",[t._v("在网关的整体架构设计中，在基于MPMC实现缓冲队列时，为了更好的提升网关的性能，我们对缓存行进行了自定义处理，为此，专门设计了自定义的AtomicLong类。同时，为了更好的提升网关MPMC模式队列的性能，我们也对网关的队列容量和核心并发队列接口进行了单独的设计和实现。接下来，就对MPMC模式的并发环形队列进行设计和实现。")]),t._v(" "),e("p",[t._v("有JDK中各种队列相关的知识，大家可以阅读冰河出版的《"),e("a",{attrs:{href:"https://binghe.gitcode.host/md/knowledge/book/2022-06-17-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("深入理解高并发编程：核心原理与案例实战"),e("OutboundLink")],1),t._v("》和《"),e("a",{attrs:{href:"https://binghe.gitcode.host/md/knowledge/book/2023-02-27-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-JDK%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("深入理解高并发编程：JDK核心技术"),e("OutboundLink")],1),t._v("》。")]),t._v(" "),e("h2",{attrs:{id:"一、背景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、背景"}},[t._v("#")]),t._v(" 一、背景")]),t._v(" "),e("p",[t._v("在网关的整个架构设计中，我们引入了处理器，由处理器来驱动过滤器链的执行，也对网关处理器的顶层接口和核心实现类进行了设计和实现。同时，基于disruptor和Holder模式对BatchEvent模式的缓冲队列进行了设计和实现。但对于一个可以实际投入使用的网关来说，只是实现了BatchEvent模式的缓冲队列是远远不够的。所以，我们着手设计和实现MPMC模式的缓冲队列。")]),t._v(" "),e("p",[t._v("在设计和实现MPMC缓冲队列的过程中，已经对MPMC模式缓冲队列的Condition接口和ThreadWait类进行了设计和实现，并且对抽象Condition类和抽象自旋与等待Condition类进行了设计和实现。为了更好的提升网关的性能，我们又结合网关对自定义的AtomicLong进行了设计实现。同时，为了更好的提升网关MPMC模式队列的性能，也对网关的队列容量和核心并发队列接口进行了单独的设计和实现。接下来，就对MPMC模式的并发环形队列进行设计和实现。")]),t._v(" "),e("h2",{attrs:{id:"二、本节重点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、本节重点"}},[t._v("#")]),t._v(" 二、本节重点")]),t._v(" "),e("p",[t._v("对MPMC模式缓冲队列的并发环形队列进行设计与实现，结合JDK中的ConcurrentLinkedQueue理解高性能网关的并发队列设计。重点掌握整体调用链路的设计思路和设计方法，并能够将其灵活应用到自身实际项目中。")]),t._v(" "),e("h2",{attrs:{id:"三、核心类设计"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、核心类设计"}},[t._v("#")]),t._v(" 三、核心类设计")]),t._v(" "),e("p",[t._v("自定义并发环形队列的类图如图11-1所示。")]),t._v(" "),e("div",{attrs:{align:"center"}},[e("img",{attrs:{src:"https://binghe.gitcode.host/images/project/gateway/2025-07-03-001.png?raw=true",width:"70%"}}),t._v(" "),e("br")]),t._v(" "),e("p",[t._v("可以看到，并发环形队列主要由MpmcConcurrentQueue类实现，MpmcConcurrentQueue类会实现ConcurrentQueue接口，并且MpmcConcurrentQueue类中会定义内部类Node来封装实际要存储的数据。")]),t._v(" "),e("p",[e("strong",[t._v("注意：这里重点给大家展示通用核心处理器，其他代码的实现细节，大家可以自行到本节对应的源码分支进行查看，这里不再赘述。")])]),t._v(" "),e("h2",{attrs:{id:"四、编码实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四、编码实现"}},[t._v("#")]),t._v(" 四、编码实现")]),t._v(" "),e("p",[t._v("本节，就对MPMC模式缓冲队列自定义并发环形队列进行编码实现，其他代码的实现细节，大家可以自行到本节对应的源码分支进行查看，这里不再赘述。")]),t._v(" "),e("p",[t._v("MpmcConcurrentQueue类是自定义的并发环形队列实现类，主要实现了ConcurrentQueue接口中定义的队列操作方法。另外，大家可以结合JDK中的java.util.concurrent.ConcurrentLinkedQueue类来理解自定义的并发环形队列MpmcConcurrentQueue类。")]),t._v(" "),e("p",[t._v("源码详见：polaris-processor-api工程下的io.binghe.polaris.processor.api.concurrent.queue.mpmc.queue.MpmcConcurrentQueue。")]),t._v(" "),e("h2",{attrs:{id:"查看完整文章"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看完整文章"}},[t._v("#")]),t._v(" 查看完整文章")]),t._v(" "),e("p",[t._v("加入"),e("a",{attrs:{href:"https://public.zsxq.com/groups/48848484411888.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("冰河技术"),e("OutboundLink")],1),t._v("知识星球，解锁完整技术文章、小册、视频与完整代码")])])}),[],!1,null,null,null);e.default=o.exports}}]);