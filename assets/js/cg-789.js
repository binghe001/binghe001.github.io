(window.webpackJsonp=window.webpackJsonp||[]).push([[789],{1120:function(r,t,e){"use strict";e.r(t);var a=e(15),s=Object(a.a)({},(function(){var r=this,t=r._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[t("h1",{attrs:{id:"《高性能polaris网关》通用模型-第04节-调用链路顶层接口与抽象类设计"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#《高性能polaris网关》通用模型-第04节-调用链路顶层接口与抽象类设计"}},[r._v("#")]),r._v(" 《高性能Polaris网关》通用模型-第04节：调用链路顶层接口与抽象类设计")]),r._v(" "),t("p",[r._v("作者：冰河\n"),t("br"),r._v("星球："),t("a",{attrs:{href:"http://m6z.cn/6aeFbs",target:"_blank",rel:"noopener noreferrer"}},[r._v("http://m6z.cn/6aeFbs"),t("OutboundLink")],1),r._v(" "),t("br"),r._v("博客："),t("a",{attrs:{href:"https://binghe.gitcode.host",target:"_blank",rel:"noopener noreferrer"}},[r._v("https://binghe.gitcode.host"),t("OutboundLink")],1),r._v(" "),t("br"),r._v("文章汇总："),t("a",{attrs:{href:"https://binghe.gitcode.host/md/all/all.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("https://binghe.gitcode.host/md/all/all.html"),t("OutboundLink")],1),r._v(" "),t("br"),r._v("源码获取地址："),t("a",{attrs:{href:"https://t.zsxq.com/0dhvFs5oR",target:"_blank",rel:"noopener noreferrer"}},[r._v("https://t.zsxq.com/0dhvFs5oR"),t("OutboundLink")],1)]),r._v(" "),t("blockquote",[t("p",[r._v("沉淀，成长，突破，帮助他人，成就自我。")])]),r._v(" "),t("ul",[t("li",[r._v("本章难度：★★☆☆☆")]),r._v(" "),t("li",[r._v("本节重点：对高性能Polaris网关的调用链路的顶层接口和抽象类进行设计，从全局角度掌握高性能Polaris网关整体调用链路的核心链路设计。重点掌握整体调用链路的设计思路和设计方法，并能够将其灵活应用到自身实际项目中。")])]),r._v(" "),t("p",[t("strong",[r._v("大家好，我是冰河~~")])]),r._v(" "),t("p",[r._v("网关是整个后端微服务集群的入口，承接着比整个后端微服务集群更高的流量，除了要对请求和响应的模型进行良好的设计外，对整个网关的调用链路也需要进行精心的设计。对网关来说，整体的调用链路可以粗略的总结为：客户端—>网关—>后端服务—>网关—>客户端。也就是说，网关最基本的功能就是：接收客户端的请求，将其转发到对应的后端服务实例，后端服务实例处理完业务逻辑后，向网关响应结果数据，而网关又会将结果数据响应给客户端，形成了一个完整的闭环。")]),r._v(" "),t("p",[r._v("实际上，网关的功能以及调用链路远比这里描述的复杂的多，对于整体的调用链路，也需要进行高度抽象的设计。")]),r._v(" "),t("h2",{attrs:{id:"一、前言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、前言"}},[r._v("#")]),r._v(" 一、前言")]),r._v(" "),t("p",[r._v("在前面的章节中，已经对高性能Polaris网关的请求与响应模型的顶层接口进行了设计，也对请求模型和响应模型的顶层接口进行了实现。至此，我们已经从整体上了解了高性能Poalris网关的请求与响应数据模型，也了解了请求模型和响应模型的顶层接口的实现方案。接下来，就对调用链路的顶层接口与抽象类进行设计。")]),r._v(" "),t("h2",{attrs:{id:"二、本节诉求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、本节诉求"}},[r._v("#")]),r._v(" 二、本节诉求")]),r._v(" "),t("p",[r._v("对高性能Polaris网关的调用链路的顶层接口和抽象类进行设计，从全局角度掌握高性能Polaris网关整体调用链路的核心链路设计。重点掌握整体调用链路的设计思路和设计方法，并能够将其灵活应用到自身实际项目中。")]),r._v(" "),t("h2",{attrs:{id:"三、顶层接口设计"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、顶层接口设计"}},[r._v("#")]),r._v(" 三、顶层接口设计")]),r._v(" "),t("p",[r._v("调用链路顶层接口与抽象类设计如图4-1所示。")]),r._v(" "),t("div",{attrs:{align:"center"}},[t("img",{attrs:{src:"https://binghe.gitcode.host/images/project/gateway/2024-09-22-001.png?raw=true",width:"70%"}}),r._v(" "),t("br")]),r._v(" "),t("p",[r._v("可以看到，在整个顶层调用链路中，我们进行了高度抽象化的设计。在最顶层设计了PolarisInvoker接口，在PoalrisInvoker接口中，主要设计了获取和设置调用链路信息的方法以及获取和设置超时时间的方法。随后，设计了ServiceInvoker接口继承自PolarisInvoker接口，在ServiceInvoker接口中，主要设计了获取和设置规则id的方法。同时，设计了AbstractServiceInvoker抽象类，实现了ServiceInvoker接口，在AbstractServiceInvoker抽象类中，主要定义了invokerPath、ruleId和timeout三个字段，随后实现了PolarisInvoker和ServiceInvoker接口中定义的方法。")]),r._v(" "),t("h2",{attrs:{id:"四、编码实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四、编码实现"}},[r._v("#")]),r._v(" 四、编码实现")]),r._v(" "),t("p",[r._v("接下来，就对调用链路顶层接口与抽象类进行编码实现。")]),r._v(" "),t("h2",{attrs:{id:"查看完整文章"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查看完整文章"}},[r._v("#")]),r._v(" 查看完整文章")]),r._v(" "),t("p",[r._v("加入"),t("a",{attrs:{href:"https://public.zsxq.com/groups/48848484411888.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("冰河技术"),t("OutboundLink")],1),r._v("知识星球，解锁完整技术文章、小册、视频与完整代码")])])}),[],!1,null,null,null);t.default=s.exports}}]);