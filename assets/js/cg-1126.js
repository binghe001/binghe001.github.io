(window.webpackJsonp=window.webpackJsonp||[]).push([[1126],{1460:function(t,s,a){"use strict";a.r(s);var r=a(15),e=Object(r.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"《手写线程池》线程池核心技术-第01节-线程池核心原理技术解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#《手写线程池》线程池核心技术-第01节-线程池核心原理技术解析"}},[t._v("#")]),t._v(" 《手写线程池》线程池核心技术：第01节：线程池核心原理技术解析")]),t._v(" "),s("p",[t._v("作者：冰河\n"),s("br"),t._v("星球："),s("a",{attrs:{href:"http://m6z.cn/6aeFbs",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://m6z.cn/6aeFbs"),s("OutboundLink")],1),t._v(" "),s("br"),t._v("博客："),s("a",{attrs:{href:"https://binghe.gitcode.host",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://binghe.gitcode.host"),s("OutboundLink")],1),t._v(" "),s("br"),t._v("文章汇总："),s("a",{attrs:{href:"https://binghe.gitcode.host/md/all/all.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://binghe.gitcode.host/md/all/all.html"),s("OutboundLink")],1),t._v(" "),s("br"),t._v("源码获取地址："),s("a",{attrs:{href:"https://t.zsxq.com/0dhvFs5oR",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://t.zsxq.com/0dhvFs5oR"),s("OutboundLink")],1)]),t._v(" "),s("blockquote",[s("p",[t._v("沉淀，成长，突破，帮助他人，成就自我。")])]),t._v(" "),s("ul",[s("li",[t._v("本章难度：★★★☆☆")]),t._v(" "),s("li",[t._v("本章重点：简单介绍线程池的核心原理，重点掌握：线程池的核心状态、线程池的创建方式、执行任务的核心流程、线程池的关闭方式和如何确定最佳线程数等核心技术。从全局视角掌握线程池的核心技术原理，学会融汇贯通，将线程池的编程思想灵活应用到自身实际项目中，提升实际项目的并发处理能力，以及自身的并发编程内功功底。")])]),t._v(" "),s("p",[s("strong",[t._v("大家好，我是冰河~~")])]),t._v(" "),s("p",[t._v("使用线程池最大的好处就是能够实现线程的复用，不必每次执行任务时都重新创建线程。同时，线程池能够有效的控制最大并发线程数，防止无限制的创建线程导致系统宕机或OOM，能够提高系统资源的利用效率，同时能够有效的避免过度的资源竞争。")]),t._v(" "),s("p",[t._v("另外，线程池也提供了定时执行、定期执行、并发数控制等功能，也能够对线程池的资源进行实时监控。")]),t._v(" "),s("h2",{attrs:{id:"一、前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、前言"}},[t._v("#")]),t._v(" 一、前言")]),t._v(" "),s("p",[t._v("从本节开始，就正式进入《手写线程池》的线程池核心技术篇章。对于线程池的原理性技术来说，尤其是线程池的源码，学习起来是比较枯燥的，希望大家都能踏下心来，跟着冰河认真学。经过《手写线程池》专栏对线程池的深入剖析和我们自己从零开始手写一个线程池，我相信，只要小伙伴们认真学习，坚持下来后，一定会对线程池技术有一个全新的认识，并能够将线程池技术融会贯通，灵活应用到自身实际项目中。同时，也能在并发编程领域进一步突破自身的技术瓶颈。")]),t._v(" "),s("h2",{attrs:{id:"二、本节诉求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、本节诉求"}},[t._v("#")]),t._v(" 二、本节诉求")]),t._v(" "),s("p",[t._v("简单介绍线程池的核心原理，重点掌握：线程池的核心状态、线程池的创建方式、执行任务的核心流程、线程池的关闭方式和如何确定最佳线程数等核心技术。从全局视角掌握线程池的核心技术原理，学会融汇贯通，将线程池的编程思想灵活应用到自身实际项目中，提升实际项目的并发处理能力，以及自身的并发编程内功功底。")]),t._v(" "),s("h2",{attrs:{id:"三、线程池核心状态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、线程池核心状态"}},[t._v("#")]),t._v(" 三、线程池核心状态")]),t._v(" "),s("p",[t._v("线程池在运行的过程中，会通过定义的一些常量值来标注线程池的运行状态，接下来，就简单介绍下线程池在运行过程中的几个核心状态。")]),t._v(" "),s("h3",{attrs:{id:"_3-1-核心状态说明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-核心状态说明"}},[t._v("#")]),t._v(" 3.1 核心状态说明")]),t._v(" "),s("p",[t._v("在线程池的核心类ThreadPoolExecutor中，定义了几个关于线程池在运行过程中的核心状态。源码如下所示。")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("COUNT_BITS")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SIZE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CAPACITY")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("COUNT_BITS")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// runState is stored in the high-order bits")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RUNNING")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("COUNT_BITS")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SHUTDOWN")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("COUNT_BITS")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("STOP")]),t._v("       "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("COUNT_BITS")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TIDYING")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("COUNT_BITS")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TERMINATED")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("COUNT_BITS")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("p",[t._v("从源码中可以看出，线程池在运行的过程中所涉及到的核心状态包括：RUNNING、SHUTDOWN、STOP、TIDYING、TERMINATED。各个状态的具体含义说明如下所示。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("RUNNING：表示线程池处于运行状态，此时线程池能够接收新提交过来的任务，并且也能够处理阻塞队列中的任务。")])]),t._v(" "),s("li",[s("p",[t._v("SHUTDOWN：表示线程池处于关闭状态，此时线程池不能再接收新提交过来的任务，但是不会中断正在执行任务的线程，能够继续执行正在执行的任务，也能够处理阻塞队列中已经保存的任务。如果线程池处于RUNNING状态时，调用线程池的shutdown()方法会使线程池进入SHUTDOWN状态。")])]),t._v(" "),s("li",[s("p",[t._v("STOP：表示线程池处于停止状态，此时线程池不能再接收新提交过来的任务，也不能继续处理阻塞队列中的任务，同时，还会中断正在执行任务的线程，使得正在执行的任务被中断。如果线程池处于RUNNING状态或者SHUTDOWN状态，调用线程池的shutdownNow()方法会使线程池进入STOP状态。")])]),t._v(" "),s("li",[s("p",[t._v("TIDYING：如果线程池中所有的任务都已经终止，有效线程数为0，线程池就会进入TIDYING状态。换句话说，线程池中已经没有正在执行的任务，并且线程池中的阻塞队列为空，同时线程池中的工作线程数量为0，此时，线程池就会进入TIDYING状态。")])]),t._v(" "),s("li",[s("p",[t._v("TERMINATED：如果线程池处于TIDYING状态，此时调用线程池的terminated()方法，线程池就会进入TERMINATED状态。")])])]),t._v(" "),s("h3",{attrs:{id:"_3-2-核心状态的流转过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-核心状态的流转过程"}},[t._v("#")]),t._v(" 3.2 核心状态的流转过程")]),t._v(" "),s("p",[t._v("线程池在运行的过程中，其内部维护的状态变量的值不是一成不变的，而是会随着某些事件的触发而动态变化，线程池核心状态的流转过程如图1-1所示。")]),t._v(" "),s("div",{attrs:{align:"center"}},[s("img",{attrs:{src:"https://binghe.gitcode.host/images/project/threadpool/2025-08-27-001.png?raw=true",width:"70%"}}),t._v(" "),s("br")]),t._v(" "),s("p",[t._v("线程池由RUNNING状态转换成TERMINATED状态需要经过如下流程。")]),t._v(" "),s("p",[t._v("（1）当线程池处于RUNNING状态时，显示调用线程池的shutdown()方法，或者隐式调用finalize()方法，线程池会由RUNNING状态转换为SHUTDOWN状态。")]),t._v(" "),s("p",[t._v("（2）当线程池处于RUNNING状态时，显示调用线程池的shutdownNow()方法，线程池会由RUNNING状态转换为STOP状态。")]),t._v(" "),s("p",[t._v("（3）当线程池处于SHUTDOWN状态时，显示调用线程池的shutdownNow()方法，线程池会由SHUTDOWN状态转换为STOP状态。")]),t._v(" "),s("p",[t._v("（4）当线程池处于SHUTDOWN状态时，如果线程池中无工作线程，并且阻塞队列为空，则线程池会由SHUTDOWN状态转换为TIDYING状态。")]),t._v(" "),s("p",[t._v("（5）当线程池处于STOP状态时，如果线程池中无工作线程，则线程池会由STOP状态转换为TIDYING状态。")]),t._v(" "),s("p",[t._v("（6）当线程池处于TIDYING状态时，调用线程池的terminated()方法，线程池会由TIDYING状态转换为TERMINATED状态。")]),t._v(" "),s("h2",{attrs:{id:"四、线程池的创建方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四、线程池的创建方式"}},[t._v("#")]),t._v(" 四、线程池的创建方式")]),t._v(" "),s("h2",{attrs:{id:"查看完整文章"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查看完整文章"}},[t._v("#")]),t._v(" 查看完整文章")]),t._v(" "),s("p",[t._v("加入"),s("a",{attrs:{href:"https://public.zsxq.com/groups/48848484411888.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("冰河技术"),s("OutboundLink")],1),t._v("知识星球，解锁完整技术文章、小册、视频与完整代码")])])}),[],!1,null,null,null);s.default=e.exports}}]);