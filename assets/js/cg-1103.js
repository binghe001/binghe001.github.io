(window.webpackJsonp=window.webpackJsonp||[]).push([[1103],{1438:function(t,r,e){"use strict";e.r(r);var a=e(15),s=Object(a.a)({},(function(){var t=this,r=t._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"《高性能脱敏组件》脱敏设计-第02节-高性能脱敏组件通用脱敏方法的设计与实现"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#《高性能脱敏组件》脱敏设计-第02节-高性能脱敏组件通用脱敏方法的设计与实现"}},[t._v("#")]),t._v(" 《高性能脱敏组件》脱敏设计-第02节：高性能脱敏组件通用脱敏方法的设计与实现")]),t._v(" "),r("p",[t._v("作者：冰河\n"),r("br"),t._v("星球："),r("a",{attrs:{href:"http://m6z.cn/6aeFbs",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://m6z.cn/6aeFbs"),r("OutboundLink")],1),t._v(" "),r("br"),t._v("博客："),r("a",{attrs:{href:"https://binghe.gitcode.host",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://binghe.gitcode.host"),r("OutboundLink")],1),t._v(" "),r("br"),t._v("文章汇总："),r("a",{attrs:{href:"https://binghe.gitcode.host/md/all/all.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://binghe.gitcode.host/md/all/all.html"),r("OutboundLink")],1),t._v(" "),r("br"),t._v("源码获取地址："),r("a",{attrs:{href:"https://t.zsxq.com/0dhvFs5oR",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://t.zsxq.com/0dhvFs5oR"),r("OutboundLink")],1)]),t._v(" "),r("blockquote",[r("p",[t._v("沉淀，成长，突破，帮助他人，成就自我。")])]),t._v(" "),r("ul",[r("li",[t._v("本章难度：★★☆☆☆")]),t._v(" "),r("li",[t._v("本章重点：对高性能脱敏组件的通用脱敏方法进行设计和实现，从全局角度掌握高性能脱敏组件对敏感信息和隐私数据脱敏的核心设计思路和设计方法。重点掌握通用中间件项目的设计思路和设计方法，并能够将其灵活应用到自身实际项目中。")])]),t._v(" "),r("p",[r("strong",[t._v("大家好，我是冰河~~")])]),t._v(" "),r("p",[t._v("高性能脱敏组件最基础和最核心的功能就是对敏感信息和隐私数据进行脱敏，将数据中的敏感信息和隐私数据脱敏成指定的字符，以免对敏感信息和隐私数据造成泄露。 高性能脱敏组件提供了三种接入方式：通用方法接入、注解方式接入和日志方式接入。接下来，就对高性能脱敏组件的通用脱敏方法进行设计和实现。")]),t._v(" "),r("h2",{attrs:{id:"一、前言"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#一、前言"}},[t._v("#")]),t._v(" 一、前言")]),t._v(" "),r("p",[t._v("在需求设计篇章，我们梳理了为何学习高性能脱敏组件，阐述了高性能脱敏组件的目标与挑战，对设计高性能脱敏组件面对的挑战给出了详细的应对方案，并且从功能性需求和非功能性需求等方面详细梳理了高性能脱敏组件的需求。")]),t._v(" "),r("p",[t._v("在架构设计篇章，详细阐述了高性能脱敏组件的方案目标、技术选型和总体架构设计。并且对高性能脱敏组件的通用化落地方案进行了简单的说明。")]),t._v(" "),r("p",[t._v("在脱敏设计篇章，我们已经开始对高性能脱敏组件进行编码设计和实现，目前，已经对注解、接口与顶层抽象类进行了设计和实现。接下来，就对高性能脱敏组件的通用脱敏方法进行设计和实现。")]),t._v(" "),r("h2",{attrs:{id:"二、本节诉求"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#二、本节诉求"}},[t._v("#")]),t._v(" 二、本节诉求")]),t._v(" "),r("p",[t._v("对高性能脱敏组件的通用脱敏方法进行设计和实现，从全局角度掌握高性能脱敏组件对敏感信息和隐私数据脱敏的核心设计思路和设计方法。重点掌握通用中间件项目的设计思路和设计方法，并能够将其灵活应用到自身实际项目中。")]),t._v(" "),r("h2",{attrs:{id:"三、核心类设计"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#三、核心类设计"}},[t._v("#")]),t._v(" 三、核心类设计")]),t._v(" "),r("p",[r("strong",[t._v("注意：本节只给大家展示高性能脱敏组件通用脱敏方法的核心类实现关系，其他代码的实现细节，大家可以自行到本节对应的源码分支进行查看，这里不再赘述。")])]),t._v(" "),r("p",[t._v("高性能脱敏组件通用脱敏方法的核心类设计如图2-1所示。")]),t._v(" "),r("div",{attrs:{align:"center"}},[r("img",{attrs:{src:"https://binghe.gitcode.host/images/project/sensitive/2025-09-15-001.png?raw=true",width:"70%"}}),t._v(" "),r("br")]),t._v(" "),r("p",[t._v("可以看到，高性能脱敏组件的通用脱敏方法主要由SensitiveDataUtils工具类customizeHide()方法实现。在customizeHide()方法中，主要提供了如下四个参数：")]),t._v(" "),r("ul",[r("li",[t._v("sensitiveData：要脱敏的字符串。")]),t._v(" "),r("li",[t._v("frontCharNum：脱敏后字符串开头部分保留多少个原始字符。")]),t._v(" "),r("li",[t._v("tailCharNum：脱敏后字符串结尾部分保留多少个原始字符。")]),t._v(" "),r("li",[t._v("hiddenCharNum：脱敏后字符串中间部分使用多少个*替换原始字符。")])]),t._v(" "),r("h2",{attrs:{id:"四、编码实现"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#四、编码实现"}},[t._v("#")]),t._v(" 四、编码实现")]),t._v(" "),r("p",[t._v("本节的编码实现比较简单，就是对SensitiveDataUtils工具类进行编码实现。")]),t._v(" "),r("p",[t._v("源码详见：io.binghe.framework.shield.utils.SensitiveDataUtils。")]),t._v(" "),r("h2",{attrs:{id:"查看完整文章"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#查看完整文章"}},[t._v("#")]),t._v(" 查看完整文章")]),t._v(" "),r("p",[t._v("加入"),r("a",{attrs:{href:"https://public.zsxq.com/groups/48848484411888.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("冰河技术"),r("OutboundLink")],1),t._v("知识星球，解锁完整技术文章、小册、视频与完整代码")])])}),[],!1,null,null,null);r.default=s.exports}}]);