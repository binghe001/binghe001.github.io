(window.webpackJsonp=window.webpackJsonp||[]).push([[1117],{1449:function(t,r,e){"use strict";e.r(r);var s=e(15),a=Object(s.a)({},(function(){var t=this,r=t._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"《高性能sql引擎》sql引擎设计-第01节-高性能sql引擎sql构建器设计与实现"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#《高性能sql引擎》sql引擎设计-第01节-高性能sql引擎sql构建器设计与实现"}},[t._v("#")]),t._v(" 《高性能SQL引擎》SQL引擎设计-第01节：高性能SQL引擎SQL构建器设计与实现")]),t._v(" "),r("p",[t._v("作者：冰河\n"),r("br"),t._v("星球："),r("a",{attrs:{href:"http://m6z.cn/6aeFbs",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://m6z.cn/6aeFbs"),r("OutboundLink")],1),t._v(" "),r("br"),t._v("博客："),r("a",{attrs:{href:"https://binghe.gitcode.host",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://binghe.gitcode.host"),r("OutboundLink")],1),t._v(" "),r("br"),t._v("文章汇总："),r("a",{attrs:{href:"https://binghe.gitcode.host/md/all/all.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://binghe.gitcode.host/md/all/all.html"),r("OutboundLink")],1),t._v(" "),r("br"),t._v("源码获取地址："),r("a",{attrs:{href:"https://t.zsxq.com/0dhvFs5oR",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://t.zsxq.com/0dhvFs5oR"),r("OutboundLink")],1)]),t._v(" "),r("blockquote",[r("p",[t._v("沉淀，成长，突破，帮助他人，成就自我。")])]),t._v(" "),r("ul",[r("li",[t._v("本节难度：★★☆☆☆")]),t._v(" "),r("li",[t._v("本节重点：对高性能SQL引擎的SQL构建器进行设计与实现，从全局视角了解高性能SQL引擎的设计和架构思想，并能够将其灵活应用到自身实际项目中。")])]),t._v(" "),r("p",[r("strong",[t._v("大家好，我是冰河~~")])]),t._v(" "),r("p",[t._v("高性能SQL引擎最基础和最核心的功能就是通过JSON模板或者直接创建对象组合动态生成SQL，不再依赖各种实体模型来接收和传递数据。同时，高性能SQL引擎自身会设计和实现通用的数据模型。要想将这些通用的数据模型构建成通用的JSON模板或者创建对象组合动态SQL，则需要为高性能SQL引擎设计和实现专门的SQL构建器。")]),t._v(" "),r("h2",{attrs:{id:"一、前言"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#一、前言"}},[t._v("#")]),t._v(" 一、前言")]),t._v(" "),r("p",[t._v("截止到目前，我们已经明确了高性能SQL引擎的需求和流程，并且对高性能SQL引擎的方案目标、总体架构设计和内部执行流程进行了总体介绍，并且已经对高性能SQL引擎的通用化落地方案进行了详细的阐述。同时，在通用模型设计篇章，对高性能SQL引擎的通用数据模板和通用数据模型等进行了设计与实现。接下来，我们就需要思考如何设计和实现SQL构建器将这些通用的数据模型构建成通用的JSON模板或者创建对象组合动态SQL。")]),t._v(" "),r("h2",{attrs:{id:"二、本节诉求"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#二、本节诉求"}},[t._v("#")]),t._v(" 二、本节诉求")]),t._v(" "),r("p",[t._v("对高性能SQL引擎的SQL构建器进行设计与实现，从全局视角了解高性能SQL引擎的设计和架构思想，并能够将其灵活应用到自身实际项目中。")]),t._v(" "),r("h2",{attrs:{id:"三、sql构建器设计"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#三、sql构建器设计"}},[t._v("#")]),t._v(" 三、SQL构建器设计")]),t._v(" "),r("p",[t._v("SQL构建器在整体流程上会由SQL引擎进行驱动执行，并且SQL构建器会按照设计好的流程执行生成SQL的逻辑，如图1-1所示。")]),t._v(" "),r("div",{attrs:{align:"center"}},[r("img",{attrs:{src:"https://binghe.gitcode.host/images/project/sql/2025-08-21-001.png?raw=true",width:"70%"}}),t._v(" "),r("br")]),t._v(" "),r("p",[t._v("可以看到，SQL构建器在SQL引擎的驱动下，经过一系列设计好的流程，将各个通用模型，包括：表模型、分组与聚合模型、关联模型、条件模型、分页模型和排序模型等，进行解析和拼接，最终生成我们想要的完整SQL语句。")]),t._v(" "),r("h2",{attrs:{id:"四、sql构建器实现"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#四、sql构建器实现"}},[t._v("#")]),t._v(" 四、SQL构建器实现")]),t._v(" "),r("p",[t._v("由于SQL构建器的代码实现相对比较复杂，代码量较多，这里，只给出SQL构建器的一部分代码实现，完整的实现代码，大家可以到本节对应的代码分支进行查看。")]),t._v(" "),r("p",[r("strong",[t._v("（1）实现核心成员变量")])]),t._v(" "),r("p",[t._v("对于SQL构建器来说，在生成SQL的过程中，需要将一些中间状态或者中间碎片化的SQL语句保存在成员变量中，所以需要为SQL构建器定义一些成员变量。")]),t._v(" "),r("p",[t._v("源码详见：io.binghe.sql.plugin.builder.SqlBuilder。")]),t._v(" "),r("h2",{attrs:{id:"查看完整文章"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#查看完整文章"}},[t._v("#")]),t._v(" 查看完整文章")]),t._v(" "),r("p",[t._v("加入"),r("a",{attrs:{href:"https://public.zsxq.com/groups/48848484411888.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("冰河技术"),r("OutboundLink")],1),t._v("知识星球，解锁完整技术文章、小册、视频与完整代码")])])}),[],!1,null,null,null);r.default=a.exports}}]);