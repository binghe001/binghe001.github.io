(window.webpackJsonp=window.webpackJsonp||[]).push([[847],{1182:function(t,r,e){"use strict";e.r(r);var s=e(15),a=Object(s.a)({},(function(){var t=this,r=t._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"《高性能polaris网关》注册中心-第01节-注册中心通用spi接口的设计与定义"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#《高性能polaris网关》注册中心-第01节-注册中心通用spi接口的设计与定义"}},[t._v("#")]),t._v(" 《高性能Polaris网关》注册中心-第01节：注册中心通用SPI接口的设计与定义")]),t._v(" "),r("p",[t._v("作者：冰河\n"),r("br"),t._v("星球："),r("a",{attrs:{href:"http://m6z.cn/6aeFbs",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://m6z.cn/6aeFbs"),r("OutboundLink")],1),t._v(" "),r("br"),t._v("博客："),r("a",{attrs:{href:"https://binghe.gitcode.host",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://binghe.gitcode.host"),r("OutboundLink")],1),t._v(" "),r("br"),t._v("文章汇总："),r("a",{attrs:{href:"https://binghe.gitcode.host/md/all/all.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://binghe.gitcode.host/md/all/all.html"),r("OutboundLink")],1),t._v(" "),r("br"),t._v("源码获取地址："),r("a",{attrs:{href:"https://t.zsxq.com/0dhvFs5oR",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://t.zsxq.com/0dhvFs5oR"),r("OutboundLink")],1)]),t._v(" "),r("blockquote",[r("p",[t._v("沉淀，成长，突破，帮助他人，成就自我。")])]),t._v(" "),r("ul",[r("li",[t._v("本节难度：★★★☆☆")]),t._v(" "),r("li",[t._v("本节重点：对网关的注册中心SPI通用接口进行设计和定义，深入理解高性能Polaris网关注册中心的设计与实现。重点掌握整体调用链路的设计思路和设计方法，并能够将其灵活应用到自身实际项目中。")])]),t._v(" "),r("p",[t._v("截止到目前，我们已经完成了网关最基础和最核心的功能，也对通过网关访问后端服务进行了实现。如何让网关自动发现后端服务呢？这就需要网关实现一套通用的服务注册与发现逻辑。所以，在注册中心篇章，我们会基于自定义SPI实现多种不同的服务注册中心，实现多种不同的服务注册与发现逻辑。")]),t._v(" "),r("h2",{attrs:{id:"一、背景"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#一、背景"}},[t._v("#")]),t._v(" 一、背景")]),t._v(" "),r("p",[t._v("截止到目前，我们已经实现了网关的最基础与最核心的功能，主要包括：需求设计、总体架构设计、环境搭建、通用模型设计与实现、基于自定义SPI设计与实现通用过滤器、高性能BatchEvent模式与MPMC模式缓冲队列通用处理器的设计与实现、HTTP核心处理器的设计与实现和网关核心启动容器的设计与实现。")]),t._v(" "),r("p",[t._v("为了能够让网关自动发现后端服务，接下来，就要通过SPI机制对网关的注册中心进行设计实现。")]),t._v(" "),r("h2",{attrs:{id:"二、本节重点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#二、本节重点"}},[t._v("#")]),t._v(" 二、本节重点")]),t._v(" "),r("p",[t._v("对网关的注册中心SPI通用接口进行设计和定义，深入理解高性能Polaris网关注册中心的设计与实现。重点掌握整体调用链路的设计思路和设计方法，并能够将其灵活应用到自身实际项目中。")]),t._v(" "),r("h2",{attrs:{id:"三、核心类设计"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#三、核心类设计"}},[t._v("#")]),t._v(" 三、核心类设计")]),t._v(" "),r("p",[t._v("网关注册中心通用接口的类图如图1-1所示。")]),t._v(" "),r("div",{attrs:{align:"center"}},[r("img",{attrs:{src:"https://binghe.gitcode.host/images/project/gateway/2025-07-18-001.png?raw=true",width:"70%"}}),t._v(" "),r("br")]),t._v(" "),r("p",[t._v("可以看到，在设计网关注册中心的通用接口时，主要设计了RegistryService接口、RegistryListener接口和RegistryConfig类。其中RegistryService接口是网关服务注册与发现的核心接口，RegistryListener接口是服务发现监听器接口，主要监听发现的服务实例，将其放入对应的缓存。RegistryConfig主要用于初始化每个服务注册中心的实现类。")]),t._v(" "),r("p",[r("strong",[t._v("注意：这里重点给大家展示网关的注册中心核心接口，其他代码的实现细节，大家可以自行到本节对应的源码分支进行查看，这里不再赘述。")])]),t._v(" "),r("h2",{attrs:{id:"四、编码实现"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#四、编码实现"}},[t._v("#")]),t._v(" 四、编码实现")]),t._v(" "),r("p",[t._v("本节，就对网关的注册中心核心接口进行编码实现，其他代码的实现细节，大家可以自行到本节对应的源码分支进行查看，这里不再赘述。")]),t._v(" "),r("p",[r("strong",[t._v("（1）实现RegistryService接口")])]),t._v(" "),r("p",[t._v("RegistryService接口是网关实现服务注册与发现的核心接口，主要通过自定义SPI加载对应的实现类。")]),t._v(" "),r("p",[t._v("源码详见：polaris-register-api工程下的io.binghe.polaris.register.api.RegistryService。")]),t._v(" "),r("h2",{attrs:{id:"查看完整文章"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#查看完整文章"}},[t._v("#")]),t._v(" 查看完整文章")]),t._v(" "),r("p",[t._v("加入"),r("a",{attrs:{href:"https://public.zsxq.com/groups/48848484411888.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("冰河技术"),r("OutboundLink")],1),t._v("知识星球，解锁完整技术文章、小册、视频与完整代码")])])}),[],!1,null,null,null);r.default=a.exports}}]);