(window.webpackJsonp=window.webpackJsonp||[]).push([[120],{453:function(t,a,s){"use strict";s.r(a);var n=s(14),r=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"《并发设计模式》第52章-主仆模式-主仆模式在jdk中的应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#《并发设计模式》第52章-主仆模式-主仆模式在jdk中的应用"}},[t._v("#")]),t._v(" 《并发设计模式》第52章-主仆模式-主仆模式在JDK中的应用")]),t._v(" "),a("p",[t._v("作者：冰河\n"),a("br"),t._v("星球："),a("a",{attrs:{href:"http://m6z.cn/6aeFbs",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://m6z.cn/6aeFbs"),a("OutboundLink")],1),t._v(" "),a("br"),t._v("博客："),a("a",{attrs:{href:"https://binghe.gitcode.host",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://binghe.gitcode.host"),a("OutboundLink")],1),t._v(" "),a("br"),t._v("文章汇总："),a("a",{attrs:{href:"https://binghe.gitcode.host/md/all/all.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://binghe.gitcode.host/md/all/all.html"),a("OutboundLink")],1),t._v(" "),a("br"),t._v("源码获取地址："),a("a",{attrs:{href:"https://t.zsxq.com/0dhvFs5oR",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://t.zsxq.com/0dhvFs5oR"),a("OutboundLink")],1)]),t._v(" "),a("blockquote",[a("p",[t._v("沉淀，成长，突破，帮助他人，成就自我。")])]),t._v(" "),a("ul",[a("li",[t._v("本章难度：★★☆☆☆")]),t._v(" "),a("li",[t._v("本章重点：了解主仆模式的核心原理与使用场景，掌握主仆模式在JDK中的应用，能够初步结合自身项目实际场景思考如何将主仆模式灵活应用到自身实际项目中。")])]),t._v(" "),a("p",[a("strong",[t._v("大家好，我是冰河~~")])]),t._v(" "),a("p",[t._v("在JDK中，提供了这样一种功能：它能够将复杂的逻辑拆分成一个个简单的逻辑来并行执行，待每个并行执行的逻辑执行完成后，再将各个结果进行汇总，得出最终的结果数据。有点像Hadoop中的MapReduce。")]),t._v(" "),a("p",[t._v("ForkJoin是由JDK1.7之后提供的多线程并发处理框架。ForkJoin框架的基本思想是分而治之。什么是分而治之？分而治之就是将一个复杂的计算，按照设定的阈值分解成多个计算，然后将各个计算结果进行汇总。相应的，ForkJoin将复杂的计算当做一个任务，而分解的多个计算则是当做一个个子任务来并行执行。")]),t._v(" "),a("h2",{attrs:{id:"一、java并发编程的发展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、java并发编程的发展"}},[t._v("#")]),t._v(" 一、Java并发编程的发展")]),t._v(" "),a("p",[t._v("对于Java语言来说，生来就支持多线程并发编程，在并发编程领域也是在不断发展的。Java在其发展过程中对并发编程的支持越来越完善也正好印证了这一点。")]),t._v(" "),a("ul",[a("li",[t._v("Java 1 支持thread，synchronized。")]),t._v(" "),a("li",[t._v("Java 5 引入了 thread pools， blocking queues, concurrent collections，locks, condition queues。")]),t._v(" "),a("li",[t._v("Java 7 加入了fork-join库。")]),t._v(" "),a("li",[t._v("Java 8 加入了 parallel streams。")])]),t._v(" "),a("h3",{attrs:{id:"_1-1-并发与并行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-并发与并行"}},[t._v("#")]),t._v(" 1.1 并发与并行")]),t._v(" "),a("p",[a("strong",[t._v("并发和并行在本质上还是有所区别的。")])]),t._v(" "),a("h5",{attrs:{id:"并发"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#并发"}},[t._v("#")]),t._v(" 并发")]),t._v(" "),a("p",[t._v("并发指的是在同一时刻，只有一个线程能够获取到CPU执行任务，而多个线程被快速的轮换执行，这就使得在宏观上具有多个线程同时执行的效果，并发不是真正的同时执行，并发可以使用下图表示。")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:"https://binghe.gitcode.host/assets/images/core/concurrent/2023-11-08-001.png?raw=true",width:"80%"}}),t._v(" "),a("br")]),t._v(" "),a("h5",{attrs:{id:"并行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#并行"}},[t._v("#")]),t._v(" 并行")]),t._v(" "),a("p",[t._v("并行指的是无论何时，多个线程都是在多个CPU核心上同时执行的，是真正的同时执行。")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:"https://binghe.gitcode.host/assets/images/core/concurrent/2023-11-08-002.png?raw=true",width:"80%"}}),t._v(" "),a("br")]),t._v(" "),a("h2",{attrs:{id:"二、分治法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、分治法"}},[t._v("#")]),t._v(" 二、分治法")]),t._v(" "),a("h3",{attrs:{id:"_2-1-基本思想"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-基本思想"}},[t._v("#")]),t._v(" 2.1 基本思想")]),t._v(" "),a("blockquote",[a("p",[t._v("把一个规模大的问题划分为规模较小的子问题，然后分而治之，最后合并子问题的解得到原问题的解。")])]),t._v(" "),a("h3",{attrs:{id:"_2-2-步骤"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-步骤"}},[t._v("#")]),t._v(" 2.2 步骤")]),t._v(" "),a("p",[t._v("①分割原问题；")]),t._v(" "),a("p",[t._v("②求解子问题；")]),t._v(" "),a("p",[t._v("③合并子问题的解为原问题的解。")]),t._v(" "),a("p",[t._v("我们可以使用如下伪代码来表示这个步骤。")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("任务很小）"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    直接计算得到结果\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    分拆成"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("N")]),t._v("个子任务\n    调用子任务的"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fork")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("进行计算\n    调用子任务的"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("合并计算结果\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("p",[t._v("在分治法中，子问题一般是相互独立的，因此，经常通过递归调用算法来求解子问题。")]),t._v(" "),a("h3",{attrs:{id:"_2-3-典型应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-典型应用"}},[t._v("#")]),t._v(" 2.3 典型应用")]),t._v(" "),a("ul",[a("li",[t._v("二分搜索")]),t._v(" "),a("li",[t._v("大整数乘法")]),t._v(" "),a("li",[t._v("Strassen矩阵乘法")]),t._v(" "),a("li",[t._v("棋盘覆盖")]),t._v(" "),a("li",[t._v("合并排序")]),t._v(" "),a("li",[t._v("快速排序")]),t._v(" "),a("li",[t._v("线性时间选择")]),t._v(" "),a("li",[t._v("汉诺塔")])]),t._v(" "),a("h2",{attrs:{id:"三、forkjoin并行处理框架"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、forkjoin并行处理框架"}},[t._v("#")]),t._v(" 三、ForkJoin并行处理框架")]),t._v(" "),a("h3",{attrs:{id:"_3-1-forkjoin框架概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-forkjoin框架概述"}},[t._v("#")]),t._v(" 3.1 ForkJoin框架概述")]),t._v(" "),a("p",[t._v("Java 1.7 引入了一种新的并发框架—— Fork/Join Framework，主要用于实现“分而治之”的算法，特别是分治之后递归调用的函数。")]),t._v(" "),a("p",[t._v("ForkJoin框架的本质是一个用于并行执行任务的框架， 能够把一个大任务分割成若干个小任务，最终汇总每个小任务结果后得到大任务的计算结果。在Java中，ForkJoin框架与ThreadPool共存，并不是要替换ThreadPool")]),t._v(" "),a("p",[t._v("其实，在Java 8中引入的并行流计算，内部就是采用的ForkJoinPool来实现的。例如，下面使用并行流实现打印数组元组的程序。")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SumArray")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" numberList "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Arrays")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("asList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        numberList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parallelStream")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[t._v("这段代码的背后就使用到了ForkJoinPool。")]),t._v(" "),a("p",[t._v("说到这里，可能有读者会问："),a("strong",[t._v("可以使用线程池的ThreadPoolExecutor来实现啊？为什么要使用ForkJoinPool啊？ForkJoinPool是个什么鬼啊？！")]),t._v(" 接下来，我们就来回答这个问题。")]),t._v(" "),a("h3",{attrs:{id:"_3-2-forkjoin框架原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-forkjoin框架原理"}},[t._v("#")]),t._v(" 3.2 ForkJoin框架原理")]),t._v(" "),a("p",[t._v("ForkJoin框架是从jdk1.7中引入的新特性,它同ThreadPoolExecutor一样，也实现了Executor和ExecutorService接口。它使用了一个无限队列来保存需要执行的任务，而线程的数量则是通过构造函数传入，如果没有向构造函数中传入指定的线程数量，那么当前计算机可用的CPU数量会被设置为线程数量作为默认值。")]),t._v(" "),a("p",[t._v("ForkJoinPool主要使用**分治法(Divide-and-Conquer Algorithm)**来解决问题。典型的应用比如快速排序算法。这里的要点在于，ForkJoinPool能够使用相对较少的线程来处理大量的任务。比如要对1000万个数据进行排序，那么会将这个任务分割成两个500万的排序任务和一个针对这两组500万数据的合并任务。以此类推，对于500万的数据也会做出同样的分割处理，到最后会设置一个阈值来规定当数据规模到多少时，停止这样的分割处理。比如，当元素的数量小于10时，会停止分割，转而使用插入排序对它们进行排序。那么到最后，所有的任务加起来会有大概200万+个。问题的关键在于，对于一个任务而言，只有当它所有的子任务完成之后，它才能够被执行。")]),t._v(" "),a("p",[t._v("所以当使用ThreadPoolExecutor时，使用分治法会存在问题，因为ThreadPoolExecutor中的线程无法向任务队列中再添加一个任务并在等待该任务完成之后再继续执行。而使用ForkJoinPool就能够解决这个问题，它就能够让其中的线程创建新的任务，并挂起当前的任务，此时线程就能够从队列中选择子任务执行。")]),t._v(" "),a("p",[a("strong",[t._v("那么使用ThreadPoolExecutor或者ForkJoinPool，性能上会有什么差异呢？")])]),t._v(" "),a("p",[t._v("首先，使用ForkJoinPool能够使用数量有限的线程来完成非常多的具有父子关系的任务，比如使用4个线程来完成超过200万个任务。但是，使用ThreadPoolExecutor时，是不可能完成的，因为ThreadPoolExecutor中的Thread无法选择优先执行子任务，需要完成200万个具有父子关系的任务时，也需要200万个线程，很显然这是不可行的，也是很不合理的！！")]),t._v(" "),a("h3",{attrs:{id:"_3-3-工作窃取算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-工作窃取算法"}},[t._v("#")]),t._v(" 3.3 工作窃取算法")]),t._v(" "),a("h2",{attrs:{id:"查看全文"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看全文"}},[t._v("#")]),t._v(" 查看全文")]),t._v(" "),a("p",[t._v("加入"),a("a",{attrs:{href:"http://m6z.cn/6aeFbs",target:"_blank",rel:"noopener noreferrer"}},[t._v("冰河技术"),a("OutboundLink")],1),t._v("知识星球，解锁完整技术文章与完整代码")])])}),[],!1,null,null,null);a.default=r.exports}}]);