(window.webpackJsonp=window.webpackJsonp||[]).push([[1129],{1462:function(t,r,e){"use strict";e.r(r);var a=e(15),o=Object(a.a)({},(function(){var t=this,r=t._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"《手写线程池》线程池核心技术-第02节-线程池总体结构技术解析"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#《手写线程池》线程池核心技术-第02节-线程池总体结构技术解析"}},[t._v("#")]),t._v(" 《手写线程池》线程池核心技术：第02节：线程池总体结构技术解析")]),t._v(" "),r("p",[t._v("作者：冰河\n"),r("br"),t._v("星球："),r("a",{attrs:{href:"http://m6z.cn/6aeFbs",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://m6z.cn/6aeFbs"),r("OutboundLink")],1),t._v(" "),r("br"),t._v("博客："),r("a",{attrs:{href:"https://binghe.gitcode.host",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://binghe.gitcode.host"),r("OutboundLink")],1),t._v(" "),r("br"),t._v("文章汇总："),r("a",{attrs:{href:"https://binghe.gitcode.host/md/all/all.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://binghe.gitcode.host/md/all/all.html"),r("OutboundLink")],1),t._v(" "),r("br"),t._v("源码获取地址："),r("a",{attrs:{href:"https://t.zsxq.com/0dhvFs5oR",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://t.zsxq.com/0dhvFs5oR"),r("OutboundLink")],1)]),t._v(" "),r("blockquote",[r("p",[t._v("沉淀，成长，突破，帮助他人，成就自我。")])]),t._v(" "),r("ul",[r("li",[t._v("本章难度：★★★☆☆")]),t._v(" "),r("li",[t._v("本章重点：简单介绍线程池的总体结构，重点掌握：线程池的优缺点、Executors类、ThreadPoolExecutor类和线程池顶层接口和抽象类等核心技术。从全局视角掌握线程池的核心技术原理，学会融汇贯通，将线程池的编程思想灵活应用到自身实际项目中，提升实际项目的并发处理能力，以及自身的并发编程内功功底。")])]),t._v(" "),r("p",[r("strong",[t._v("大家好，我是冰河~~")])]),t._v(" "),r("p",[t._v("在真实高并发场景下，基本上不会直接使用Thread类创建线程，大部分场景下，都是使用线程池来创建并管理线程。可以这么说，学好线程池对于并发编程来说是非常重要的。")]),t._v(" "),r("h2",{attrs:{id:"一、前言"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#一、前言"}},[t._v("#")]),t._v(" 一、前言")]),t._v(" "),r("p",[t._v("在线程池核心技术篇章，已经对线程池的核心原理进行了详细的阐述，包括介绍了线程池的核心状态，结合源码的方式介绍了创建线程池的方式，阐述了线程池执行任务的核心流程和线程池的关闭方式。最后，分别介绍了在CPU密集型程序和IO密集型程序中如何确定最佳的线程数。接下来，对线程池的总体结构进行简单的介绍。")]),t._v(" "),r("h2",{attrs:{id:"二、本节诉求"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#二、本节诉求"}},[t._v("#")]),t._v(" 二、本节诉求")]),t._v(" "),r("p",[t._v("简单介绍线程池的总体结构，重点掌握：线程池的优缺点、Executors类、ThreadPoolExecutor类和线程池顶层接口和抽象类等核心技术。从全局视角掌握线程池的核心技术原理，学会融汇贯通，将线程池的编程思想灵活应用到自身实际项目中，提升实际项目的并发处理能力，以及自身的并发编程内功功底。")]),t._v(" "),r("h2",{attrs:{id:"三、线程池简介"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#三、线程池简介"}},[t._v("#")]),t._v(" 三、线程池简介")]),t._v(" "),r("p",[t._v("线程池的创建和回收是一个非常消耗系统资源的过程，如果在系统中频繁的创建和回收线程，会极大的降低程序的执行性能。并且，短时间内创建大量的线程可能会造成CPU占用100%、死机或者内存溢出等问题。而使用线程池就能过非常轻松的解决这些问题。")]),t._v(" "),r("h3",{attrs:{id:"_3-1-线程池概述"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-线程池概述"}},[t._v("#")]),t._v(" 3.1 线程池概述")]),t._v(" "),r("p",[t._v("线程池是Java从JDK1.5版本提供的一种线程使用模式，能够自动创建和回收线程，并管理线程的生命周期。在线程池中能够管理和维护多个线程的运行。")]),t._v(" "),r("p",[t._v("Java中的线程池主要是通过Executor框架实现的，主要涉及到Executor接口、ExecutorServcie接口、AbstractExecutorService抽象类、ScheduledExecutorService接口、ThreadPoolExecutor类、ScheduledThreadPoolExecutor和Executors类。线程池核心类继承关系如图2-1所示。")]),t._v(" "),r("div",{attrs:{align:"center"}},[r("img",{attrs:{src:"https://binghe.gitcode.host/images/project/threadpool/2025-08-28-001.png?raw=true",width:"70%"}}),t._v(" "),r("br")]),t._v(" "),r("p",[t._v("在实现线程池的核心类中，最核心的类是ThreadPoolExecutor类，而ScheduledThreadPoolExecutor类实现了定时任务功能，它能够使提交到线程池中的任务定时、定期执行。另外，除了图2-1所示的接口和类外，为了便于创建线程池，JDK中还提供了一个Executors工具类，Executors类中封装了创建线程池的各种方法，专门用于创建线程池。")]),t._v(" "),r("p",[t._v("不过，在真实的高并发场景下，并不推荐使用Executors工具类创建线程池，而是推荐直接使用ThreadPoolExecutor类创建线程池。")]),t._v(" "),r("h3",{attrs:{id:"_3-2-线程池的优点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-线程池的优点"}},[t._v("#")]),t._v(" 3.2 线程池的优点")]),t._v(" "),r("p",[t._v("这里，综合对比直接使用Thread类创建线程的弊端与使用线程池的优点，来加深小伙伴们对线程池的理解。")]),t._v(" "),r("p",[r("strong",[t._v("1.直接使用Thread类创建线程的缺点")])]),t._v(" "),r("p",[t._v("直接在程序中使用Thread类创建线程的方式是非常不可取的，主要体现在如下几个方面。")]),t._v(" "),r("p",[t._v("（1）每次通过Thread类创建一个线程对象的性能是非常差的，每次创建Thread对象后，调用Thread的start()方法，会在操作系统层面分配一个与之对应的线程，这个过程比较耗时。")]),t._v(" "),r("p",[t._v("（2）直接使用Thread类创建线程缺乏有效的统一管理机制，如果在短时间内创建大量的线程，线程之间会相互竞争系统资源，可能会造成CPU占用100%、死机或者内存溢出等问题。")]),t._v(" "),r("p",[t._v("（3）直接使用Thread类创建线程提供的线程功能非常有限，例如，让线程执行更多的任务，定期执行某些任务等场景是通过Thread创建线程无法满足的。")]),t._v(" "),r("p",[t._v("（4）直接使用Thread类创建线程，无法对线程进行有效的监控。")]),t._v(" "),r("h2",{attrs:{id:"查看完整文章"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#查看完整文章"}},[t._v("#")]),t._v(" 查看完整文章")]),t._v(" "),r("p",[t._v("加入"),r("a",{attrs:{href:"https://public.zsxq.com/groups/48848484411888.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("冰河技术"),r("OutboundLink")],1),t._v("知识星球，解锁完整技术文章、小册、视频与完整代码")])])}),[],!1,null,null,null);r.default=o.exports}}]);