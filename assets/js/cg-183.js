(window.webpackJsonp=window.webpackJsonp||[]).push([[183],{483:function(a,e,t){"use strict";t.r(e);var r=t(7),v=Object(r.a)({},(function(){var a=this,e=a._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"《jvm核心技术》第11章-jvm各种参数配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#《jvm核心技术》第11章-jvm各种参数配置"}},[a._v("#")]),a._v(" 《JVM核心技术》第11章：JVM各种参数配置")]),a._v(" "),e("p",[e("strong",[a._v("大家好，我是冰河~~")])]),a._v(" "),e("p",[a._v("今天跟大家聊聊JVM中的各种参数配置，好了不多说了，开始今天的正题。")]),a._v(" "),e("h2",{attrs:{id:"参数打印相关设置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参数打印相关设置"}},[a._v("#")]),a._v(" 参数打印相关设置")]),a._v(" "),e("p",[a._v("-XX:+PrintCommandLineFlags 可以在程序运行前打印出用户手动设置或是JVM自动设置的XX参数。")]),a._v(" "),e("p",[a._v("-XX:+PrintFlagsInitial 打印出所有XX参数的默认值。")]),a._v(" "),e("p",[a._v("-XX:+PrintFlagsFinal 打印出XX参数在运行程序时生效的值。")]),a._v(" "),e("p",[a._v("-XX:+PrintVMOptions 打印JVM的参数。")]),a._v(" "),e("h2",{attrs:{id:"堆、栈、方法区等内存大小设置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#堆、栈、方法区等内存大小设置"}},[a._v("#")]),a._v(" 堆、栈、方法区等内存大小设置")]),a._v(" "),e("h3",{attrs:{id:"栈"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#栈"}},[a._v("#")]),a._v(" 栈")]),a._v(" "),e("p",[a._v("-Xss1m 设置每个线程栈大小为1m，等价于-XX:ThreadStackSize=1m。")]),a._v(" "),e("h3",{attrs:{id:"堆"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#堆"}},[a._v("#")]),a._v(" 堆")]),a._v(" "),e("p",[a._v("-Xms2048m 设置JVM初始堆内存为2048m，等价于-XX:InitialHeapSize。")]),a._v(" "),e("p",[a._v("-Xmx2048 设置JVM最大堆内存为2018m，等价于-XX:MaxHeapSize。")]),a._v(" "),e("p",[a._v("-Xmn1g 设置年轻代大小为1g，官方推荐配置为整个堆大小的3/8。")]),a._v(" "),e("p",[a._v("-XX:NewSize=1024m 设置年轻代初始值为1024m。")]),a._v(" "),e("p",[a._v("-XXMaxNewSize=1024m 设置年轻代最大值为1024m。")]),a._v(" "),e("blockquote",[e("p",[a._v("3、4、5的关系官方文档描述是 The -XX:NewSize option is equivalent to -Xmn.\nInstead of the -Xmn option to set both the initial and maximum size of the heap for the young generation, you can use -XX:NewSize to set the initial size and -XX:MaxNewSize to set the maximum size.")])]),a._v(" "),e("p",[a._v("-XX:SurvivorRatio=8 设置年轻代中Eden区和一个survivor区的比值，默认为8。")]),a._v(" "),e("p",[a._v("-XX:+UseAdaptiveSizePolicy 开启自动选择各区大小比例")]),a._v(" "),e("blockquote",[e("p",[a._v("UseAdaptiveSizePolicy默认是开启的，此时SurvivorRatio=8是不生效的，将UseAdaptiveSizePolicy关闭后，设置SurvivorRatio=8才会生效，Eden:survivor=8:1")])]),a._v(" "),e("p",[a._v("-XX:NewRatio=2 设置老年代和年轻代（包括1个Eden和2个Survivor）的比值，默认为2，表示年轻代占整个堆空间的1/3，老年代占2/3。")]),a._v(" "),e("p",[a._v("-XX:PretenureSizeThreshold=1024 大于此阀值的对象直接分配在老年代，默认值的单位是字节，自行设置时也可以写成1m，只对Serial、ParNew收集器有效。")]),a._v(" "),e("p",[a._v("-XX:MaxTenuringThreshold=15 默认值是15，年轻代每次MinorGC后，还存活的对象年龄+1，当对象的年龄大于设置的这个值时就进入老年代。")]),a._v(" "),e("p",[a._v("-XX:-PrintTenuringDistribution，让JVM在每次MinorGC后打印出当前使用的Survivor中对象的年龄分布，默认是关闭的。")]),a._v(" "),e("p",[a._v("-XX:TargetSurvivorRatio 表示MinorGC结束后Survivor中占用空间的期望比例。")]),a._v(" "),e("h2",{attrs:{id:"方法区"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方法区"}},[a._v("#")]),a._v(" 方法区")]),a._v(" "),e("h3",{attrs:{id:"before-jdk8"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#before-jdk8"}},[a._v("#")]),a._v(" Before JDK8")]),a._v(" "),e("p",[a._v("-XX:PermSize=128m 设置永久代初始值为128m。")]),a._v(" "),e("p",[a._v("-XX:MaxPermSize=128m 设置永久代最大值为128m。")]),a._v(" "),e("h3",{attrs:{id:"jdk8"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jdk8"}},[a._v("#")]),a._v(" JDK8")]),a._v(" "),e("p",[a._v("-XX:MetaspaceSize 设置元空间初始大小，默认是21807104个字节，约为21m。")]),a._v(" "),e("p",[a._v("-XX:MaxMetaspaceSize 设置元空间最大值，默认无限制。")]),a._v(" "),e("p",[a._v("-XX:+UseCompressedOops 开启压缩对象指针，默认开启。")]),a._v(" "),e("p",[a._v("-XX:+UseCompressedClassPointers 开启压缩类指针，默认开启。")]),a._v(" "),e("p",[a._v("-XX:CompressedClassSpaceSize 设置Klass Metaspace大小，默认1g。")]),a._v(" "),e("h2",{attrs:{id:"直接内存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#直接内存"}},[a._v("#")]),a._v(" 直接内存")]),a._v(" "),e("p",[a._v("1.-XX:MaxDirectMemorySize 指定直接内存容量，默认值是0。")]),a._v(" "),e("blockquote",[e("p",[a._v("官方文档描述\nSets the maximum total size (in bytes) of the New I/O (the java.nio package) direct-buffer allocations. Append the letter k or K to indicate kilobytes, m or M to indicate megabytes, g or G to indicate gigabytes. By default, the size is set to 0, meaning that the JVM chooses the size for NIO direct-buffer allocations automatically.")])]),a._v(" "),e("h2",{attrs:{id:"oom相关设置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#oom相关设置"}},[a._v("#")]),a._v(" OOM相关设置")]),a._v(" "),e("p",[a._v("-XX:+HeapDumpOnOutOfMemoryError 开启后，在出现OOM时生成dump文件。")]),a._v(" "),e("p",[a._v("-XX:+HeapDumpBeforeFullGC 开启后，在出现FullGC前生成dump文件。")]),a._v(" "),e("p",[a._v("-XX:HeapDumpPath=</path/aa.hprof> 指定dump文件存储路径。")]),a._v(" "),e("p",[a._v("-XX:OnOutOfMemoryError 当发生OOM时，执行指定脚本。eg: -XX:OnOutOfMemoryError=/opt/Server/restart.sh")]),a._v(" "),e("h2",{attrs:{id:"垃圾收集器相关设置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#垃圾收集器相关设置"}},[a._v("#")]),a._v(" 垃圾收集器相关设置")]),a._v(" "),e("h3",{attrs:{id:"serial收集器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#serial收集器"}},[a._v("#")]),a._v(" Serial收集器")]),a._v(" "),e("p",[a._v("-XX:+UseSerialGC 指定年轻代和老年代都是用串行收集器。对应年轻代使用Serial GC，老年代使用Serial Old GC。")]),a._v(" "),e("h3",{attrs:{id:"parnew收集器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#parnew收集器"}},[a._v("#")]),a._v(" ParNew收集器")]),a._v(" "),e("p",[a._v("1.-XX:+UseParNewGC 指定年轻代使用ParNew并行收集器，不影响老年代。")]),a._v(" "),e("p",[a._v("2.-XX:ParallelGCThreads 限制1中并行线程数量，默认开启和CPU数量相同的线程数。")]),a._v(" "),e("h3",{attrs:{id:"parallel收集器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#parallel收集器"}},[a._v("#")]),a._v(" Parallel收集器")]),a._v(" "),e("p",[a._v("-XX:+UseParallelGC 开启年轻代使用Parallel并行收集器执行内存回收任务。")]),a._v(" "),e("p",[a._v("-XX:+UseParallelOldGC 开启老年代使用并行回收器。")]),a._v(" "),e("blockquote",[e("p",[a._v("Parallel在JDK8中默认开启，1和2配套使用，开启其中一个参数，另一个也会被开启。")])]),a._v(" "),e("p",[a._v("-XX:ParallelGCThreads 设置年轻代并行收集器的线程数。一般和CPU数量相等，以避免过多的线程数影响垃圾收集性能。")]),a._v(" "),e("blockquote",[e("p",[a._v("在默认情况下，当CPU数量小于等于8个，ParallelGCThreads的值等于CPU数量。\n当CUP数量大于8个，ParallelGCThreads的值等于 3 + 5 * CPU_COUNT / 8。")])]),a._v(" "),e("p",[a._v("-XX:MaxGCPauseMillis 设置垃圾收集器最大停顿时间（STW），单位是毫秒。")]),a._v(" "),e("p",[a._v("-XX:GCTimeRatio 垃圾收集时间占总时间的比例 1 / (N + 1)，取值范围(0, 100)，默认值99，也就是垃圾回收时间不超过1%。")]),a._v(" "),e("p",[a._v("-XX:+UseAdaptiveSizePolicy 设置PS（Parallel Scavenge）收集器开启自适应调节策略。")]),a._v(" "),e("blockquote",[e("p",[a._v("此种模式下，年轻代的大小、Eden和Survivor的比例，晋升老年代的对象年龄等参数会被自动调整，以达到在堆大小、吞吐量和停顿时间的平衡点。使用此种模式仅需设置虚拟机最大堆，目标的吞吐量（GCTimeRatio）和停顿时间（MaxGCPauseMillis）。")])]),a._v(" "),e("h3",{attrs:{id:"cms收集器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cms收集器"}},[a._v("#")]),a._v(" CMS收集器")]),a._v(" "),e("p",[a._v("-XX:+UseConcMarkSweepGC 开启使用CMS收集器进行垃圾回收。")]),a._v(" "),e("blockquote",[e("p",[a._v("开启该参数会自动将-XX:+UseParNewGC开启，即：年轻代（ParNew）+ 老年代（CMS）+ Serial Old 组合。")])]),a._v(" "),e("p",[a._v("-XX:CMSLnitiatingOccupanyFraction 设置堆内存使用率阀值，到达该阀值便开始回收。")]),a._v(" "),e("p",[a._v("-XX:+UseCMSCompactAtFullCollection 默认开启，在进行Full GC时开启内存碎的合并整理过程，此过程无法并发，会导致停顿时间变长。")]),a._v(" "),e("p",[a._v("-XX:CMSFullGCsBeforeCompaction 此参数的作用是CMS收集器在执行过若干次不整理空间的FullGC之后，下一次进入FullGC前会先进行碎片整理，默认值为0，表示每次进入Full GC时都进行碎片整理。")]),a._v(" "),e("h3",{attrs:{id:"g1收集器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#g1收集器"}},[a._v("#")]),a._v(" G1收集器")]),a._v(" "),e("p",[a._v("官方文档：https://docs.oracle.com/en/java/javase/13/docs/specs/man/java.html")]),a._v(" "),e("p",[a._v("-XX:+UseG1GC 开启G1收集器。")]),a._v(" "),e("p",[a._v("-XX:G1HeapRegionSize 设置每个Region的大小，值是2的N次幂，范围1m ~ 32m，目标是根据最小的Java堆划分出月2048个区域。")]),a._v(" "),e("p",[a._v("-XX:MaxGCPauseMillis 设置期望到达的最大GC停顿时间，默认值是200ms。")]),a._v(" "),e("p",[a._v("-XX:ParallelGCThreads 设置STW时GC线程数，最大值为8。")]),a._v(" "),e("p",[a._v("-XX:ConcGCThreads 设置并发标记的线程数，参考值：ParallelGCThreads 的1/4左右。")]),a._v(" "),e("p",[a._v("-XX:InitiatingHeapOccupancyPercent 设置触发并发GC的堆占用率阀值，默认值为45%。")]),a._v(" "),e("p",[a._v("-XX:G1NewSizePercent -XX:G1MaxNewSizePercent 设置新生代占用整堆内存的最小百分比（默认5%）、最大百分比（默认60%）。")]),a._v(" "),e("p",[a._v("-XX:G1ReservePercent 保留内存区域，防止survivor中的to区溢出，默认值10%。")]),a._v(" "),e("h2",{attrs:{id:"gc日志相关设置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gc日志相关设置"}},[a._v("#")]),a._v(" GC日志相关设置")]),a._v(" "),e("p",[a._v("-verbose:gc 输出简化gc日志信息。")]),a._v(" "),e("p",[a._v("-XX:+PrintGC 等价于 -verbose:gc。")]),a._v(" "),e("p",[a._v("-XX:+PrintGCDetails 在发生垃圾回收是打印内存回收详细的日志，并在进程退出时输出当前内存各区域的使用情况。")]),a._v(" "),e("p",[a._v("-XX:+PrintGCTimeStamps 输出GC发生时的时间戳，要配合 -XX:+PrintGCDetails 一起使用。")]),a._v(" "),e("p",[a._v("-XX:+PrintGCDateStamps 输出GC发生时的时间戳（以日期的形式展示），要配合 -XX:+PrintGCDetails 一起使用。")]),a._v(" "),e("p",[a._v("-XX:+PrintHeapAtGC 每一次GC前、GC后都打印堆信息。")]),a._v(" "),e("p",[a._v("-Xloggc:"),e("file",[a._v(" 把GC日志写到文件中。")])],1),a._v(" "),e("p",[e("strong",[a._v("好了，今天就到这儿吧，我是冰河，我们下期见~~")])]),a._v(" "),e("h2",{attrs:{id:"星球服务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#星球服务"}},[a._v("#")]),a._v(" 星球服务")]),a._v(" "),e("p",[a._v("加入星球，你将获得：")]),a._v(" "),e("p",[a._v("1.项目学习：微服务入门必备的SpringCloud  Alibaba实战项目、手写RPC项目—所有大厂都需要的项目【含上百个经典面试题】、深度解析Spring6核心技术—只要学习Java就必须深度掌握的框架【含数十个经典思考题】、Seckill秒杀系统项目—进大厂必备高并发、高性能和高可用技能。")]),a._v(" "),e("p",[a._v("2.框架源码：手写RPC项目—所有大厂都需要的项目【含上百个经典面试题】、深度解析Spring6核心技术—只要学习Java就必须深度掌握的框架【含数十个经典思考题】。")]),a._v(" "),e("p",[a._v("3.硬核技术：深入理解高并发系列（全册）、深入理解JVM系列（全册）、深入浅出Java设计模式（全册）、MySQL核心知识（全册）。")]),a._v(" "),e("p",[a._v("4.技术小册：深入理解高并发编程（第1版）、深入理解高并发编程（第2版）、从零开始手写RPC框架、SpringCloud  Alibaba实战、冰河的渗透实战笔记、MySQL核心知识手册、Spring IOC核心技术、Nginx核心技术、面经手册等。")]),a._v(" "),e("p",[a._v("5.技术与就业指导：提供相关就业辅导和未来发展指引，冰河从初级程序员不断沉淀，成长，突破，一路成长为互联网资深技术专家，相信我的经历和经验对你有所帮助。")]),a._v(" "),e("p",[a._v("冰河的知识星球是一个简单、干净、纯粹交流技术的星球，不吹水，目前加入享5折优惠，价值远超门票。加入星球的用户，记得添加冰河微信：hacker_binghe，冰河拉你进星球专属VIP交流群。")]),a._v(" "),e("h2",{attrs:{id:"星球重磅福利"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#星球重磅福利"}},[a._v("#")]),a._v(" 星球重磅福利")]),a._v(" "),e("p",[a._v("跟冰河一起从根本上提升自己的技术能力，架构思维和设计思路，以及突破自身职场瓶颈，冰河特推出重大优惠活动，扫码领券进行星球，"),e("strong",[a._v("直接立减149元，相当于5折，")]),a._v(" 这已经是星球最大优惠力度！")]),a._v(" "),e("div",{attrs:{align:"center"}},[e("img",{attrs:{src:"https://binghe.gitcode.host/images/personal/xingqiu_149.png?raw=true",width:"80%"}}),a._v(" "),e("br")]),a._v(" "),e("p",[a._v("领券加入星球，跟冰河一起学习《SpringCloud Alibaba实战》、《手撸RPC专栏》和《Spring6核心技术》，更有已经上新的《大规模分布式Seckill秒杀系统》，从零开始介绍原理、设计架构、手撸代码。后续更有硬核中间件项目和业务项目，而这些都是你升职加薪必备的基础技能。")]),a._v(" "),e("p",[e("strong",[a._v("100多元就能学这么多硬核技术、中间件项目和大厂秒杀系统，如果是我，我会买他个终身会员！")])]),a._v(" "),e("h2",{attrs:{id:"其他方式加入星球"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#其他方式加入星球"}},[a._v("#")]),a._v(" 其他方式加入星球")]),a._v(" "),e("ul",[e("li",[e("strong",[a._v("链接")]),a._v(" ：打开链接 "),e("a",{attrs:{href:"http://m6z.cn/6aeFbs",target:"_blank",rel:"noopener noreferrer"}},[a._v("http://m6z.cn/6aeFbs"),e("OutboundLink")],1),a._v(" 加入星球。")]),a._v(" "),e("li",[e("strong",[a._v("回复")]),a._v(" ：在公众号 "),e("strong",[a._v("冰河技术")]),a._v(" 回复 "),e("strong",[a._v("星球")]),a._v(" 领取优惠券加入星球。")])]),a._v(" "),e("p",[e("strong",[a._v("特别提醒：")]),a._v(" 苹果用户进圈或续费，请加微信 "),e("strong",[a._v("hacker_binghe")]),a._v(" 扫二维码，或者去公众号 "),e("strong",[a._v("冰河技术")]),a._v(" 回复 "),e("strong",[a._v("星球")]),a._v(" 扫二维码加入星球。")]),a._v(" "),e("h2",{attrs:{id:"星球规划"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#星球规划"}},[a._v("#")]),a._v(" 星球规划")]),a._v(" "),e("p",[a._v("后续冰河还会在星球更新大规模中间件项目和深度剖析核心技术的专栏，目前已经规划的专栏如下所示。")]),a._v(" "),e("h3",{attrs:{id:"中间件项目"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#中间件项目"}},[a._v("#")]),a._v(" 中间件项目")]),a._v(" "),e("ul",[e("li",[a._v("《大规模分布式定时调度中间件项目实战（非Demo）》：全程手撸代码。")]),a._v(" "),e("li",[a._v("《大规模分布式IM（即时通讯）项目实战（非Demo）》：全程手撸代码。")]),a._v(" "),e("li",[a._v("《大规模分布式网关项目实战（非Demo）》：全程手撸代码。")]),a._v(" "),e("li",[a._v("《手写Redis》：全程手撸代码。")]),a._v(" "),e("li",[a._v("《手写JVM》全程手撸代码。")])]),a._v(" "),e("h3",{attrs:{id:"超硬核项目"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#超硬核项目"}},[a._v("#")]),a._v(" 超硬核项目")]),a._v(" "),e("ul",[e("li",[a._v("《从零落地秒杀系统项目》：全程手撸代码，在阿里云实现压测（"),e("strong",[a._v("已上新")]),a._v("）。")]),a._v(" "),e("li",[a._v("《大规模电商系统商品详情页项目》：全程手撸代码，在阿里云实现压测。")]),a._v(" "),e("li",[a._v("其他待规划的实战项目，小伙伴们也可以提一些自己想学的，想一起手撸的实战项目。。。")])]),a._v(" "),e("p",[a._v("既然星球规划了这么多内容，那么肯定就会有小伙伴们提出疑问：这么多内容，能更新完吗？我的回答就是：一个个攻破呗，咱这星球干就干真实中间件项目，剖析硬核技术和项目，不做Demo。初衷就是能够让小伙伴们学到真正的核心技术，不再只是简单的做CRUD开发。所以，每个专栏都会是硬核内容，像《SpringCloud Alibaba实战》、《手撸RPC专栏》和《Spring6核心技术》就是很好的示例。后续的专栏只会比这些更加硬核，杜绝Demo开发。")]),a._v(" "),e("p",[a._v("小伙伴们跟着冰河认真学习，多动手，多思考，多分析，多总结，有问题及时在星球提问，相信在技术层面，都会有所提高。将学到的知识和技术及时运用到实际的工作当中，学以致用。星球中不少小伙伴都成为了公司的核心技术骨干，实现了升职加薪的目标。")]),a._v(" "),e("h2",{attrs:{id:"联系冰河"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#联系冰河"}},[a._v("#")]),a._v(" 联系冰河")]),a._v(" "),e("h3",{attrs:{id:"加群交流"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#加群交流"}},[a._v("#")]),a._v(" 加群交流")]),a._v(" "),e("p",[a._v("本群的宗旨是给大家提供一个良好的技术学习交流平台，所以杜绝一切广告！由于微信群人满 100 之后无法加入，请扫描下方二维码先添加作者 “冰河” 微信(hacker_binghe)，备注："),e("code",[a._v("星球编号")]),a._v("。")]),a._v(" "),e("div",{attrs:{align:"center"}},[e("img",{attrs:{src:"https://binghe.gitcode.host/images/personal/hacker_binghe.jpg?raw=true",width:"180px"}}),a._v(" "),e("div",{staticStyle:{"font-size":"18px"}},[a._v("冰河微信")]),a._v(" "),e("br")]),a._v(" "),e("h3",{attrs:{id:"公众号"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#公众号"}},[a._v("#")]),a._v(" 公众号")]),a._v(" "),e("p",[a._v("分享各种编程语言、开发技术、分布式与微服务架构、分布式数据库、分布式事务、云原生、大数据与云计算技术和渗透技术。另外，还会分享各种面试题和面试技巧。内容在 "),e("strong",[a._v("冰河技术")]),a._v(" 微信公众号首发，强烈建议大家关注。")]),a._v(" "),e("div",{attrs:{align:"center"}},[e("img",{attrs:{src:"https://binghe.gitcode.host/images/personal/ice_wechat.jpg?raw=true",width:"180px"}}),a._v(" "),e("div",{staticStyle:{"font-size":"18px"}},[a._v("公众号：冰河技术")]),a._v(" "),e("br")]),a._v(" "),e("h3",{attrs:{id:"视频号"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#视频号"}},[a._v("#")]),a._v(" 视频号")]),a._v(" "),e("p",[a._v("定期分享各种编程语言、开发技术、分布式与微服务架构、分布式数据库、分布式事务、云原生、大数据与云计算技术和渗透技术。另外，还会分享各种面试题和面试技巧。")]),a._v(" "),e("div",{attrs:{align:"center"}},[e("img",{attrs:{src:"https://binghe.gitcode.host/images/personal/ice_video.png?raw=true",width:"180px"}}),a._v(" "),e("div",{staticStyle:{"font-size":"18px"}},[a._v("视频号：冰河技术")]),a._v(" "),e("br")]),a._v(" "),e("h3",{attrs:{id:"星球"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#星球"}},[a._v("#")]),a._v(" 星球")]),a._v(" "),e("p",[a._v("加入星球 "),e("strong",[e("a",{attrs:{href:"http://m6z.cn/6aeFbs",target:"_blank",rel:"noopener noreferrer"}},[a._v("冰河技术"),e("OutboundLink")],1)]),a._v("，可以获得本站点所有学习内容的指导与帮助。如果你遇到不能独立解决的问题，也可以添加冰河的微信："),e("strong",[a._v("hacker_binghe")]),a._v("， 我们一起沟通交流。另外，在星球中不只能学到实用的硬核技术，还能学习"),e("strong",[a._v("实战项目")]),a._v("！")]),a._v(" "),e("p",[a._v("关注 "),e("a",{attrs:{href:"https://img-blog.csdnimg.cn/20210426115714643.jpg?raw=true",target:"_blank",rel:"noopener noreferrer"}},[a._v("冰河技术"),e("OutboundLink")],1),a._v("公众号，回复 "),e("code",[a._v("星球")]),a._v(" 可以获取入场优惠券。")]),a._v(" "),e("div",{attrs:{align:"center"}},[e("img",{attrs:{src:"https://binghe.gitcode.host/images/personal/xingqiu.png?raw=true",width:"180px"}}),a._v(" "),e("div",{staticStyle:{"font-size":"18px"}},[a._v("知识星球：冰河技术")]),a._v(" "),e("br")])])}),[],!1,null,null,null);e.default=v.exports}}]);