(window.webpackJsonp=window.webpackJsonp||[]).push([[852],{1186:function(t,e,r){"use strict";r.r(e);var a=r(15),s=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"《高性能polaris网关》通用处理器-第13节-基于自定义spi扩展实现batchevent模式处理器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#《高性能polaris网关》通用处理器-第13节-基于自定义spi扩展实现batchevent模式处理器"}},[t._v("#")]),t._v(" 《高性能Polaris网关》通用处理器-第13节：基于自定义SPI扩展实现BatchEvent模式处理器")]),t._v(" "),e("p",[t._v("作者：冰河\n"),e("br"),t._v("星球："),e("a",{attrs:{href:"http://m6z.cn/6aeFbs",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://m6z.cn/6aeFbs"),e("OutboundLink")],1),t._v(" "),e("br"),t._v("博客："),e("a",{attrs:{href:"https://binghe.gitcode.host",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://binghe.gitcode.host"),e("OutboundLink")],1),t._v(" "),e("br"),t._v("文章汇总："),e("a",{attrs:{href:"https://binghe.gitcode.host/md/all/all.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://binghe.gitcode.host/md/all/all.html"),e("OutboundLink")],1),t._v(" "),e("br"),t._v("源码获取地址："),e("a",{attrs:{href:"https://t.zsxq.com/0dhvFs5oR",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://t.zsxq.com/0dhvFs5oR"),e("OutboundLink")],1)]),t._v(" "),e("blockquote",[e("p",[t._v("沉淀，成长，突破，帮助他人，成就自我。")])]),t._v(" "),e("ul",[e("li",[t._v("本节难度：★★☆☆☆")]),t._v(" "),e("li",[t._v("本节重点：基于自定义SPI结合BatchEvent模式缓冲队列扩展实现BatchEvent模式处理器。重点掌握整体调用链路的设计思路和设计方法，并能够将其灵活应用到自身实际项目中。")])]),t._v(" "),e("p",[t._v("在网关的整体架构设计中，在设计处理器时，我们设计了BatchEvent模式的缓冲队列和MPMC模式的缓冲队列，为后续设计和实现BatchEvent模式的处理器和MPMC模式的处理器打下了良好的基础。接下来，就在已经实现BatchEvent模式缓冲队列的基础上基于自定义SPI扩展实现BatchEvent模式处理器。")]),t._v(" "),e("h2",{attrs:{id:"一、背景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、背景"}},[t._v("#")]),t._v(" 一、背景")]),t._v(" "),e("p",[t._v("在网关的处理器设计中，我们重点设计和实现了通用处理器接口，基于Netty实现了核心处理器的功能，并且基于BatchEvent和MPMC两种模式实现了缓冲队列。在实现缓冲队列时，重点参考了JDK的队列实现，并且在JDK队列实现的基础上，做了进一步优化。所以，各位小伙伴们在学习自定义缓冲队列时，可以结合JDK的Queue接口及其实现类等深入学习和理解。")]),t._v(" "),e("p",[t._v("既然我们已经设计和实现了基于BatchEvent和MPMC两种模式的缓冲队列，接下来，就要基于这些缓冲队列设计和实现对应的处理器了。首先，基于自定义SPI结合BatchEvent模式缓冲队列扩展实现BatchEvent模式处理器。")]),t._v(" "),e("h2",{attrs:{id:"二、本节重点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、本节重点"}},[t._v("#")]),t._v(" 二、本节重点")]),t._v(" "),e("p",[t._v("基于自定义SPI结合BatchEvent模式缓冲队列扩展实现BatchEvent模式处理器。重点掌握整体调用链路的设计思路和设计方法，并能够将其灵活应用到自身实际项目中。")]),t._v(" "),e("h2",{attrs:{id:"三、核心类设计"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、核心类设计"}},[t._v("#")]),t._v(" 三、核心类设计")]),t._v(" "),e("p",[t._v("基于自定义SPI结合BatchEvent模式缓冲队列扩展实现BatchEvent模式处理器的类图如图13-1所示")]),t._v(" "),e("div",{attrs:{align:"center"}},[e("img",{attrs:{src:"https://binghe.gitcode.host/images/project/gateway/2025-07-07-001.png?raw=true",width:"70%"}}),t._v(" "),e("br")]),t._v(" "),e("p",[t._v("可以看到，BatchEvent模式的处理器主要由BatchEventProcessor类实现，BatchEventProcessor类实现了Processor接口，并实现了Processor接口定义的方法。同时，BatchEventProcessor类又会依赖Processor接口，实际上会依赖NettyCoreProcessor类，实际上BatchEventProcessor类中会对NettyCoreProcessor类的方法进行进一步的封装和处理。")]),t._v(" "),e("p",[e("strong",[t._v("注意：这里重点给大家展示通用核心处理器，其他代码的实现细节，大家可以自行到本节对应的源码分支进行查看，这里不再赘述。")])]),t._v(" "),e("h2",{attrs:{id:"四、编码实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四、编码实现"}},[t._v("#")]),t._v(" 四、编码实现")]),t._v(" "),e("p",[t._v("本节，就对BatchEvent模式的处理器类进行编码实现，其他代码的实现细节，大家可以自行到本节对应的源码分支进行查看，这里不再赘述。")]),t._v(" "),e("p",[t._v("BatchEventProcessor类是BatchEvent模式处理器的核心实现类，主要基于SPI扩展实现并实现了Processor接口。")]),t._v(" "),e("p",[t._v("源码详见：polaris-processor-batchevent工程下的io.binghe.polaris.processor.batchevent.BatchEventProcessor。")]),t._v(" "),e("h2",{attrs:{id:"查看完整文章"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看完整文章"}},[t._v("#")]),t._v(" 查看完整文章")]),t._v(" "),e("p",[t._v("加入"),e("a",{attrs:{href:"https://public.zsxq.com/groups/48848484411888.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("冰河技术"),e("OutboundLink")],1),t._v("知识星球，解锁完整技术文章、小册、视频与完整代码")])])}),[],!1,null,null,null);e.default=s.exports}}]);