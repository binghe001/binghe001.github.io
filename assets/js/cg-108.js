(window.webpackJsonp=window.webpackJsonp||[]).push([[108],{443:function(t,s,a){"use strict";a.r(s);var e=a(15),r=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"《并发设计模式》第40章-线程池模式-实现手写线程池"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#《并发设计模式》第40章-线程池模式-实现手写线程池"}},[t._v("#")]),t._v(" 《并发设计模式》第40章-线程池模式-实现手写线程池")]),t._v(" "),s("p",[t._v("作者：冰河\n"),s("br"),t._v("星球："),s("a",{attrs:{href:"http://m6z.cn/6aeFbs",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://m6z.cn/6aeFbs"),s("OutboundLink")],1),t._v(" "),s("br"),t._v("博客："),s("a",{attrs:{href:"https://binghe.gitcode.host",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://binghe.gitcode.host"),s("OutboundLink")],1),t._v(" "),s("br"),t._v("文章汇总："),s("a",{attrs:{href:"https://binghe.gitcode.host/md/all/all.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://binghe.gitcode.host/md/all/all.html"),s("OutboundLink")],1),t._v(" "),s("br"),t._v("源码获取地址："),s("a",{attrs:{href:"https://t.zsxq.com/0dhvFs5oR",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://t.zsxq.com/0dhvFs5oR"),s("OutboundLink")],1)]),t._v(" "),s("blockquote",[s("p",[t._v("沉淀，成长，突破，帮助他人，成就自我。")])]),t._v(" "),s("ul",[s("li",[t._v("本章难度：★★☆☆☆")]),t._v(" "),s("li",[t._v("本章重点：了解线程池的应用场景，重点理解线程池的核心原理和应用，能够融会贯通，并能够结合自身项目实际场景思考如何将线程池模式灵活应用到自身实际项目中。")])]),t._v(" "),s("p",[s("strong",[t._v("大家好，我是冰河~~")])]),t._v(" "),s("p",[t._v("线程池的使用场景、注意事项、核心参数和源码执行流程都搞清楚，搞透彻了，那我们能不能自己仿照线程池的执行流程来手写一个线程池呢？以此来检验一下我们对线程池的学习成果。")]),t._v(" "),s("h2",{attrs:{id:"一、故事背景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、故事背景"}},[t._v("#")]),t._v(" 一、故事背景")]),t._v(" "),s("p",[t._v("上回说到：小菜在搞清楚线程池的核心参数后，又将目光瞄到了线程池执行任务的核心流程，这次他不只要将线程池执行任务的核心原理搞清楚，更要从源码级别彻底吃透线程池执行任务的源码流程。在小菜的不懈努力下，终于将线程池的源码吃透了。要不说小菜对于技术的渴望和探索远比公司其他同事强呢！在吃透线程池的源码后，小菜心想既然JDK中的线程池已经吃透了，那能不能根据线程池的实现思路自己手写一个简易版的线程池呢？")]),t._v(" "),s("p",[t._v("理论上是可行的，说干就干，于是，小菜又开始折腾了。。。")]),t._v(" "),s("h2",{attrs:{id:"二、手写线程池"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、手写线程池"}},[t._v("#")]),t._v(" 二、手写线程池")]),t._v(" "),s("p",[t._v("我们自己手动实现的线程池要比Java自身的线程池简单的多，我们去掉了各种复杂的处理方式，只保留了最核心的原理：线程池的使用者向任务队列中添加任务，而线程池本身从任务队列中消费任务并执行任务。")]),t._v(" "),s("div",{attrs:{align:"center"}},[s("img",{attrs:{src:"https://binghe.gitcode.host/assets/images/core/concurrent/2023-10-27-001.png?raw=true",width:"80%"}}),t._v(" "),s("br")]),t._v(" "),s("p",[t._v("只要理解了这个核心原理，接下来的代码就简单多了。在实现这个简单的线程池时，我们可以将整个实现过程进行拆解。拆解后的实现流程为：定义核心字段、创建内部类WorkThread、创建ThreadPool类的构造方法和创建执行任务的方法。")]),t._v(" "),s("div",{attrs:{align:"center"}},[s("img",{attrs:{src:"https://binghe.gitcode.host/assets/images/core/concurrent/2023-10-27-002.png?raw=true",width:"80%"}}),t._v(" "),s("br")]),t._v(" "),s("h3",{attrs:{id:"_2-1-定义核心字段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-定义核心字段"}},[t._v("#")]),t._v(" 2.1 定义核心字段")]),t._v(" "),s("p",[t._v("首先，我们创建一个名称为ThreadPool的Java类，并在这个类中定义如下核心字段。")]),t._v(" "),s("ul",[s("li",[t._v("DEFAULT_WORKQUEUE_SIZE：静态常量，表示默认的阻塞队列大小。")]),t._v(" "),s("li",[t._v("workQueue：模拟实际的线程池使用阻塞队列来实现生产者-消费者模式。")]),t._v(" "),s("li",[t._v("workThreads：模拟实际的线程池使用List集合保存线程池内部的工作线程。")])]),t._v(" "),s("p",[t._v("核心代码如下所示。")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//默认阻塞队列大小")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DEFAULT_WORKQUEUE_SIZE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//模拟实际的线程池使用阻塞队列来实现生产者-消费者模式")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BlockingQueue")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" workQueue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//模拟实际的线程池使用List集合保存线程池内部的工作线程")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WorkThread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" workThreads "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WorkThread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("h3",{attrs:{id:"_2-2-创建内部类wordthread"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-创建内部类wordthread"}},[t._v("#")]),t._v(" 2.2 创建内部类WordThread")]),t._v(" "),s("p",[t._v("在ThreadPool类中创建一个内部类WorkThread，模拟线程池中的工作线程。主要的作用就是消费workQueue中的任务，并执行任务。由于工作线程需要不断从workQueue中获取任务，所以，这里使用了while(true)循环不断尝试消费队列中的任务。")]),t._v(" "),s("h2",{attrs:{id:"查看全文"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查看全文"}},[t._v("#")]),t._v(" 查看全文")]),t._v(" "),s("p",[t._v("加入"),s("a",{attrs:{href:"http://m6z.cn/6aeFbs",target:"_blank",rel:"noopener noreferrer"}},[t._v("冰河技术"),s("OutboundLink")],1),t._v("知识星球，解锁完整技术文章与完整代码")])])}),[],!1,null,null,null);s.default=r.exports}}]);