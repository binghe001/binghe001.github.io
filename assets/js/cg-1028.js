(window.webpackJsonp=window.webpackJsonp||[]).push([[1028],{1362:function(t,e,r){"use strict";r.r(e);var _=r(15),a=Object(_.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"《seckill秒杀系统》第57章-异步化扣减商品库存流程设计"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#《seckill秒杀系统》第57章-异步化扣减商品库存流程设计"}},[t._v("#")]),t._v(" 《Seckill秒杀系统》第57章：异步化扣减商品库存流程设计")]),t._v(" "),e("p",[t._v("作者：冰河\n"),e("br"),t._v("星球："),e("a",{attrs:{href:"http://m6z.cn/6aeFbs",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://m6z.cn/6aeFbs"),e("OutboundLink")],1),t._v(" "),e("br"),t._v("博客："),e("a",{attrs:{href:"https://binghe.gitcode.host",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://binghe.gitcode.host"),e("OutboundLink")],1),t._v(" "),e("br"),t._v("文章汇总："),e("a",{attrs:{href:"https://binghe.gitcode.host/md/all/all.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://binghe.gitcode.host/md/all/all.html"),e("OutboundLink")],1),t._v(" "),e("br"),t._v("源码获取地址："),e("a",{attrs:{href:"https://t.zsxq.com/0dhvFs5oR",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://t.zsxq.com/0dhvFs5oR"),e("OutboundLink")],1)]),t._v(" "),e("blockquote",[e("p",[t._v("沉淀，成长，突破，帮助他人，成就自我。")])]),t._v(" "),e("ul",[e("li",[t._v("本章难度：★★★☆☆")]),t._v(" "),e("li",[t._v("本章重点：重点理解并掌握异步化扣减商品库存的流程设计，掌握订单微服务和商品微服务之间数据的交互设计，并能够灵活运用到自身实际项目中。")])]),t._v(" "),e("p",[e("strong",[t._v("大家好，我是冰河~~")])]),t._v(" "),e("p",[t._v("下单减库存看似非常简单的业务，但是在秒杀这种瞬时高并发流量场景下，如果设计不当，就可能会出现库存超卖或者少卖的情况。为了进一步提升秒杀系统的性能，扣减商品库存时，可以采用异步化设计。当用户提交订单后，可以向消息队列发送一条扣减商品库存的消息，由商品微服务监听扣减商品库存的消息，并异步扣减商品库存数量。")]),t._v(" "),e("h2",{attrs:{id:"一、前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、前言"}},[t._v("#")]),t._v(" 一、前言")]),t._v(" "),e("p",[t._v("对于秒杀系统来说，除了要保证数据的一致性以外，对于交易链路上的各个环节都要考虑到性能问题。尽量提升秒杀系统整体链路的性能，当用户下单时，扣减商品库存时，可以采用异步化设计，这样就能够提升用户下单核心链路的吞吐量和性能。")]),t._v(" "),e("h2",{attrs:{id:"二、本章诉求"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、本章诉求"}},[t._v("#")]),t._v(" 二、本章诉求")]),t._v(" "),e("p",[t._v("对秒杀系统的下单核心交易链路进行优化，在前面的文章中，我们对下单流程进行了异步化设计和编码实现，提高了下单流程的性能。对于下单减库存的业务来说，提交订单后，扣减商品库存的流程可以采用异步化设计，进一步提升核心交易链路的整体吞吐量和性能。")]),t._v(" "),e("p",[t._v("在基于可靠消息最终一致性分布式事务解决方案解决分布式事务问题时，本质上已经对下单扣减商品库存的逻辑进行了异步化设计。本章，就再次梳理下对下单扣减商品库存的异步化设计。")]),t._v(" "),e("h2",{attrs:{id:"三、异步扣减商品库存设计"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、异步扣减商品库存设计"}},[t._v("#")]),t._v(" 三、异步扣减商品库存设计")]),t._v(" "),e("p",[t._v("本节，我们就从正向事务流程消息和逆向事务流程消息两个方面对异步扣减商品库存的设计进行简单的说明。")]),t._v(" "),e("h3",{attrs:{id:"_3-1-正向事务消息流程设计"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-正向事务消息流程设计"}},[t._v("#")]),t._v(" 3.1 正向事务消息流程设计")]),t._v(" "),e("p",[t._v("在前面的文章中，我们也已经介绍过，RocketMQ 4.3版本之后引入并实现了完整的事务消息机制，其内部实现了完整的本地消息表逻辑，使用RocketMQ实现可靠消息分布式事务就不用自己再实现本地消息表的逻辑了，极大地减轻了开发工作量。RocketMQ实现的事务消息我们在秒杀系统中，可以看成是正向的事务消息流程。")]),t._v(" "),e("p",[t._v("使用RocketMQ实现可靠消息分布式事务解决方案的原理和流程如图57-1所示。")]),t._v(" "),e("div",{attrs:{align:"center"}},[e("img",{attrs:{src:"https://binghe.gitcode.host/images/project/seckill/scekill-2023-07-14-001.png?raw=true",width:"80%"}}),t._v(" "),e("br")]),t._v(" "),e("p",[t._v("整体流程如下所示。")]),t._v(" "),e("p",[t._v("1）事务发起方向RocketMQ发送Half消息。")]),t._v(" "),e("p",[t._v("2）RocketMQ向事务发起方响应Half消息发送成功。")]),t._v(" "),e("p",[t._v("3）事务发起方执行本地事务，向本地数据库中插入/更新/删除数据。")]),t._v(" "),e("p",[t._v("4）事务发起方向RocketMQ发送提交事务或者回滚事务的消息。")]),t._v(" "),e("p",[t._v("5）如果事务参与方未收到消息，或者执行事务失败，RocketMQ未删除保存的消息数据时，RocketMQ会回查事务发起方的接口，查询事务状态，以此确认是再次提交事务还是回滚事务。")]),t._v(" "),e("p",[t._v("6）事务发起方查询本地数据库，确认事务是否是执行成功的状态。")]),t._v(" "),e("p",[t._v("7）事务发起方根据查询出的事务状态，向RocketMQ发送提交事务或者回滚事务的消息。")]),t._v(" "),e("p",[t._v("8）如果第7步中事务发起方向RocketMQ发送的是提交事务的消息，则RocketMQ会向事务参与方投递消息。")]),t._v(" "),e("h2",{attrs:{id:"查看完整文章"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看完整文章"}},[t._v("#")]),t._v(" 查看完整文章")]),t._v(" "),e("p",[t._v("加入"),e("a",{attrs:{href:"http://m6z.cn/6aeFbs",target:"_blank",rel:"noopener noreferrer"}},[t._v("冰河技术"),e("OutboundLink")],1),t._v("知识星球，解锁完整技术文章与完整代码")])])}),[],!1,null,null,null);e.default=a.exports}}]);