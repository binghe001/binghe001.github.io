(window.webpackJsonp=window.webpackJsonp||[]).push([[815],{1114:function(t,r,e){"use strict";e.r(r);var a=e(7),s=Object(a.a)({},(function(){var t=this,r=t._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"《seckill秒杀系统》第54章-零侵入重构秒杀订单异步事件后置处理器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#《seckill秒杀系统》第54章-零侵入重构秒杀订单异步事件后置处理器"}},[t._v("#")]),t._v(" 《Seckill秒杀系统》第54章：零侵入重构秒杀订单异步事件后置处理器")]),t._v(" "),r("p",[t._v("作者：冰河\n"),r("br"),t._v("星球："),r("a",{attrs:{href:"http://m6z.cn/6aeFbs",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://m6z.cn/6aeFbs"),r("OutboundLink")],1),t._v(" "),r("br"),t._v("博客："),r("a",{attrs:{href:"https://binghe.gitcode.host",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://binghe.gitcode.host"),r("OutboundLink")],1),t._v(" "),r("br"),t._v("文章汇总："),r("a",{attrs:{href:"https://binghe.gitcode.host/md/all/all.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://binghe.gitcode.host/md/all/all.html"),r("OutboundLink")],1),t._v(" "),r("br"),t._v("源码获取地址："),r("a",{attrs:{href:"https://t.zsxq.com/0dhvFs5oR",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://t.zsxq.com/0dhvFs5oR"),r("OutboundLink")],1)]),t._v(" "),r("blockquote",[r("p",[t._v("沉淀，成长，突破，帮助他人，成就自我。")])]),t._v(" "),r("ul",[r("li",[t._v("本章难度：★★★☆☆")]),t._v(" "),r("li",[t._v("本章重点：重点理解并掌握提交秒杀订单后，异步事件后置处理器接收订单数据的设计与实现，并掌握在原有设计上零侵入升级并扩展秒杀订单异步事件处理器的思想与实现，并能够灵活运用到自身实际项目中。")])]),t._v(" "),r("p",[r("strong",[t._v("大家好，我是冰河~~")])]),t._v(" "),r("p",[t._v("秒杀系统由单体项目拆分为微服务之后，对于秒杀订单异步事件后置处理器的实现同样不能仅仅局限于JVM进程内，也需要对这部分的实现升级为分布式架构，并且同样需要对原有的设计与实现做到零侵入，兼容原有的设计与实现，充分体现出秒杀系统在设计上的高度可扩展性。")]),t._v(" "),r("h2",{attrs:{id:"一、前言"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#一、前言"}},[t._v("#")]),t._v(" 一、前言")]),t._v(" "),r("p",[t._v("目前，在秒杀系统的实现中，当提交秒杀订单时，基于Cola实现了JVM进程内的事件发布与接收，领域层会将事件发到Cola，而应用层则监听并接收Cola中的事件，并处理提交秒杀订单后的业务逻辑。当秒杀系统由单体应用升级为微服务架构后，这种JVM进程内的事件发布与接收同样不能满足当前提交秒杀订单后的异步处理逻辑。")]),t._v(" "),r("h2",{attrs:{id:"二、本章诉求"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#二、本章诉求"}},[t._v("#")]),t._v(" 二、本章诉求")]),t._v(" "),r("p",[t._v("重构秒杀订单异步事件后置处理器，将JVM进程内的事件发布与接收方式，升级为支持分布式的事件发布与接收方式，并且要对原有的设计与实现做到零侵入，兼容原有的设计与实现，充分体现出秒杀系统在设计上的高度可扩展性。")]),t._v(" "),r("h2",{attrs:{id:"三、业务设计"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#三、业务设计"}},[t._v("#")]),t._v(" 三、业务设计")]),t._v(" "),r("p",[t._v("本节，从流程设计和类结构两个方面来对零侵入重构秒杀订单异步事件后置处理器的设计进行简单的介绍。")]),t._v(" "),r("h3",{attrs:{id:"_3-1-流程设计"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-流程设计"}},[t._v("#")]),t._v(" 3.1 流程设计")]),t._v(" "),r("p",[t._v("在秒杀系统中，零侵入重构秒杀订单异步事件后置处理器，并兼容原有设计与实现的流程如图54-1所示。")]),t._v(" "),r("div",{attrs:{align:"center"}},[r("img",{attrs:{src:"https://binghe.gitcode.host/images/project/seckill/scekill-2023-07-19-001.png?raw=true",width:"80%"}}),t._v(" "),r("br")]),t._v(" "),r("p",[t._v("可以看到，用户成功抢购商品并提交订单后，领域层会将事件封装成对应的事件模型发布出去，至于是发布到Cola，还是发布到RocketMQ，完全由配置决定，后续不需要修改代码即可实现。而应用层会监听并接收Cola或者RocketMQ中的事件，异步执行提交订单后的其他业务逻辑。")]),t._v(" "),r("p",[t._v("同时，不管是将事件发布到Cola还是发布到RocketMQ，统一实现了对应的事件模型，而不必单独为每种事件的发布方式单独设计事件模型，体现了事件模型在设计上的通用型和高度可扩展性。")]),t._v(" "),r("h2",{attrs:{id:"查看完整文章"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#查看完整文章"}},[t._v("#")]),t._v(" 查看完整文章")]),t._v(" "),r("p",[t._v("加入"),r("a",{attrs:{href:"http://m6z.cn/6aeFbs",target:"_blank",rel:"noopener noreferrer"}},[t._v("冰河技术"),r("OutboundLink")],1),t._v("知识星球，解锁完整技术文章与完整代码")])])}),[],!1,null,null,null);r.default=s.exports}}]);