(window.webpackJsonp=window.webpackJsonp||[]).push([[782],{1113:function(t,r,e){"use strict";e.r(r);var a=e(14),s=Object(a.a)({},(function(){var t=this,r=t._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"《高性能polaris网关》通用模型-第02节-请求模型的顶层接口实现类设计"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#《高性能polaris网关》通用模型-第02节-请求模型的顶层接口实现类设计"}},[t._v("#")]),t._v(" 《高性能Polaris网关》通用模型-第02节：请求模型的顶层接口实现类设计")]),t._v(" "),r("p",[t._v("作者：冰河\n"),r("br"),t._v("星球："),r("a",{attrs:{href:"http://m6z.cn/6aeFbs",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://m6z.cn/6aeFbs"),r("OutboundLink")],1),t._v(" "),r("br"),t._v("博客："),r("a",{attrs:{href:"https://binghe.gitcode.host",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://binghe.gitcode.host"),r("OutboundLink")],1),t._v(" "),r("br"),t._v("文章汇总："),r("a",{attrs:{href:"https://binghe.gitcode.host/md/all/all.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://binghe.gitcode.host/md/all/all.html"),r("OutboundLink")],1),t._v(" "),r("br"),t._v("源码获取地址："),r("a",{attrs:{href:"https://t.zsxq.com/0dhvFs5oR",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://t.zsxq.com/0dhvFs5oR"),r("OutboundLink")],1)]),t._v(" "),r("blockquote",[r("p",[t._v("沉淀，成长，突破，帮助他人，成就自我。")])]),t._v(" "),r("ul",[r("li",[t._v("本章难度：★★☆☆☆")]),t._v(" "),r("li",[t._v("本节重点：对高性能Polaris网关的顶层数据模型的请求模型接口实现类进行设计，从全局角度掌握高性能Polaris网关接收请求与转发请求的核心数据模型。重点掌握通用交互模型的设计思路和设计方法，并能够将其灵活应用到自身实际项目中。")])]),t._v(" "),r("p",[r("strong",[t._v("大家好，我是冰河~~")])]),t._v(" "),r("p",[t._v("对于网关来说，一个最基础、最核心的功能就是接收请求和转发请求，也就是说，网关会接收客户端请求，经过一定的处理后，将请求按照一定的规则转发到后端某个具体的服务。期间，由于接收请求和转发请求本身就是网络传输操作。相信有一定编程基础的小伙伴都知道，数据模型的设计好坏，对于网络传输性能来说，影响也是非常大的。")]),t._v(" "),r("h2",{attrs:{id:"一、前言"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#一、前言"}},[t._v("#")]),t._v(" 一、前言")]),t._v(" "),r("p",[t._v("在前面的章节中，已经对高性能Polaris网关的请求与响应模型的顶层接口进行了设计，我们已经从整体上了解了高性能Poalris网关的请求与响应数据模型。并且在不影响网关性能的前提下，尽最大程度满足扩展性和灵活性，在数据模型设计上，采用了面向接口编程。接下来，就是对请求模型的顶层接口进行实现。")]),t._v(" "),r("h2",{attrs:{id:"二、本节诉求"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#二、本节诉求"}},[t._v("#")]),t._v(" 二、本节诉求")]),t._v(" "),r("p",[t._v("对高性能Polaris网关的顶层数据模型的请求模型接口实现类进行设计，从全局角度掌握高性能Polaris网关接收请求与转发请求的核心数据模型。重点掌握通用交互模型的设计思路和设计方法，并能够将其灵活应用到自身实际项目中。")]),t._v(" "),r("h2",{attrs:{id:"三、实现类整体设计"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#三、实现类整体设计"}},[t._v("#")]),t._v(" 三、实现类整体设计")]),t._v(" "),r("p",[t._v("请求模型的顶层接口实现类的类图如图2-1所示。")]),t._v(" "),r("div",{attrs:{align:"center"}},[r("img",{attrs:{src:"https://binghe.gitcode.host/images/project/gateway/2024-09-17-001.png?raw=true",width:"70%"}}),t._v(" "),r("br")]),t._v(" "),r("p",[t._v("可以看到，在请求模型中，会分别对HttpPolarisRequest、RpcPolarisRequest和WebSocketPolarisRequest三个接口分别进行实现。并且在HttpPolarisRequest接口的实现类DefaultHttpPolarisRequest中，会根据实际需要定义比较多的字段来满足请求的需要。")]),t._v(" "),r("h2",{attrs:{id:"四、编码实现"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#四、编码实现"}},[t._v("#")]),t._v(" 四、编码实现")]),t._v(" "),r("p",[t._v("接下来，就对请求模型顶层接口实现类的设计进行编码实现。")]),t._v(" "),r("p",[r("strong",[t._v("（1）实现DefaultHttpPolarisRequest类")])]),t._v(" "),r("p",[t._v("DefaultHttpPolarisRequest类是网关HTTP请求模型的默认实现类。")]),t._v(" "),r("p",[t._v("源码详见：polaris-context工程下的io.binghe.polaris.context.request.DefaultHttpPolarisRequest。")]),t._v(" "),r("h2",{attrs:{id:"查看完整文章"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#查看完整文章"}},[t._v("#")]),t._v(" 查看完整文章")]),t._v(" "),r("p",[t._v("加入"),r("a",{attrs:{href:"https://public.zsxq.com/groups/48848484411888.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("冰河技术"),r("OutboundLink")],1),t._v("知识星球，解锁完整技术文章、小册、视频与完整代码")])])}),[],!1,null,null,null);r.default=s.exports}}]);