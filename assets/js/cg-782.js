(window.webpackJsonp=window.webpackJsonp||[]).push([[782],{1115:function(t,r,a){"use strict";a.r(r);var e=a(15),s=Object(e.a)({},(function(){var t=this,r=t._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"《高性能polaris网关》通用过滤器-第05节-网关过滤器通用工厂类的设计与实现"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#《高性能polaris网关》通用过滤器-第05节-网关过滤器通用工厂类的设计与实现"}},[t._v("#")]),t._v(" 《高性能Polaris网关》通用过滤器-第05节：网关过滤器通用工厂类的设计与实现")]),t._v(" "),r("p",[t._v("作者：冰河\n"),r("br"),t._v("星球："),r("a",{attrs:{href:"http://m6z.cn/6aeFbs",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://m6z.cn/6aeFbs"),r("OutboundLink")],1),t._v(" "),r("br"),t._v("博客："),r("a",{attrs:{href:"https://binghe.gitcode.host",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://binghe.gitcode.host"),r("OutboundLink")],1),t._v(" "),r("br"),t._v("文章汇总："),r("a",{attrs:{href:"https://binghe.gitcode.host/md/all/all.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://binghe.gitcode.host/md/all/all.html"),r("OutboundLink")],1),t._v(" "),r("br"),t._v("源码获取地址："),r("a",{attrs:{href:"https://t.zsxq.com/0dhvFs5oR",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://t.zsxq.com/0dhvFs5oR"),r("OutboundLink")],1)]),t._v(" "),r("blockquote",[r("p",[t._v("沉淀，成长，突破，帮助他人，成就自我。")])]),t._v(" "),r("ul",[r("li",[t._v("本章难度：★★☆☆☆")]),t._v(" "),r("li",[t._v("本节重点：对高性能Polaris网关的过滤器通用工厂类进行设计和实现，从全局角度掌握高性能Polaris构建请求与响应信息的核心流程和代码设计。重点掌握整体调用链路的设计思路和设计方法，并能够将其灵活应用到自身实际项目中。")])]),t._v(" "),r("p",[t._v("在高性能网关中，会采用责任链模式将一个个的过滤器连接成一条过滤器链，网关接收到请求时，会按照一定的规则，依次执行过滤器链中的每个过滤器，最终将请求转发到后端服务。在整体设计上，过滤器会分为：正常过滤器、异常和错误过滤器、Mock过滤器和灰度过滤器。那如何组织和编排这些过滤器的执行顺序呢？可以统一设计和实现过滤器的通用工厂类来实现这一功能。")]),t._v(" "),r("h2",{attrs:{id:"一、前言"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#一、前言"}},[t._v("#")]),t._v(" 一、前言")]),t._v(" "),r("p",[t._v("在之前的文章中，我们已经对网关的顶级核心过滤器接口进行了设计和实现，也进一步封装了请求和响应的模型，基本上完成了过滤器的整体代码框架，并对网关过滤器的两大顶级抽象类进行了设计和实现。同时，也对网关通用过滤器链进行了设计和实现。接下来，就是如何组织和编排过滤器链中的过滤器，使这些过滤器按照一定的规则和顺序执行。")]),t._v(" "),r("h2",{attrs:{id:"二、本节诉求"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#二、本节诉求"}},[t._v("#")]),t._v(" 二、本节诉求")]),t._v(" "),r("p",[t._v("对高性能Polaris网关的过滤器通用工厂类进行设计和实现，从全局角度掌握高性能Polaris构建请求与响应信息的核心流程和代码设计。重点掌握整体调用链路的设计思路和设计方法，并能够将其灵活应用到自身实际项目中。")]),t._v(" "),r("h2",{attrs:{id:"三、核心类设计"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#三、核心类设计"}},[t._v("#")]),t._v(" 三、核心类设计")]),t._v(" "),r("p",[t._v("本节，对网关的过滤器通用工厂类进行设计和封装实现，整体类图如图5-1所示。")]),t._v(" "),r("div",{attrs:{align:"center"}},[r("img",{attrs:{src:"https://binghe.gitcode.host/images/project/gateway/2025-03-20-001.png?raw=true",width:"70%"}}),t._v(" "),r("br")]),t._v(" "),r("p",[t._v("可以看到，整体实现的类结构图还是比较简单的，本节，在上一节的基础上新增了PolarisFilterFactory接口、AbstractFilterFactory抽象类和SingleFilterFactory类。PolarisFilterFactory接口就是网关过滤器工厂的顶级接口，AbstractFilterFactory抽象类就是网关过滤器工厂的顶级抽象类，会实现PolarisFilterFactory接口。SingleFilterFactory类是一个单例类，后续组织和编排过滤器时主要使用的是SingleFilterFactory类实现对应的功能，同时，SingleFilterFactory类会继承AbstractFilterFactory抽象类。")]),t._v(" "),r("h2",{attrs:{id:"四、编码实现"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#四、编码实现"}},[t._v("#")]),t._v(" 四、编码实现")]),t._v(" "),r("p",[t._v("本节，重点给大家展示过滤器通用工厂类的设计和编码实现，其他代码的实现细节，大家可以自行到本节对应的源码分支进行查看，这里不再赘述。")]),t._v(" "),r("p",[r("strong",[t._v("（1）实现PolarisFilterFactory接口")])]),t._v(" "),r("p",[t._v("PolarisFilterFactory接口是网关过滤器工厂的顶级接口，主要定义了构建过滤器链、获取过滤器和执行过滤器的方法。同时，执行过滤器的方法又分为执行正常过滤器、执行异常过滤器、执行Mock过滤器和执行灰度过滤器等方法。")]),t._v(" "),r("p",[t._v("源码详见：polaris-filter工程下的io.binghe.polaris.filter.factory.PolarisFilterFactory。")]),t._v(" "),r("h2",{attrs:{id:"查看完整文章"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#查看完整文章"}},[t._v("#")]),t._v(" 查看完整文章")]),t._v(" "),r("p",[t._v("加入"),r("a",{attrs:{href:"https://public.zsxq.com/groups/48848484411888.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("冰河技术"),r("OutboundLink")],1),t._v("知识星球，解锁完整技术文章、小册、视频与完整代码")])])}),[],!1,null,null,null);r.default=s.exports}}]);