(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{364:function(t,a,r){"use strict";r.r(a);var s=r(7),v=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"jvm堆内存分配机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jvm堆内存分配机制"}},[t._v("#")]),t._v(" JVM堆内存分配机制")]),t._v(" "),a("p",[a("strong",[t._v("大家好，我是冰河~~")])]),t._v(" "),a("p",[t._v("《"),a("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=Mzg4MjU0OTM1OA==&mid=2247499304&idx=1&sn=13e15f0a0e8999ac28e83f0e90e7e938&chksm=cf564929f821c03f3f81b53a7c11499865c9be39bd1ebd835061c4e7a1744ef89bbefbb48fee&token=991167051&lang=zh_CN#rd",target:"_blank",rel:"noopener noreferrer"}},[t._v("JVM内存空间"),a("OutboundLink")],1),t._v("》一文提到了，创建对象的时候，对象是在堆内存中创建的。但堆内存又分为新生代和老年代，新生代又细分Eden空间、From Survivor空间、To Survivor空间。我们创建的类到底在哪里？")]),t._v(" "),a("h2",{attrs:{id:"对象优先在eden分配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象优先在eden分配"}},[t._v("#")]),t._v(" 对象优先在Eden分配")]),t._v(" "),a("p",[t._v("堆内存分为新生代和老年代，新生代是用于存放使用后准备被回收的对象，老年代是用于存放生命周期比较长的对象。大部分我们创建的对象，都属于生命周期比较短的，所以会存放在新生代。新生代又细分Eden空间、From Survivor空间、To Survivor空间，我们创建的对象，对象优先在Eden分配。")]),t._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://segmentfault.com/img/bVcKW8c",loading:"lazy"}})]),t._v(" "),a("p",[t._v("随着对象的创建，Eden剩余内存空间越来越少，就会触发"),a("code",[t._v("Minor GC")]),t._v("，于是Eden的存活对象会放入From Survivor空间。")]),t._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://segmentfault.com/img/bVcKXfg",loading:"lazy"}})]),t._v(" "),a("p",[a("code",[t._v("Minor GC")]),t._v("后，新对象依然会往Eden分配。")]),t._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://segmentfault.com/img/bVcKXfl",loading:"lazy"}})]),t._v(" "),a("p",[t._v("Eden剩余内存空间越来越少，又会触发"),a("code",[t._v("Minor GC")]),t._v("，于是Eden和From Survivor的存活对象会放入To Survivor空间。")]),t._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://segmentfault.com/img/bVcKXfu",loading:"lazy"}})]),t._v(" "),a("h2",{attrs:{id:"大对象直接进入老年代"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#大对象直接进入老年代"}},[t._v("#")]),t._v(" 大对象直接进入老年代")]),t._v(" "),a("p",[t._v("在上面的流程中，如果一个对象很大，一直在Survivor空间复制来复制去，那很费性能，所以这些大对象直接进入老年代。可以用XX:PretenureSizeThreshold来设置这些大对象的阈值。")]),t._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://segmentfault.com/img/bVcKXme",loading:"lazy"}})]),t._v(" "),a("h2",{attrs:{id:"长期存活的对象将进入老年代"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#长期存活的对象将进入老年代"}},[t._v("#")]),t._v(" 长期存活的对象将进入老年代")]),t._v(" "),a("p",[t._v("在上面的流程中，如果一个对象Hello_A，已经经历了15次"),a("code",[t._v("Minor GC")]),t._v("还存活在Survivor空间中，那他即将转移到老年代。这个15可以通过-XX:MaxTenuringThreshold来设置的，默认是15。虚拟机为了给对象计算他到底经历了几次"),a("code",[t._v("Minor GC")]),t._v("，会给每个对象定义了一个对象年龄计数器。如果对象在Eden中经过第一次Minor GC后仍然存活，移动到Survivor空间年龄加1，在Survivor区中每经历过Minor GC后仍然存活年龄再加1。年龄到了15，就到了老年代。")]),t._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://segmentfault.com/img/bVcKXlF",loading:"lazy"}})]),t._v(" "),a("h2",{attrs:{id:"动态年龄判断"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动态年龄判断"}},[t._v("#")]),t._v(" 动态年龄判断")]),t._v(" "),a("p",[t._v("除了年龄达到MaxTenuringThreshold的值，还有另外一个方式进入老年代，那就是动态年龄判断：在Survivor空间中相同年龄所有对象大小的总和大于Survivor空间的一半，年龄大于或等于该年龄的对象就可以直接进入老年代。")]),t._v(" "),a("p",[t._v("比如Survivor是100M，Hello1和Hello2都是3岁，且总和超过了50M，Hello3是4岁，这个时候，这三个对象都将到老年代。")]),t._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://segmentfault.com/img/bVcKXmN",loading:"lazy"}})]),t._v(" "),a("h2",{attrs:{id:"空间分配担保"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#空间分配担保"}},[t._v("#")]),t._v(" 空间分配担保")]),t._v(" "),a("p",[t._v("上面的流程提过，存活的对象都会放入另外一个Survivor空间，如果这些存活的对象比Survivor空间还大呢？整个流程如下：")]),t._v(" "),a("ol",[a("li",[t._v("Minor GC之前，虚拟机会先检查老年代最大可用的连续空间是否大于新生代所有对象总空间，如果大于，则发起Minor GC。")]),t._v(" "),a("li",[t._v("如果小于，则看HandlePromotionFailure有没有设置，如果没有设置，就发起full gc。")]),t._v(" "),a("li",[t._v("如果设置了HandlePromotionFailure，则看老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果小于，就发起full gc。")]),t._v(" "),a("li",[t._v("如果大于，发起Minor GC。Minor GC后，看Survivor空间是否足够存放存活对象，如果不够，就放入老年代，如果够放，就直接存放Survivor空间。如果老年代都不够放存活对象，担保失败（Handle Promotion Failure），发起full gc。")])]),t._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://segmentfault.com/img/bVcKXqa",loading:"lazy"}})]),t._v(" "),a("p",[a("strong",[t._v("好了，今天就到这儿吧，我是冰河，我们下期见~~")])]),t._v(" "),a("h2",{attrs:{id:"写在最后"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#写在最后"}},[t._v("#")]),t._v(" 写在最后")]),t._v(" "),a("blockquote",[a("p",[t._v("如果你觉得冰河写的还不错，请微信搜索并关注「 "),a("strong",[t._v("冰河技术")]),t._v(" 」微信公众号，跟冰河学习高并发、分布式、微服务、大数据、互联网和云原生技术，「 "),a("strong",[t._v("冰河技术")]),t._v(" 」微信公众号更新了大量技术专题，每一篇技术文章干货满满！不少读者已经通过阅读「 "),a("strong",[t._v("冰河技术")]),t._v(" 」微信公众号文章，吊打面试官，成功跳槽到大厂；也有不少读者实现了技术上的飞跃，成为公司的技术骨干！如果你也想像他们一样提升自己的能力，实现技术能力的飞跃，进大厂，升职加薪，那就关注「 "),a("strong",[t._v("冰河技术")]),t._v(" 」微信公众号吧，每天更新超硬核技术干货，让你对如何提升技术能力不再迷茫！")])]),t._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://img-blog.csdnimg.cn/20200906013715889.png",loading:"lazy"}})])])}),[],!1,null,null,null);a.default=v.exports}}]);