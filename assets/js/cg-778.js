(window.webpackJsonp=window.webpackJsonp||[]).push([[778],{1080:function(t,e,r){"use strict";r.r(e);var a=r(8),s=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"《高性能polaris网关》通用模型-第09节-网关上下文属性顶层接口设计"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#《高性能polaris网关》通用模型-第09节-网关上下文属性顶层接口设计"}},[t._v("#")]),t._v(" 《高性能Polaris网关》通用模型-第09节：网关上下文属性顶层接口设计")]),t._v(" "),e("p",[t._v("作者：冰河\n"),e("br"),t._v("星球："),e("a",{attrs:{href:"http://m6z.cn/6aeFbs",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://m6z.cn/6aeFbs"),e("OutboundLink")],1),t._v(" "),e("br"),t._v("博客："),e("a",{attrs:{href:"https://binghe.gitcode.host",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://binghe.gitcode.host"),e("OutboundLink")],1),t._v(" "),e("br"),t._v("文章汇总："),e("a",{attrs:{href:"https://binghe.gitcode.host/md/all/all.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://binghe.gitcode.host/md/all/all.html"),e("OutboundLink")],1),t._v(" "),e("br"),t._v("源码获取地址："),e("a",{attrs:{href:"https://t.zsxq.com/0dhvFs5oR",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://t.zsxq.com/0dhvFs5oR"),e("OutboundLink")],1)]),t._v(" "),e("blockquote",[e("p",[t._v("沉淀，成长，突破，帮助他人，成就自我。")])]),t._v(" "),e("ul",[e("li",[t._v("本章难度：★★☆☆☆")]),t._v(" "),e("li",[t._v("本节重点：对高性能Polaris网关的上下文属性的顶层接口进行设计，从全局角度掌握高性能Polaris网关上下文属性顶层接口的设计。重点掌握整体调用链路的设计思路和设计方法，并能够将其灵活应用到自身实际项目中。")])]),t._v(" "),e("p",[e("strong",[t._v("大家好，我是冰河~~")])]),t._v(" "),e("p",[t._v("在网关的整体设计中，上下文可以说是网关的重要组成部分，通过上下文，可以获取到网关在处理请求和响应时的各种状态，也能够获取和透传各种数据。在设计网关的上下文中，为了更好的提升网关的可扩展性。在上下文的整体设计中，单独对上下文的属性进行了详细的设计。")]),t._v(" "),e("h2",{attrs:{id:"一、前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、前言"}},[t._v("#")]),t._v(" 一、前言")]),t._v(" "),e("p",[t._v("在前面的文章中，已经对高性能Polaris网关的请求与响应模型的顶层接口和实现进行了设计，对调用链路的顶层接口与抽象类模型进行了设计和实现，随后，又对网关服务的定义与实例模型和服务配置的缓存接口与实现类进行了设计。接下来，从网关上下文的角度，对网关上下文的顶层接口进行设计。")]),t._v(" "),e("h2",{attrs:{id:"二、本节诉求"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、本节诉求"}},[t._v("#")]),t._v(" 二、本节诉求")]),t._v(" "),e("p",[t._v("对高性能Polaris网关的上下文属性的顶层接口进行设计，从全局角度掌握高性能Polaris网关上下文属性顶层接口的设计。重点掌握整体调用链路的设计思路和设计方法，并能够将其灵活应用到自身实际项目中。")]),t._v(" "),e("h2",{attrs:{id:"三、类结构设计"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、类结构设计"}},[t._v("#")]),t._v(" 三、类结构设计")]),t._v(" "),e("p",[t._v("为了在保证网关高性能的同时，进一步提升网关的可扩展性，对网关的上下文属性进行设计。上下文属性的顶层接口如图9-1所示。")]),t._v(" "),e("div",{attrs:{align:"center"}},[e("img",{attrs:{src:"https://binghe.gitcode.host/images/project/gateway/2024-09-29-001.png?raw=true",width:"70%"}}),t._v(" "),e("br")]),t._v(" "),e("p",[t._v("在网关的属性接口设计上，主要设计了PolarisKey和AttributeKey两个接口，其中，PolarisKey是顶层接口，AttributeKey是PoalrisKey的子接口。两个接口中定义的方法含义如下所示。")]),t._v(" "),e("p",[e("strong",[t._v("（1）PolarisKey接口")])]),t._v(" "),e("ul",[e("li",[t._v("cast()方法：将Object类型的对象转换成指定的泛型类型。")])]),t._v(" "),e("p",[e("strong",[t._v("（2）AttributeKey接口")])]),t._v(" "),e("ul",[e("li",[t._v("valueOf()方法：根据转入的名称返回AttributeKey对象。")]),t._v(" "),e("li",[t._v("create(final Class<? super T> valueClass)方法：创建AttributeKey对象。")]),t._v(" "),e("li",[t._v("getHttpInvoker()方法：获取HttpInvoker对象。")]),t._v(" "),e("li",[t._v("getRpcInvoker()方法：获取RpcInvoker对象。")]),t._v(" "),e("li",[t._v("getWebSocketInvoker()方法：获取WebSocketInvoker对象。")]),t._v(" "),e("li",[t._v("getMatchInstances()方法：获取匹配到的所有服务实例列表。")]),t._v(" "),e("li",[t._v("getLoadInstance()方法：获取负载均衡后的服务实例。")]),t._v(" "),e("li",[t._v("getAttachment()方法：获取透传的参数。")])]),t._v(" "),e("h2",{attrs:{id:"四、编码实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四、编码实现"}},[t._v("#")]),t._v(" 四、编码实现")]),t._v(" "),e("p",[t._v("接下来，就对网关上下文属性顶层接口进行编码实现。")]),t._v(" "),e("h2",{attrs:{id:"查看完整文章"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看完整文章"}},[t._v("#")]),t._v(" 查看完整文章")]),t._v(" "),e("p",[t._v("加入"),e("a",{attrs:{href:"https://public.zsxq.com/groups/48848484411888.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("冰河技术"),e("OutboundLink")],1),t._v("知识星球，解锁完整技术文章、小册、视频与完整代码")])])}),[],!1,null,null,null);e.default=s.exports}}]);