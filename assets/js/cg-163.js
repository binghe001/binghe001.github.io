(window.webpackJsonp=window.webpackJsonp||[]).push([[163],{465:function(a,t,r){"use strict";r.r(t);var s=r(7),v=Object(s.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"《java8新特性》第08章-stream-api基础"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#《java8新特性》第08章-stream-api基础"}},[a._v("#")]),a._v(" 《Java8新特性》第08章：Stream API基础")]),a._v(" "),t("h2",{attrs:{id:"写在前面"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#写在前面"}},[a._v("#")]),a._v(" 写在前面")]),a._v(" "),t("blockquote",[t("p",[a._v("Java8中有两大最为重要的改变。第一个是 Lambda 表达式；另外一个则是 Stream API(java.util.stream.*)  ，那什么是Stream API呢？Java8中的Stream又该如何使用呢？")])]),a._v(" "),t("h2",{attrs:{id:"什么是stream"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是stream"}},[a._v("#")]),a._v(" 什么是Stream?")]),a._v(" "),t("p",[a._v("Java8中有两大最为重要的改变。第一个是 Lambda 表达式；另外一个则是 Stream API(java.util.stream.*)。")]),a._v(" "),t("p",[a._v("Stream 是 Java8 中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。使用Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数据库查询。也可以使用 Stream API 来并行执行操作。简而言之，Stream API 提供了一种高效且易于使用的处理数据的方式")]),a._v(" "),t("blockquote",[t("p",[a._v("流是数据渠道，用于操作数据源（集合、数组等）所生成的元素序列。“集合讲的是数据，流讲的是计算！ ”")])]),a._v(" "),t("p",[t("strong",[a._v("注意：")]),a._v("\n① Stream 自己不会存储元素。\n② Stream 不会改变源对象。相反，他们会返回一个持有结果的新Stream。\n③ Stream 操作是延迟执行的。这意味着他们会等到需要结果的时候才执行。")]),a._v(" "),t("h2",{attrs:{id:"stream操作的三个步骤"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#stream操作的三个步骤"}},[a._v("#")]),a._v(" Stream操作的三个步骤")]),a._v(" "),t("ul",[t("li",[a._v("创建 Stream")])]),a._v(" "),t("p",[a._v("一个数据源（如： 集合、数组）， 获取一个流。")]),a._v(" "),t("ul",[t("li",[a._v("中间操作")])]),a._v(" "),t("p",[a._v("一个中间操作链，对数据源的数据进行处理。")]),a._v(" "),t("ul",[t("li",[a._v("终止操作(终端操作)")])]),a._v(" "),t("p",[a._v("一个终止操作，执行中间操作链，并产生结果 。")]),a._v(" "),t("p",[t("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://binghe.gitcode.host/images/java/java8/2022-03-31-008-001.jpg",loading:"lazy"}})]),a._v(" "),t("h2",{attrs:{id:"如何创建stream"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何创建stream"}},[a._v("#")]),a._v(" 如何创建Stream?")]),a._v(" "),t("p",[a._v("Java8 中的 Collection 接口被扩展，提供了两个获取流的方法：")]),a._v(" "),t("h3",{attrs:{id:"_1-获取stream"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-获取stream"}},[a._v("#")]),a._v(" 1.获取Stream")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("default Stream"),t("E",[a._v(" stream() : 返回一个顺序流")])],1)]),a._v(" "),t("li",[t("p",[a._v("default Stream"),t("E",[a._v(" parallelStream() : 返回一个并行流")])],1)])]),a._v(" "),t("h3",{attrs:{id:"_2-由数组创建stream"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-由数组创建stream"}},[a._v("#")]),a._v(" 2.由数组创建Stream")]),a._v(" "),t("p",[a._v("Java8 中的 Arrays 的静态方法 stream() 可以获取数组流：")]),a._v(" "),t("ul",[t("li",[a._v("static "),t("T",[a._v(" Stream"),t("T",[a._v(" stream(T[] array): 返回一个流")])],1)],1)]),a._v(" "),t("p",[a._v("重载形式，能够处理对应基本类型的数组：")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("public static IntStream stream(int[] array)")])]),a._v(" "),t("li",[t("p",[a._v("public static LongStream stream(long[] array)")])]),a._v(" "),t("li",[t("p",[a._v("public static DoubleStream stream(double[] array)")])])]),a._v(" "),t("h3",{attrs:{id:"_3-由值创建流"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-由值创建流"}},[a._v("#")]),a._v(" 3.由值创建流")]),a._v(" "),t("p",[a._v("可以使用静态方法 Stream.of(), 通过显示值创建一个流。它可以接收任意数量的参数。")]),a._v(" "),t("ul",[t("li",[a._v("public static"),t("T",[a._v(" Stream"),t("T",[a._v(" of(T... values) : 返回一个流")])],1)],1)]),a._v(" "),t("h3",{attrs:{id:"_4-由函数创建流"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-由函数创建流"}},[a._v("#")]),a._v(" 4.由函数创建流")]),a._v(" "),t("p",[a._v("由函数创建流可以创建无限流。")]),a._v(" "),t("p",[a._v("可以使用静态方法 Stream.iterate() 和Stream.generate(), 创建无限流 。")]),a._v(" "),t("ul",[t("li",[a._v("迭代")])]),a._v(" "),t("p",[a._v("public static"),t("T",[a._v(" Stream"),t("T",[a._v(" iterate(final T seed, final UnaryOperator"),t("T",[a._v(" f)")])],1)],1)],1),a._v(" "),t("ul",[t("li",[a._v("生成")])]),a._v(" "),t("p",[a._v("public static"),t("T",[a._v(" Stream"),t("T",[a._v(" generate(Supplier"),t("T",[a._v(" s)")])],1)],1)],1),a._v(" "),t("h2",{attrs:{id:"stream的中间操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#stream的中间操作"}},[a._v("#")]),a._v(" Stream的中间操作")]),a._v(" "),t("p",[a._v("多个中间操作可以连接起来形成一个流水线，除非流水线上触发终止操作，否则中间操作不会执行任何的处理！而在终止操作时一次性全部处理，称为“惰性求值”")]),a._v(" "),t("h3",{attrs:{id:"_1-筛选与切片"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-筛选与切片"}},[a._v("#")]),a._v(" 1.筛选与切片")]),a._v(" "),t("p",[t("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://binghe.gitcode.host/images/java/java8/2022-03-31-008-002.jpg",loading:"lazy"}})]),a._v(" "),t("h3",{attrs:{id:"_2-映射"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-映射"}},[a._v("#")]),a._v(" 2.映射")]),a._v(" "),t("p",[t("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://binghe.gitcode.host/images/java/java8/2022-03-31-008-003.jpg",loading:"lazy"}})]),a._v(" "),t("h3",{attrs:{id:"_3-排序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-排序"}},[a._v("#")]),a._v(" 3.排序")]),a._v(" "),t("p",[t("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://binghe.gitcode.host/images/java/java8/2022-03-31-008-004.jpg",loading:"lazy"}})]),a._v(" "),t("h2",{attrs:{id:"stream-的终止操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#stream-的终止操作"}},[a._v("#")]),a._v(" Stream 的终止操作")]),a._v(" "),t("p",[a._v("终端操作会从流的流水线生成结果。其结果可以是任何不是流的值，例如： List、 Integer，甚至是 void 。")]),a._v(" "),t("h3",{attrs:{id:"_1-查找与匹配"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-查找与匹配"}},[a._v("#")]),a._v(" 1.查找与匹配")]),a._v(" "),t("p",[t("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://binghe.gitcode.host/images/java/java8/2022-03-31-008-005.jpg",loading:"lazy"}})]),a._v(" "),t("p",[t("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://binghe.gitcode.host/images/java/java8/2022-03-31-008-006.jpg",loading:"lazy"}})]),a._v(" "),t("h3",{attrs:{id:"_2-规约"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-规约"}},[a._v("#")]),a._v(" 2.规约")]),a._v(" "),t("p",[t("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://binghe.gitcode.host/images/java/java8/2022-03-31-008-007.jpg",loading:"lazy"}})]),a._v(" "),t("h3",{attrs:{id:"_3-收集"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-收集"}},[a._v("#")]),a._v(" 3.收集")]),a._v(" "),t("p",[t("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://binghe.gitcode.host/images/java/java8/2022-03-31-008-008.jpg",loading:"lazy"}})]),a._v(" "),t("p",[a._v("Collector 接口中方法的实现决定了如何对流执行收集操作(如收集到 List、 Set、 Map)。但是 Collectors 实用类提供了很多静态方法，可以方便地创建常见收集器实例， 具体方法与实例如下表")]),a._v(" "),t("p",[t("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://binghe.gitcode.host/images/java/java8/2022-03-31-008-009.jpg",loading:"lazy"}})]),a._v(" "),t("p",[t("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://binghe.gitcode.host/images/java/java8/2022-03-31-008-010.jpg",loading:"lazy"}})]),a._v(" "),t("h2",{attrs:{id:"并行流与串行流"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#并行流与串行流"}},[a._v("#")]),a._v(" 并行流与串行流")]),a._v(" "),t("p",[a._v("并行流就是把一个内容分成多个数据块，并用不同的线程分别处理每个数据块的流。")]),a._v(" "),t("p",[a._v("Java 8 中将并行进行了优化，我们可以很容易的对数据进行并行操作。 Stream API 可以声明性地通过 parallel() 与\nsequential() 在并行流与顺序流之间进行切换")]),a._v(" "),t("h2",{attrs:{id:"fork-join-框架"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#fork-join-框架"}},[a._v("#")]),a._v(" Fork/Join 框架")]),a._v(" "),t("h3",{attrs:{id:"_1-简单概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-简单概述"}},[a._v("#")]),a._v(" 1.简单概述")]),a._v(" "),t("blockquote",[t("p",[a._v("Fork/Join 框架： 就是在必要的情况下，将一个大任务，进行拆分(fork)成若干个小任务（拆到不可再拆时），再将一个个的小任务运算的结果进行 join 汇总.")])]),a._v(" "),t("p",[t("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://binghe.gitcode.host/images/java/java8/2022-03-31-008-011.jpg",loading:"lazy"}})]),a._v(" "),t("h3",{attrs:{id:"_2-fork-join-框架与传统线程池的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-fork-join-框架与传统线程池的区别"}},[a._v("#")]),a._v(" 2.Fork/Join 框架与传统线程池的区别")]),a._v(" "),t("p",[a._v("采用 “工作窃取”模式（work-stealing）：\n当执行新的任务时它可以将其拆分分成更小的任务执行，并将小任务加到线程队列中，然后再从一个随机线程的队列中偷一个并把它放在自己的队列中。")]),a._v(" "),t("p",[a._v("相对于一般的线程池实现,fork/join框架的优势体现在对其中包含的任务的处理方式上.在一般的线程池中,如果一个线程正在执行的任务由于某些原因无法继续运行,那么该线程会处于等待状态.而在fork/join框架实现中,如果某个子问题由于等待另外一个子问题的完成而无法继续运行.那么处理该子问题的线程会主动寻找其他尚未运行的子问题来执行.这种方式减少了线程的等待时间,提高了性能。")]),a._v(" "),t("h2",{attrs:{id:"星球服务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#星球服务"}},[a._v("#")]),a._v(" 星球服务")]),a._v(" "),t("p",[a._v("加入星球，你将获得：")]),a._v(" "),t("p",[a._v("1.项目学习：微服务入门必备的SpringCloud  Alibaba实战项目、手写RPC项目—所有大厂都需要的项目【含上百个经典面试题】、深度解析Spring6核心技术—只要学习Java就必须深度掌握的框架【含数十个经典思考题】、Seckill秒杀系统项目—进大厂必备高并发、高性能和高可用技能。")]),a._v(" "),t("p",[a._v("2.框架源码：手写RPC项目—所有大厂都需要的项目【含上百个经典面试题】、深度解析Spring6核心技术—只要学习Java就必须深度掌握的框架【含数十个经典思考题】。")]),a._v(" "),t("p",[a._v("3.硬核技术：深入理解高并发系列（全册）、深入理解JVM系列（全册）、深入浅出Java设计模式（全册）、MySQL核心知识（全册）。")]),a._v(" "),t("p",[a._v("4.技术小册：深入理解高并发编程（第1版）、深入理解高并发编程（第2版）、从零开始手写RPC框架、SpringCloud  Alibaba实战、冰河的渗透实战笔记、MySQL核心知识手册、Spring IOC核心技术、Nginx核心技术、面经手册等。")]),a._v(" "),t("p",[a._v("5.技术与就业指导：提供相关就业辅导和未来发展指引，冰河从初级程序员不断沉淀，成长，突破，一路成长为互联网资深技术专家，相信我的经历和经验对你有所帮助。")]),a._v(" "),t("p",[a._v("冰河的知识星球是一个简单、干净、纯粹交流技术的星球，不吹水，目前加入享5折优惠，价值远超门票。加入星球的用户，记得添加冰河微信：hacker_binghe，冰河拉你进星球专属VIP交流群。")]),a._v(" "),t("h2",{attrs:{id:"星球重磅福利"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#星球重磅福利"}},[a._v("#")]),a._v(" 星球重磅福利")]),a._v(" "),t("p",[a._v("跟冰河一起从根本上提升自己的技术能力，架构思维和设计思路，以及突破自身职场瓶颈，冰河特推出重大优惠活动，扫码领券进行星球，"),t("strong",[a._v("直接立减149元，相当于5折，")]),a._v(" 这已经是星球最大优惠力度！")]),a._v(" "),t("div",{attrs:{align:"center"}},[t("img",{attrs:{src:"https://binghe.gitcode.host/images/personal/xingqiu_149.png?raw=true",width:"80%"}}),a._v(" "),t("br")]),a._v(" "),t("p",[a._v("领券加入星球，跟冰河一起学习《SpringCloud Alibaba实战》、《手撸RPC专栏》和《Spring6核心技术》，更有已经上新的《大规模分布式Seckill秒杀系统》，从零开始介绍原理、设计架构、手撸代码。后续更有硬核中间件项目和业务项目，而这些都是你升职加薪必备的基础技能。")]),a._v(" "),t("p",[t("strong",[a._v("100多元就能学这么多硬核技术、中间件项目和大厂秒杀系统，如果是我，我会买他个终身会员！")])]),a._v(" "),t("h2",{attrs:{id:"其他方式加入星球"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#其他方式加入星球"}},[a._v("#")]),a._v(" 其他方式加入星球")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("链接")]),a._v(" ：打开链接 "),t("a",{attrs:{href:"http://m6z.cn/6aeFbs",target:"_blank",rel:"noopener noreferrer"}},[a._v("http://m6z.cn/6aeFbs"),t("OutboundLink")],1),a._v(" 加入星球。")]),a._v(" "),t("li",[t("strong",[a._v("回复")]),a._v(" ：在公众号 "),t("strong",[a._v("冰河技术")]),a._v(" 回复 "),t("strong",[a._v("星球")]),a._v(" 领取优惠券加入星球。")])]),a._v(" "),t("p",[t("strong",[a._v("特别提醒：")]),a._v(" 苹果用户进圈或续费，请加微信 "),t("strong",[a._v("hacker_binghe")]),a._v(" 扫二维码，或者去公众号 "),t("strong",[a._v("冰河技术")]),a._v(" 回复 "),t("strong",[a._v("星球")]),a._v(" 扫二维码加入星球。")]),a._v(" "),t("h2",{attrs:{id:"星球规划"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#星球规划"}},[a._v("#")]),a._v(" 星球规划")]),a._v(" "),t("p",[a._v("后续冰河还会在星球更新大规模中间件项目和深度剖析核心技术的专栏，目前已经规划的专栏如下所示。")]),a._v(" "),t("h3",{attrs:{id:"中间件项目"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#中间件项目"}},[a._v("#")]),a._v(" 中间件项目")]),a._v(" "),t("ul",[t("li",[a._v("《大规模分布式定时调度中间件项目实战（非Demo）》：全程手撸代码。")]),a._v(" "),t("li",[a._v("《大规模分布式IM（即时通讯）项目实战（非Demo）》：全程手撸代码。")]),a._v(" "),t("li",[a._v("《大规模分布式网关项目实战（非Demo）》：全程手撸代码。")]),a._v(" "),t("li",[a._v("《手写Redis》：全程手撸代码。")]),a._v(" "),t("li",[a._v("《手写JVM》全程手撸代码。")])]),a._v(" "),t("h3",{attrs:{id:"超硬核项目"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#超硬核项目"}},[a._v("#")]),a._v(" 超硬核项目")]),a._v(" "),t("ul",[t("li",[a._v("《从零落地秒杀系统项目》：全程手撸代码，在阿里云实现压测（"),t("strong",[a._v("已上新")]),a._v("）。")]),a._v(" "),t("li",[a._v("《大规模电商系统商品详情页项目》：全程手撸代码，在阿里云实现压测。")]),a._v(" "),t("li",[a._v("其他待规划的实战项目，小伙伴们也可以提一些自己想学的，想一起手撸的实战项目。。。")])]),a._v(" "),t("p",[a._v("既然星球规划了这么多内容，那么肯定就会有小伙伴们提出疑问：这么多内容，能更新完吗？我的回答就是：一个个攻破呗，咱这星球干就干真实中间件项目，剖析硬核技术和项目，不做Demo。初衷就是能够让小伙伴们学到真正的核心技术，不再只是简单的做CRUD开发。所以，每个专栏都会是硬核内容，像《SpringCloud Alibaba实战》、《手撸RPC专栏》和《Spring6核心技术》就是很好的示例。后续的专栏只会比这些更加硬核，杜绝Demo开发。")]),a._v(" "),t("p",[a._v("小伙伴们跟着冰河认真学习，多动手，多思考，多分析，多总结，有问题及时在星球提问，相信在技术层面，都会有所提高。将学到的知识和技术及时运用到实际的工作当中，学以致用。星球中不少小伙伴都成为了公司的核心技术骨干，实现了升职加薪的目标。")]),a._v(" "),t("h2",{attrs:{id:"联系冰河"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#联系冰河"}},[a._v("#")]),a._v(" 联系冰河")]),a._v(" "),t("h3",{attrs:{id:"加群交流"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#加群交流"}},[a._v("#")]),a._v(" 加群交流")]),a._v(" "),t("p",[a._v("本群的宗旨是给大家提供一个良好的技术学习交流平台，所以杜绝一切广告！由于微信群人满 100 之后无法加入，请扫描下方二维码先添加作者 “冰河” 微信(hacker_binghe)，备注："),t("code",[a._v("星球编号")]),a._v("。")]),a._v(" "),t("div",{attrs:{align:"center"}},[t("img",{attrs:{src:"https://binghe.gitcode.host/images/personal/hacker_binghe.jpg?raw=true",width:"180px"}}),a._v(" "),t("div",{staticStyle:{"font-size":"18px"}},[a._v("冰河微信")]),a._v(" "),t("br")]),a._v(" "),t("h3",{attrs:{id:"公众号"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#公众号"}},[a._v("#")]),a._v(" 公众号")]),a._v(" "),t("p",[a._v("分享各种编程语言、开发技术、分布式与微服务架构、分布式数据库、分布式事务、云原生、大数据与云计算技术和渗透技术。另外，还会分享各种面试题和面试技巧。内容在 "),t("strong",[a._v("冰河技术")]),a._v(" 微信公众号首发，强烈建议大家关注。")]),a._v(" "),t("div",{attrs:{align:"center"}},[t("img",{attrs:{src:"https://binghe.gitcode.host/images/personal/ice_wechat.jpg?raw=true",width:"180px"}}),a._v(" "),t("div",{staticStyle:{"font-size":"18px"}},[a._v("公众号：冰河技术")]),a._v(" "),t("br")]),a._v(" "),t("h3",{attrs:{id:"视频号"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#视频号"}},[a._v("#")]),a._v(" 视频号")]),a._v(" "),t("p",[a._v("定期分享各种编程语言、开发技术、分布式与微服务架构、分布式数据库、分布式事务、云原生、大数据与云计算技术和渗透技术。另外，还会分享各种面试题和面试技巧。")]),a._v(" "),t("div",{attrs:{align:"center"}},[t("img",{attrs:{src:"https://binghe.gitcode.host/images/personal/ice_video.png?raw=true",width:"180px"}}),a._v(" "),t("div",{staticStyle:{"font-size":"18px"}},[a._v("视频号：冰河技术")]),a._v(" "),t("br")]),a._v(" "),t("h3",{attrs:{id:"星球"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#星球"}},[a._v("#")]),a._v(" 星球")]),a._v(" "),t("p",[a._v("加入星球 "),t("strong",[t("a",{attrs:{href:"http://m6z.cn/6aeFbs",target:"_blank",rel:"noopener noreferrer"}},[a._v("冰河技术"),t("OutboundLink")],1)]),a._v("，可以获得本站点所有学习内容的指导与帮助。如果你遇到不能独立解决的问题，也可以添加冰河的微信："),t("strong",[a._v("hacker_binghe")]),a._v("， 我们一起沟通交流。另外，在星球中不只能学到实用的硬核技术，还能学习"),t("strong",[a._v("实战项目")]),a._v("！")]),a._v(" "),t("p",[a._v("关注 "),t("a",{attrs:{href:"https://img-blog.csdnimg.cn/20210426115714643.jpg?raw=true",target:"_blank",rel:"noopener noreferrer"}},[a._v("冰河技术"),t("OutboundLink")],1),a._v("公众号，回复 "),t("code",[a._v("星球")]),a._v(" 可以获取入场优惠券。")]),a._v(" "),t("div",{attrs:{align:"center"}},[t("img",{attrs:{src:"https://binghe.gitcode.host/images/personal/xingqiu.png?raw=true",width:"180px"}}),a._v(" "),t("div",{staticStyle:{"font-size":"18px"}},[a._v("知识星球：冰河技术")]),a._v(" "),t("br")])])}),[],!1,null,null,null);t.default=v.exports}}]);