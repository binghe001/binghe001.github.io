(window.webpackJsonp=window.webpackJsonp||[]).push([[318],{610:function(t,a,r){"use strict";r.r(a);var e=r(7),s=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"《面试必问》第08章-悲观锁与乐观锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#《面试必问》第08章-悲观锁与乐观锁"}},[t._v("#")]),t._v(" 《面试必问》第08章：悲观锁与乐观锁")]),t._v(" "),a("h2",{attrs:{id:"何谓悲观锁与乐观锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#何谓悲观锁与乐观锁"}},[t._v("#")]),t._v(" 何谓悲观锁与乐观锁")]),t._v(" "),a("p",[t._v("乐观锁对应于生活中乐观的人总是想着事情往好的方向发展，悲观锁对应于生活中悲观的人总是想着事情往坏的方向发展。这两种人各有优缺点，不能不以场景而定说一种人好于另外一种人。")]),t._v(" "),a("h2",{attrs:{id:"悲观锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#悲观锁"}},[t._v("#")]),t._v(" 悲观锁")]),t._v(" "),a("p",[t._v("总是假设最坏的情况，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会阻塞直到它拿到锁（ 共享资源每次只给一个线程使用，其它线程阻塞，用完后再把资源转让给其它线程）。传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。 Java 中 synchronized 和ReentrantLock 等独占锁就是悲观锁思想的实现。")]),t._v(" "),a("h2",{attrs:{id:"乐观锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#乐观锁"}},[t._v("#")]),t._v(" 乐观锁")]),t._v(" "),a("p",[t._v("总是假设最好的情况，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号机制和 CAS 算法实现。 乐观锁适用于多读的应用类型，这样可以提\n高吞吐量，像数据库提供的类似于 write_condition 机制，其实都是提供的乐观锁。在 Java 中 java.util.concurrent.atomic 包下面的原子变量类就是使用了乐观锁的一种实现方式 CAS 实现的。")]),t._v(" "),a("h2",{attrs:{id:"两种锁的使用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#两种锁的使用场景"}},[t._v("#")]),t._v(" 两种锁的使用场景")]),t._v(" "),a("p",[t._v("从上面对两种锁的介绍，我们知道两种锁各有优缺点，不可认为一种好于另一种，像乐观锁适用于写比较少的情况下（多读场景） ，即冲突真的很少发生的时候，这样可以省去了锁的开销，加大了系统的整个吞吐量。但如果是多写的情况，一般会经常产生冲突，这就会导致上层应用会不断的进行 retry，这样反倒是降低了性能，所以一般多写的场景下用悲观锁就比较合适。")]),t._v(" "),a("h2",{attrs:{id:"乐观锁常见的两种实现方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#乐观锁常见的两种实现方式"}},[t._v("#")]),t._v(" 乐观锁常见的两种实现方式")]),t._v(" "),a("p",[t._v("乐观锁一般会使用版本号机制或 CAS 算法实现")]),t._v(" "),a("h3",{attrs:{id:"版本号机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#版本号机制"}},[t._v("#")]),t._v(" 版本号机制")]),t._v(" "),a("p",[t._v("一般是在数据表中加上一个数据版本号 version 字段，表示数据被修改的次数，当数据被修改时， version 值会加一。当线程 A 要更新数据值时，在读取数据的同时也会读取 version 值，在提交更新时，若刚才读取到的 version 值为当前数据库中的 version 值相等时才更新，否则重试更新操作，直到更新成功。举一个简单的例子： 假设数据库中帐户信息表中有一个 version 字段，当前值为 1 ；而当前帐户余额字段（ balance ）为 $100 。")]),t._v(" "),a("ul",[a("li",[t._v("操作员 A 此时将其读出（ version=1 ），并从其帐户余额中扣除 $50（ $100-$50 ）。")]),t._v(" "),a("li",[t._v("在操作员 A 操作的过程中，操作员 B 也读入此用户信息（version=1 ），并从其帐户余额中扣除 $20 （ $100-$20 ）。")]),t._v(" "),a("li",[t._v("操作员 A 完成了修改工作，将数据版本号加一（ version=2 ），连同帐户扣除后余额（ balance=$50 ），提交至数据库更新，此时由于提交数据版本大于数据库记录当前版本，数据被更新，数据库记录version 更新为 2 。")]),t._v(" "),a("li",[t._v("操作员 B 完成了操作，也将版本号加一（ version=2 ）试图向数据库提交数据（ balance=$80 ），但此时比对数据库记录版本时发现，操作员 B 提交的数据版本号为 2 ，数据库记录当前版本也为 2 ，不满足 “ 提交版本必须大于记录当前版本才能执行更新 “ 的乐观锁策略，因此，操作员 B 的提交被驳回。")])]),t._v(" "),a("p",[t._v("这样，就避免了操作员 B 用基于 version=1 的旧数据修改的结果覆盖操作员A 的操作结果的可能。")]),t._v(" "),a("h3",{attrs:{id:"cas-算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cas-算法"}},[t._v("#")]),t._v(" CAS 算法")]),t._v(" "),a("p",[t._v("即 compare and swap（比较与交换） ，是一种有名的无锁算法。无锁编程，即不使用锁的情况下实现多线程之间的变量同步，也就是在没有线程被阻塞的情况下实现变量的同步，所以也叫非阻塞同步（ Non-blockingSynchronization）。 CAS 算法涉及到三个操作数")]),t._v(" "),a("ul",[a("li",[t._v("需要读写的内存值 V")]),t._v(" "),a("li",[t._v("进行比较的值 A")]),t._v(" "),a("li",[t._v("拟写入的新值 B")])]),t._v(" "),a("p",[t._v("当且仅当 V 的值等于 A 时， CAS 通过原子方式用新值 B 来更新 V 的值，否则不会执行任何操作（比较和替换是一个原子操作）。一般情况下是一个自旋操作，即不断的重试。")]),t._v(" "),a("h2",{attrs:{id:"乐观锁的缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#乐观锁的缺点"}},[t._v("#")]),t._v(" 乐观锁的缺点")]),t._v(" "),a("p",[t._v("ABA 问题是乐观锁一个常见的问题")]),t._v(" "),a("h3",{attrs:{id:"aba-问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aba-问题"}},[t._v("#")]),t._v(" ABA 问题")]),t._v(" "),a("p",[t._v('如果一个变量 V 初次读取的时候是 A 值，并且在准备赋值的时候检查到它仍然是 A 值，那我们就能说明它的值没有被其他线程修改过了吗？很明显是不能的，因为在这段时间它的值可能被改为其他值，然后又改回 A，那 CAS 操作就会误认为它从来没有被修改过。这个问题被称为 CAS 操作的 "ABA"问题。')]),t._v(" "),a("p",[t._v("JDK 1.5 以后的 AtomicStampedReference 类就提供了此种能力，其中的compareAndSet 方法就是首先检查当前引用是否等于预期引用，并且当前标志是否等于预期标志，如果全部相等，则以原子方式将该引用和该标志的值设置为给定的更新值。")]),t._v(" "),a("h3",{attrs:{id:"循环时间长开销大"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#循环时间长开销大"}},[t._v("#")]),t._v(" 循环时间长开销大")]),t._v(" "),a("p",[t._v("自旋 CAS（也就是不成功就一直循环执行直到成功）如果长时间不成功，会给CPU 带来非常大的执行开销。 如果 JVM 能支持处理器提供的 pause 指令那么效率会有一定的提升， pause 指令有两个作用，第一它可以延迟流水线执行指令（ de-pipeline） ,使 CPU 不会消耗过多的执行资源，延迟的时间取决于具体实现的版本，在一些处理器上延迟时间是零。第二它可以避免在退出循环的时候因内存顺序冲突（ memory order violation）而引起 CPU 流水线被清空（ CPU pipeline flush），从而提高 CPU 的执行效率")]),t._v(" "),a("h3",{attrs:{id:"只能保证一个共享变量的原子操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#只能保证一个共享变量的原子操作"}},[t._v("#")]),t._v(" 只能保证一个共享变量的原子操作")]),t._v(" "),a("p",[t._v("CAS 只对单个共享变量有效，当操作涉及跨多个共享变量时 CAS 无效。但是从 JDK 1.5 开始，提供了 AtomicReference 类来保证引用对象之间的原子性，你可以把多个变量放在一个对象里来进行 CAS 操作.所以我们可以使用锁或者利用 AtomicReference 类把多个共享变量合并成一个共享变量来操作。")]),t._v(" "),a("h2",{attrs:{id:"cas-与-synchronized-的使用情景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cas-与-synchronized-的使用情景"}},[t._v("#")]),t._v(" CAS 与 synchronized 的使用情景")]),t._v(" "),a("p",[t._v("简单的来说 CAS 适用于写比较少的情况下（多读场景，冲突一般较少），synchronized 适用于写比较多的情况下（多写场景，冲突一般较多）")]),t._v(" "),a("ul",[a("li",[t._v("对于资源竞争较少（线程冲突较轻）的情况，使用 synchronized 同步锁进行线程阻塞和唤醒切换以及用户态内核态间的切换操作额外浪费消耗cpu 资源；而 CAS 基于硬件实现，不需要进入内核，不需要切换线程，操作自旋几率较少，因此可以获得更高的性能。")]),t._v(" "),a("li",[t._v("对于资源竞争严重（线程冲突严重）的情况， CAS 自旋的概率会比较大，从而浪费更多的 CPU 资源，效率低于 synchronized。")])]),t._v(" "),a("p",[t._v("补充： Java 并发编程这个领域中 synchronized 关键字一直都是元老级的角色，很久之前很多人都会称它为 “重量级锁” 。但是，在 JavaSE 1.6 之后进行了主要包括为了减少获得锁和释放锁带来的性能消耗而引入的 偏向锁 和 轻量级锁 以及其它各种优化之后变得在某些情况下并不是那么重了。 synchronized 的底层实现主要依靠 Lock-Free 的队列，基本思路是 自旋后阻塞， 竞争切换后继续竞争锁， 稍微牺牲了公平性，但获得了高吞吐量。在线程冲突较少的情况下，可以获得和 CAS 类似的性能；而线程冲突严重的情况下，性能远高于CAS。")]),t._v(" "),a("h2",{attrs:{id:"加群交流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#加群交流"}},[t._v("#")]),t._v(" 加群交流")]),t._v(" "),a("p",[t._v("本群的宗旨是给大家提供一个良好的技术学习交流平台，所以杜绝一切广告！由于微信群人满 100 之后无法加入，请扫描下方二维码先添加作者 “冰河” 微信(hacker_binghe)，备注："),a("code",[t._v("学习加群")]),t._v("。")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:"https://binghe.gitcode.host/images/personal/hacker_binghe.jpg?raw=true",width:"180px"}}),t._v(" "),a("div",{staticStyle:{"font-size":"9px"}},[t._v("冰河微信")]),t._v(" "),a("br")]),t._v(" "),a("h2",{attrs:{id:"公众号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#公众号"}},[t._v("#")]),t._v(" 公众号")]),t._v(" "),a("p",[t._v("分享各种编程语言、开发技术、分布式与微服务架构、分布式数据库、分布式事务、云原生、大数据与云计算技术和渗透技术。另外，还会分享各种面试题和面试技巧。")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210426115714643.jpg?raw=true",width:"180px"}}),t._v(" "),a("div",{staticStyle:{"font-size":"9px"}},[t._v("公众号：冰河技术")]),t._v(" "),a("br")]),t._v(" "),a("h2",{attrs:{id:"星球"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#星球"}},[t._v("#")]),t._v(" 星球")]),t._v(" "),a("p",[t._v("加入星球 "),a("strong",[a("a",{attrs:{href:"http://m6z.cn/6aeFbs",target:"_blank",rel:"noopener noreferrer"}},[t._v("冰河技术"),a("OutboundLink")],1)]),t._v("，可以获得本站点所有学习内容的指导与帮助。如果你遇到不能独立解决的问题，也可以添加冰河的微信："),a("strong",[t._v("hacker_binghe")]),t._v("， 我们一起沟通交流。另外，在星球中不只能学到实用的硬核技术，还能学习"),a("strong",[t._v("实战项目")]),t._v("！")]),t._v(" "),a("p",[t._v("关注 "),a("a",{attrs:{href:"https://img-blog.csdnimg.cn/20210426115714643.jpg?raw=true",target:"_blank",rel:"noopener noreferrer"}},[t._v("冰河技术"),a("OutboundLink")],1),t._v("公众号，回复 "),a("code",[t._v("星球")]),t._v(" 可以获取入场优惠券。")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:"https://binghe.gitcode.host/images/personal/xingqiu.png?raw=true",width:"180px"}}),t._v(" "),a("div",{staticStyle:{"font-size":"9px"}},[t._v("知识星球：冰河技术")]),t._v(" "),a("br")])])}),[],!1,null,null,null);a.default=s.exports}}]);