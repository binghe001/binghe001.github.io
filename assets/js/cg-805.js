(window.webpackJsonp=window.webpackJsonp||[]).push([[805],{1138:function(t,r,e){"use strict";e.r(r);var a=e(15),s=Object(a.a)({},(function(){var t=this,r=t._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"《高性能polaris网关》通用过滤器-第14节-基于自定义spi实现错误处理过滤器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#《高性能polaris网关》通用过滤器-第14节-基于自定义spi实现错误处理过滤器"}},[t._v("#")]),t._v(" 《高性能Polaris网关》通用过滤器-第14节：基于自定义SPI实现错误处理过滤器")]),t._v(" "),r("p",[t._v("作者：冰河\n"),r("br"),t._v("星球："),r("a",{attrs:{href:"http://m6z.cn/6aeFbs",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://m6z.cn/6aeFbs"),r("OutboundLink")],1),t._v(" "),r("br"),t._v("博客："),r("a",{attrs:{href:"https://binghe.gitcode.host",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://binghe.gitcode.host"),r("OutboundLink")],1),t._v(" "),r("br"),t._v("文章汇总："),r("a",{attrs:{href:"https://binghe.gitcode.host/md/all/all.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://binghe.gitcode.host/md/all/all.html"),r("OutboundLink")],1),t._v(" "),r("br"),t._v("源码获取地址："),r("a",{attrs:{href:"https://t.zsxq.com/0dhvFs5oR",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://t.zsxq.com/0dhvFs5oR"),r("OutboundLink")],1)]),t._v(" "),r("blockquote",[r("p",[t._v("沉淀，成长，突破，帮助他人，成就自我。")])]),t._v(" "),r("ul",[r("li",[t._v("本章难度：★★☆☆☆")]),t._v(" "),r("li",[t._v("本节重点：基于自定义SPI实现错误处理过滤器，从全局角度掌握高性能Polaris构建请求与响应信息的核心流程和代码设计。重点掌握整体调用链路的设计思路和设计方法，并能够将其灵活应用到自身实际项目中。")])]),t._v(" "),r("p",[t._v("在高性能网关中，为了更好的扩展整体过滤器的功能，采用SPI的方式将过滤器动态加载的过滤器链中。并且已经适配自定义SPI进一步提升了可扩展性。接下来，就基于自定义SPI实现错误处理过滤器。")]),t._v(" "),r("h2",{attrs:{id:"一、前言"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#一、前言"}},[t._v("#")]),t._v(" 一、前言")]),t._v(" "),r("p",[t._v("在之前的文章中，我们已经对网关的顶级核心过滤器接口进行了设计和实现，也进一步封装了请求和响应的模型，基本上完成了过滤器的整体代码框架，并对网关过滤器的两大顶级抽象类进行了设计和实现，也对网关通用过滤器链进行了设计和实现。随后，对网关过滤器通用工厂类进行了设计和实现。")]),t._v(" "),r("p",[t._v("为了进一步提升过滤器的扩展性，对过滤器进行优化，使其适配自定义SPI。并且已经基于自定义SPI实现了负载均衡过滤器、超时配置过滤器、HTTP过滤器、RPC过滤器、指标分析过滤器、Mock过滤器和灰度过滤器。接下来，就基于自定义SPI扩展实现错误处理过滤器。")]),t._v(" "),r("h2",{attrs:{id:"二、本节诉求"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#二、本节诉求"}},[t._v("#")]),t._v(" 二、本节诉求")]),t._v(" "),r("p",[t._v("基于自定义SPI实现错误处理过滤器，从全局角度掌握高性能Polaris构建请求与响应信息的核心流程和代码设计。重点掌握整体调用链路的设计思路和设计方法，并能够将其灵活应用到自身实际项目中。")]),t._v(" "),r("h2",{attrs:{id:"三、核心类设计"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#三、核心类设计"}},[t._v("#")]),t._v(" 三、核心类设计")]),t._v(" "),r("p",[t._v("本节，对基于自定义SPI扩展实现错误处理过滤器的功能进行设计和封装实现，整体类图如图14-1所示。")]),t._v(" "),r("div",{attrs:{align:"center"}},[r("img",{attrs:{src:"https://binghe.gitcode.host/images/project/gateway/2025-04-20-001.png?raw=true",width:"70%"}}),t._v(" "),r("br")]),t._v(" "),r("p",[t._v("可以看到，在类图上以自定义SPI扩展的灰度过滤器类就是ErrorFilter。")]),t._v(" "),r("p",[r("strong",[t._v("注意：这里重点给大家展示基于自定义SPI实现ErrorFilter过滤器类，其他代码的实现细节，例如自定义SPI的具体实现等，大家可以自行到本节对应的源码分支进行查看，这里不再赘述。")])]),t._v(" "),r("h2",{attrs:{id:"四、编码实现"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#四、编码实现"}},[t._v("#")]),t._v(" 四、编码实现")]),t._v(" "),r("p",[t._v("本节，同样重点给大家展示基于自定义SPI实现的错误处理过滤器类，其他代码的实现细节，例如自定义SPI的具体实现以及其他相关的实现类等，大家可以自行到本节对应的源码分支进行查看，这里不再赘述。")]),t._v(" "),r("p",[r("strong",[t._v("（1）实现ErrorFilter类")])]),t._v(" "),r("p",[t._v("ErrorFilter类是网关的错误处理过滤器类，当请求执行到ErrorFilter过滤器类时，会获取上下文中的throwable异常并定义responseCode的默认值，随后判断throwable异常是否是BaseException类型，如果是BaseException类型，则将throwable异常强转为BaseException类型，随后获取responseCode，随后通过ResponseFactory的getPolarisResponseWithCode()方法传入responseCode参数构建PolarisResponseData对象，并将PolarisResponseData对象设置到网关的上下文context对象中，最后调用context的written()方法设置写回标记，并向后执行其他过滤器。")]),t._v(" "),r("p",[t._v("源码详见：polaris-filter-error工程下的io.binghe.polaris.filter.error.ErrorFilter。")]),t._v(" "),r("h2",{attrs:{id:"查看完整文章"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#查看完整文章"}},[t._v("#")]),t._v(" 查看完整文章")]),t._v(" "),r("p",[t._v("加入"),r("a",{attrs:{href:"https://public.zsxq.com/groups/48848484411888.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("冰河技术"),r("OutboundLink")],1),t._v("知识星球，解锁完整技术文章、小册、视频与完整代码")])])}),[],!1,null,null,null);r.default=s.exports}}]);