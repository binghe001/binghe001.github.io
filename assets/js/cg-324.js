(window.webpackJsonp=window.webpackJsonp||[]).push([[324],{608:function(t,a,r){"use strict";r.r(a);var _=r(6),s=Object(_.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"《rpc手撸专栏》第2章-高性能分布式rpc框架整体架构设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#《rpc手撸专栏》第2章-高性能分布式rpc框架整体架构设计"}},[t._v("#")]),t._v(" 《RPC手撸专栏》第2章：高性能分布式RPC框架整体架构设计")]),t._v(" "),a("p",[t._v("作者：冰河")]),t._v(" "),a("p",[t._v("星球："),a("a",{attrs:{href:"http://m6z.cn/6aeFbs",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://m6z.cn/6aeFbs"),a("OutboundLink")],1)]),t._v(" "),a("blockquote",[a("p",[t._v("沉淀，成长，突破，帮助他人，成就自我。")])]),t._v(" "),a("p",[a("strong",[t._v("大家好，我是冰河~~")])]),t._v(" "),a("p",[t._v("在《"),a("a",{attrs:{href:"https://binghe001.github.io/md/middleware/rpc/2022-06-25-%E3%80%8ARPC%E6%89%8B%E6%92%B8%E4%B8%93%E6%A0%8F%E3%80%8B-%E7%AC%AC1%E7%AB%A0-%E5%BC%80%E7%AF%87-%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E8%83%BD%E5%9C%A8%E5%AE%9E%E9%99%85%E5%9C%BA%E6%99%AF%E4%BD%BF%E7%94%A8%E7%9A%84RPC%E6%A1%86%E6%9E%B6.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("RPC手撸专栏"),a("OutboundLink")],1),t._v("》的《"),a("a",{attrs:{href:"https://binghe001.github.io/md/middleware/rpc/2022-06-25-%E3%80%8ARPC%E6%89%8B%E6%92%B8%E4%B8%93%E6%A0%8F%E3%80%8B-%E7%AC%AC1%E7%AB%A0-%E5%BC%80%E7%AF%87-%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E8%83%BD%E5%9C%A8%E5%AE%9E%E9%99%85%E5%9C%BA%E6%99%AF%E4%BD%BF%E7%94%A8%E7%9A%84RPC%E6%A1%86%E6%9E%B6.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("第1章：从零开始手撸一个能在实际场景使用的高性能RPC框架"),a("OutboundLink")],1),t._v("》一文中，详细介绍了冰河为何转去手撸RPC，各位小伙伴们能够在《"),a("a",{attrs:{href:"https://binghe001.github.io/md/middleware/rpc/2022-06-25-%E3%80%8ARPC%E6%89%8B%E6%92%B8%E4%B8%93%E6%A0%8F%E3%80%8B-%E7%AC%AC1%E7%AB%A0-%E5%BC%80%E7%AF%87-%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E8%83%BD%E5%9C%A8%E5%AE%9E%E9%99%85%E5%9C%BA%E6%99%AF%E4%BD%BF%E7%94%A8%E7%9A%84RPC%E6%A1%86%E6%9E%B6.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("RPC手撸专栏"),a("OutboundLink")],1),t._v("》中学到哪些技术和知识。并对实现的RPC框架的很少的一部分功能进行了演示。最终，带着小伙伴们一起手撸的RPC框架的功能远不止于此。")]),t._v(" "),a("p",[t._v("最后，《"),a("a",{attrs:{href:"https://binghe001.github.io/md/middleware/rpc/2022-06-25-%E3%80%8ARPC%E6%89%8B%E6%92%B8%E4%B8%93%E6%A0%8F%E3%80%8B-%E7%AC%AC1%E7%AB%A0-%E5%BC%80%E7%AF%87-%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E8%83%BD%E5%9C%A8%E5%AE%9E%E9%99%85%E5%9C%BA%E6%99%AF%E4%BD%BF%E7%94%A8%E7%9A%84RPC%E6%A1%86%E6%9E%B6.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("第1章：从零开始手撸一个能在实际场景使用的高性能RPC框架"),a("OutboundLink")],1),t._v("》一文中给小伙伴们学习《"),a("a",{attrs:{href:"https://binghe001.github.io/md/middleware/rpc/2022-06-25-%E3%80%8ARPC%E6%89%8B%E6%92%B8%E4%B8%93%E6%A0%8F%E3%80%8B-%E7%AC%AC1%E7%AB%A0-%E5%BC%80%E7%AF%87-%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E8%83%BD%E5%9C%A8%E5%AE%9E%E9%99%85%E5%9C%BA%E6%99%AF%E4%BD%BF%E7%94%A8%E7%9A%84RPC%E6%A1%86%E6%9E%B6.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("RPC手撸专栏"),a("OutboundLink")],1),t._v("》时，提出了一些小小的建议，那就是：纸上得来终觉浅，绝知此事要躬行。冰河希望大家在学习这个专栏的时候勤动手，跟着专栏一起实现代码。期间要多动脑，多总结，这样才能够加深对各项知识点的理解。切忌眼高手低，学了半天却最终啥也没学会。")]),t._v(" "),a("h2",{attrs:{id:"一、文章总览"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、文章总览"}},[t._v("#")]),t._v(" 一、文章总览")]),t._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"rpc-2022-06-30-006","data-src":"https://binghe001.github.io/assets/images/middleware/rpc/rpc-2022-06-30-006.png",loading:"lazy"}})]),t._v(" "),a("h2",{attrs:{id:"二、rpc框架的背景知识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、rpc框架的背景知识"}},[t._v("#")]),t._v(" 二、RPC框架的背景知识")]),t._v(" "),a("p",[t._v("在《"),a("a",{attrs:{href:"https://binghe001.github.io/md/middleware/rpc/2022-06-25-%E3%80%8ARPC%E6%89%8B%E6%92%B8%E4%B8%93%E6%A0%8F%E3%80%8B-%E7%AC%AC1%E7%AB%A0-%E5%BC%80%E7%AF%87-%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E8%83%BD%E5%9C%A8%E5%AE%9E%E9%99%85%E5%9C%BA%E6%99%AF%E4%BD%BF%E7%94%A8%E7%9A%84RPC%E6%A1%86%E6%9E%B6.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("第1章：从零开始手撸一个能在实际场景使用的高性能RPC框架"),a("OutboundLink")],1),t._v("》一文中，我详细的跟大家描述了为何转去手撸RPC框架的原因。除此之外，RPC框架是大型互联网企业使用的非常多的一种中间件框架，主要用于解决分布式系统各模块之间的远程调用问题。")]),t._v(" "),a("p",[t._v("市面上有很多成熟的RPC框架，其中也不乏比较出名的。例如，Dubbo、gRPC、Mina、Thrift等。尽管市面上存在这些成熟并且知名的RPC框架。但是，本着从底层原理和源码的角度彻底理解RPC框架的目标。我们还是一起手撸实现一个分布式高性能的RPC框架项目，一步步完善，争取能够在实际环境中得到应用。")]),t._v(" "),a("h2",{attrs:{id:"三、rpc框架整体架构设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、rpc框架整体架构设计"}},[t._v("#")]),t._v(" 三、RPC框架整体架构设计")]),t._v(" "),a("p",[t._v("RPC的英文全称是Remote Procedure Call，翻译成中文就是远程过程调用，能够使开发人员像调用本地服务一样调用远程服务。一个较完善的RPC框架总体上可以分为 "),a("strong",[t._v("服务提供者、注册中心、服务消费者和监控中心")]),t._v(" 。其中，服务提供者、注册中心和服务消费者是必需的，而监控中心则可以根据实际情况进行增减。")]),t._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"rpc-2022-06-30-001","data-src":"https://binghe001.github.io/assets/images/middleware/rpc/rpc-2022-06-30-001.png",loading:"lazy"}})]),t._v(" "),a("p",[t._v("RPC框架在架构和实现上，最重要的三个组件就是服务提供者、注册中心和服务消费者，也就是上图中画实线的部分。另外，可根据实际业务场景和实际情况考虑是否在RPC框架整体的架构和实现中添加监控中心组件，也就是上图中画虚线的部分。")]),t._v(" "),a("p",[t._v("在一次RPC调用的流程中，服务提供者、注册中心和服务消费者之间的交互流程如下所示。")]),t._v(" "),a("p",[t._v("（1）服务提供者启动后，会将其提供的服务列表信息注册到注册中心。")]),t._v(" "),a("p",[t._v("（2）服务消费者启动后，会向注册中心订阅服务的地址。")]),t._v(" "),a("p",[t._v("（3）当注册中心的服务列表发生变更时，注册中心会主动向服务消费者推送服务列表。")]),t._v(" "),a("p",[t._v("（4）服务消费者会从订阅的服务列表中，按照一定的规则选择其中一个地址，并将调用服务提供者的方法需要的数据通过网络发送给服务提供者。")]),t._v(" "),a("p",[t._v("（5）服务消费者会通过动态代理的方式远程调用服务提供者提供的服务，期间，服务消费者的动态代理模块会将远程调用需要的接口名称、方法名称、方法参数类型列表、方法参数列表等信息序列化成二进制字节流，传输到服务提供者。")]),t._v(" "),a("p",[t._v("（6）服务提供者接收到服务消费者发来的数据后，要先将二进制字节流进行解码，反序列化成原始数据。")]),t._v(" "),a("p",[t._v("（7）服务提供者根据解码后的数据，调用对应的服务，然后将调用结果进行编码，序列化成二进制字节流返回给服务消费者。")]),t._v(" "),a("p",[t._v("（8）服务消费者接收到服务提供者返回的数据后，进行解码，将二进制字节流反序列化成原始数据，进行后续的业务处理。")]),t._v(" "),a("h2",{attrs:{id:"四、rpc框架核心技术点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、rpc框架核心技术点"}},[t._v("#")]),t._v(" 四、RPC框架核心技术点")]),t._v(" "),a("p",[t._v("一个较为完善的RPC框架的实现会涉及到众多的技术点，但是最核心的技术点大体上包含：服务注册与发现、网络通信协议、序列化与反序列化、RPC调用方式、线程模型、动态代理、负载均衡等。接下来，就对这些核心技术点进行简单的介绍。")]),t._v(" "),a("h3",{attrs:{id:"_1-服务注册与发现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-服务注册与发现"}},[t._v("#")]),t._v(" 1.服务注册与发现")]),t._v(" "),a("p",[t._v("在分布式或微服务环境中，不同服务之间如何进行通信，这是个值得思考的问题。在早期的分布式系统中，一般是通过在服务消费者一端手动配置服务提供者的地址列表，如果服务提供者的地址列表发生变化之后，还要手动修改服务消费者中配置的服务提供者的地址，之后要重启服务消费者才能使配置生效。")]),t._v(" "),a("p",[t._v("后来可以通过服务消费者HTTP请求调用、保存服务提供者的地址列表，由程序开发人员在服务消费者中主动感知服务提供者暴露的服务信息，这就造成了服务消费者与服务提供者之间严重的耦合问题。")]),t._v(" "),a("p",[t._v("正式由于分布式系统中存在着这些问题，注册中心诞生了。在RPC框架中，主要使用注册中心实现服务的注册与发现。服务提供者上线后将自身的服务列表注册到注册中心，当服务提供者下线时，从注册中心中移除自身的服务列表。服务消费者上线后，向注册中心订阅服务提供和的服务列表，然后通过负载均衡算法选择其中一个服务节点进行调用。")]),t._v(" "),a("p",[t._v("为防止由于断网、系统宕机、程序崩溃等问题造成的注册中心一直残留无效服务列表的问题，在引入注册中心时，要采取 "),a("strong",[t._v("主动通知+心跳检测")]),t._v(" 的方案。")]),t._v(" "),a("p",[a("strong",[t._v("具体实现的方案就是")]),t._v(" ：当服务提供者上线时，主动将自身提供的服务列表注册到注册中心；当服务提供者下线时，主动自身注册到注册中心的服务列表。除此之外，需要实现心跳检测的方案，心跳检测可以在服务提供者实现，也可以由注册中心实现。例如，注册中心可以每隔30秒向服务提供者发送一次心跳检测，如果连续3次未收到服务提供者的响应，则认为该服务提供者已经下线，将其注册到注册中心的服务列表移除，并通知服务消费者服务列表发生了变化。")]),t._v(" "),a("p",[t._v("采用主动通知+心跳检测的方案，当服务提供者或者服务消费者发生变化时，无需重启任何服务即可快速实现服务的注册与发现功能。")]),t._v(" "),a("h3",{attrs:{id:"_2-网络通信协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-网络通信协议"}},[t._v("#")]),t._v(" 2.网络通信协议")]),t._v(" "),a("p",[t._v("RPC框架最主要的功能就是实现RPC远程过程调用，涉及到远程过程调用，那就一定是通过网络进行的，此时就必须通过某种网络通信协议进行数据交互，需要考虑采用哪些方式实现数据的编解码。")]),t._v(" "),a("p",[t._v("由于在分布式系统中，对RPC框架有着极高的性能要求，所以，在RPC框架中，网络通信协议的实现越简单越好，尽可能减少数据编解码和在网络传输过程中的性能损耗。")]),t._v(" "),a("p",[t._v("通用的网络协议有HTTP、TPC、UDP等，RPC框架可以基于这些通用的网络通信协议实现，也可以根据实际需求，实现自定义的网路通信协议。")]),t._v(" "),a("h3",{attrs:{id:"_3-序列化与反序列化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-序列化与反序列化"}},[t._v("#")]),t._v(" 3.序列化与反序列化")]),t._v(" "),a("p",[t._v("数据在网路上进行传输时，需要将原始数据采用某种编码方式序列化成二进制字节流在网络上传输，不管是服务提供者还是服务消费者接收到数据后，都需要将二进制字节流数据反序列化成原始数据。为了尽可能降低序列化和反序列化带来的性能问题，一般在RPC框架中会选择比较高效的序列化算法。")]),t._v(" "),a("p",[t._v("常用的序列化框架有："),a("strong",[t._v("FastJson、Kryo、Hessian、Protobuf等。")])]),t._v(" "),a("h3",{attrs:{id:"_4-rpc调用方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-rpc调用方式"}},[t._v("#")]),t._v(" 4.RPC调用方式")]),t._v(" "),a("p",[t._v("说到RPC的调用方式，可能很多小伙伴不是很了解，RPC不就是远程过程调用吗？还能有什么调用方式啊？其实一个成熟的RPC框架，例如Dubbo等会提供四种不同的调用方式，分别为：同步调用（Sync）、异步调用（Future）、回调（Callback）、单向调用（Oneway）。")]),t._v(" "),a("h4",{attrs:{id:"_4-1-同步调用-sync"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-同步调用-sync"}},[t._v("#")]),t._v(" 4.1 同步调用（Sync）")]),t._v(" "),a("p",[t._v("同步调用（Sync）：服务消费者发起RPC调用后，线程会一直阻塞，直到服务提供者返回结果或者超时异常。在RPC框架中，一般会采用同步调用的方式，但是在RPC框架内部的实现中，本质上还是采用的是异步处理。例如，Dubbo中就存在着经典的异步转同步的逻辑。另外，当采用同步调用方式时，要设置超时时间。如下图所示。")]),t._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"rpc-2022-06-30-002","data-src":"https://binghe001.github.io/assets/images/middleware/rpc/rpc-2022-06-30-002.png",loading:"lazy"}})]),t._v(" "),a("h4",{attrs:{id:"_4-2-异步调用-future"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-异步调用-future"}},[t._v("#")]),t._v(" 4.2 异步调用（Future）")]),t._v(" "),a("p",[t._v("异步调用（Future）：服务消费者发起RPC调用后，线程不会阻塞，获取到RPC框架返回的Future对象。RPC调用的结果数据会被服务提供者缓存起来，服务消费者根据自身实际情况决定获取结果数据。当服务消费者主动获取异步结果数据时是阻塞的。如下图所示。")]),t._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"rpc-2022-06-30-003","data-src":"https://binghe001.github.io/assets/images/middleware/rpc/rpc-2022-06-30-003.png",loading:"lazy"}})]),t._v(" "),a("h4",{attrs:{id:"_4-3-回调-callback"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-回调-callback"}},[t._v("#")]),t._v(" 4.3 回调（Callback）")]),t._v(" "),a("ul",[a("li",[t._v("回调（Callback）：服务消费者发起RPC调用后，会将回调接口Callback对象发送给RPC框架。此时也不需要同步等待RPC框架的返回结果，直接返回。当RPC框架接收到服务提供者处理的结果数据或者超时异常后，会执行Callback回调。一般在定义和实现Callback接口时，都要实现处理成功的方法和异常方法。例如 success(Object result) 方法和 fail(Exception e) 方法。")])]),t._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"rpc-2022-06-30-004","data-src":"https://binghe001.github.io/assets/images/middleware/rpc/rpc-2022-06-30-004.png",loading:"lazy"}})]),t._v(" "),a("h4",{attrs:{id:"_4-4-单向调用-oneway"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-单向调用-oneway"}},[t._v("#")]),t._v(" 4.4 单向调用（Oneway）")]),t._v(" "),a("ul",[a("li",[t._v("单向调用（Oneway）：服务消费者发送RPC调用后，直接返回，忽略返回结果。")])]),t._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"rpc-2022-06-30-005","data-src":"https://binghe001.github.io/assets/images/middleware/rpc/rpc-2022-06-30-005.png",loading:"lazy"}})]),t._v(" "),a("h3",{attrs:{id:"_5-线程模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-线程模型"}},[t._v("#")]),t._v(" 5.线程模型")]),t._v(" "),a("p",[t._v("对于一个成熟并且完善的RPC框架来说，线程模型是其必须要关注的。一般情况下，在RPC框架中，线程模型会分为IO线程和业务线程。例如，大名鼎鼎的Dubbo底层使用的是Netty进行网络通信，并且在使用Netty时，采用了Reactor线程模型。使用Netty时创建的Boss线程池和Worker线程池就可以看作是IO线程。")]),t._v(" "),a("h4",{attrs:{id:"_5-1-如何选择执行线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-如何选择执行线程"}},[t._v("#")]),t._v(" 5.1 如何选择执行线程")]),t._v(" "),a("p",[t._v("IO线程主要用来负责事件轮询、数据的编解码，数据传输等功能。如果在整个数据处理或者业务处理的过程中，不涉及复杂的逻辑计算、数据库查询等操作，并且整个处理过程可以立即完成，则可以将整个处理过程放在IO线程中完成。否则，就需要将数据的处理或者业务处理放在业务线程中执行，以免阻塞IO线程。")]),t._v(" "),a("h4",{attrs:{id:"_5-2-dubbo线程模型的分发策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-dubbo线程模型的分发策略"}},[t._v("#")]),t._v(" 5.2 Dubbo线程模型的分发策略")]),t._v(" "),a("p",[t._v("我在研究Dubbo源码时，发现Dubbo提供了五种可配置的线程分发策略，也就是利用这五种策略分别确定了哪些逻辑在IO线程中执行，哪些逻辑在业务线程中执行。这里，我将Dubbo中提供的五种线程分发策略总结如下所示。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("策略名称")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("all")]),t._v(" "),a("td",[t._v("所有请求和逻辑处理都会提交到业务线程中执行，也就是说，当Worker线程接收到事件后，统一提交到业务线程池处理。")])]),t._v(" "),a("tr",[a("td",[t._v("connection")]),t._v(" "),a("td",[t._v("连接的建立、断开等事件放入队列中排队执行，其他所有事件和消息都提交到业务线程池执行。")])]),t._v(" "),a("tr",[a("td",[t._v("direct")]),t._v(" "),a("td",[t._v("所有的事件和逻辑处理都在IO线程中执行。")])]),t._v(" "),a("tr",[a("td",[t._v("execution")]),t._v(" "),a("td",[t._v("请求类的消息提交到业务线程池执行，响应类以及其他事件消息直接在IO线程中执行。")])]),t._v(" "),a("tr",[a("td",[t._v("message")]),t._v(" "),a("td",[t._v("请求和响应类的消息提交到业务线程池执行，其他事件消息直接在IO线程中执行。")])])])]),t._v(" "),a("h3",{attrs:{id:"_6-动态代理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-动态代理"}},[t._v("#")]),t._v(" 6.动态代理")]),t._v(" "),a("p",[t._v("RPC框架能够使得开发人员像调用本地服务一样调用远程服务，这得益于动态代理技术。可以这么说，几乎每一款成熟并且完善的RPC框架都离不开动态代理技术。")]),t._v(" "),a("p",[t._v("利用动态代理技术创建一个代理对象，在代理对象中完成数据的编码操作，发起远程调用，将数据发送给服务提供者，接收从服务提供者返回的数据，进行解码等操作。代理对象屏蔽了RPC框架底层的调用细节。")]),t._v(" "),a("p",[t._v("RPC框架离不开动态代理技术，并且代理对象是在程序运行时动态生成的，所以生成代理类的速度和字节码大小都会影响到RPC框架的整体性能以及对系统资源的消耗程度，所以，选择动态代理技术时需要综合考虑生成代理类的速度和生成的字节码大小。")]),t._v(" "),a("p",[t._v("目前常用的动态代理技术有："),a("strong",[t._v("JDK 动态代理、Cglib、Javassist、ASM、Byte Buddy")]),t._v("。")]),t._v(" "),a("h4",{attrs:{id:"_6-1-jdk动态代理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-jdk动态代理"}},[t._v("#")]),t._v(" 6.1 JDK动态代理")]),t._v(" "),a("p",[t._v("JDK动态代理在运行时可以动态生成代理对象，但是使用JDK动态代理时，代理对象必须实现一个接口，这是因为生成的代理对象继承了Proxy类（这也是很早前阿里的一道面试题），并且生成的代理对象不能代理接口中未定义的方法。另外，JDK动态代理通过反射代理类中的方法，比直接调用方法的性能要低。")]),t._v(" "),a("h4",{attrs:{id:"_6-2-cglib动态代理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-cglib动态代理"}},[t._v("#")]),t._v(" 6.2 Cglib动态代理")]),t._v(" "),a("p",[t._v("Cglib动态代理是通过ASM字节码生成框架实现的，通过ASM字节码技术生成代理类，并且生成的代理类会继承被代理类，所以，代理类的类型不受限制。因为生成的代理类会继承被代理类，这就要求被代理类不能使用final关键字修饰。Cglib动态代理是通过FastClass利用index索引直接定位要调用的方法进行直接调用，在性能上比JDK动态代理高。")]),t._v(" "),a("h4",{attrs:{id:"_6-3-javassist和asm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-javassist和asm"}},[t._v("#")]),t._v(" 6.3 Javassist和ASM")]),t._v(" "),a("p",[t._v("Javassist和ASM都是操作Java字节码的框架，使用这两个框架时，需要开发人员对Class文件的结构以及一些JVM的知识有所了解。但是这两种框架生成的代理对象的执行性能都比反射要高。")]),t._v(" "),a("h4",{attrs:{id:"_6-4-byte-buddy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-byte-buddy"}},[t._v("#")]),t._v(" 6.4 Byte Buddy")]),t._v(" "),a("p",[t._v("Byte Buddy也是一个操作字节码的类库，Byte Buddy的功能强大，相比Javassist和ASM来说，Byte Buddy提供了更加方便的API来创建和修改Java的字节码，并且使用Byte Buddy时，不需要理解字节码的格式，性能也更加优越。")]),t._v(" "),a("h3",{attrs:{id:"_7-负载均衡"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-负载均衡"}},[t._v("#")]),t._v(" 7.负载均衡")]),t._v(" "),a("p",[t._v("在分布式系统中，往往服务提供者和服务消费者都不会存在单点的情况，二者在实现上都会存在多个节点，那服务消费者如何从多个服务提供者节点中选择一个进行远程调用呢？这就要求RPC框架在实现上支持负载均衡。")]),t._v(" "),a("p",[t._v("在RPC框架的实现中，负载均衡策略和算法也是影响RPC框架吞吐量的一个重要因素。常用的负载均衡算法包括：轮询（Round-Robin）、加权轮询（Weighted Round-Robin）、最少连接数（Least Connections）、一致性Hash（Consistent Hash）。")]),t._v(" "),a("h4",{attrs:{id:"_7-1-轮询-round-robin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-轮询-round-robin"}},[t._v("#")]),t._v(" 7.1 轮询（Round-Robin）")]),t._v(" "),a("p",[t._v("轮询（Round-Robin）负载均衡算法是依次轮询服务提供者节点，并且不会考虑服务提供者节点的实际负载情况。")]),t._v(" "),a("h4",{attrs:{id:"_7-2-加权轮询-weighted-round-robin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-加权轮询-weighted-round-robin"}},[t._v("#")]),t._v(" 7.2 加权轮询（Weighted Round-Robin）")]),t._v(" "),a("p",[t._v("加权轮询（Weighted Round-Robin）负载均衡算法在轮询（Round-Robin）算法的基础上，为每个服务提供者节点增加了权重系数，根据权重系数来为每个服务提供者节点分配不同比例的流量。并且权重系数可以根据服务提供者节点的实时负载情况进行调整，使集群节点的负载相对来说比较均衡。")]),t._v(" "),a("h4",{attrs:{id:"_7-3-最少连接数-least-connections"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-最少连接数-least-connections"}},[t._v("#")]),t._v(" 7.3 最少连接数（Least Connections）")]),t._v(" "),a("p",[t._v("最少连接数（Least Connections）负载均衡算法是服务消费者根据服务提供者节点当前的连接数进行负载均衡，服务消费者会选择连接数最少的一个服务提供者节点进行调用。")]),t._v(" "),a("h4",{attrs:{id:"_7-4-一致性hash-consistent-hash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-4-一致性hash-consistent-hash"}},[t._v("#")]),t._v(" 7.4 一致性Hash（Consistent Hash）")]),t._v(" "),a("p",[t._v("一致性Hash（Consistent Hash）负载均衡算法是一种特殊的Hash算法，它在逻辑上采用Hash环实现，通过Hash算法将对象和服务提供者节点放在Hash环上，为对象选择对应的服务提供者节点，例如，在Hash环上按照顺时针查找距离对象的Hash值最近的服务提供者节点。使用一致性Hash算法使得当服务提供者上线或下线时，不会造成Hash环上对象的大规模移动。")]),t._v(" "),a("h2",{attrs:{id:"五、本章总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、本章总结"}},[t._v("#")]),t._v(" 五、本章总结")]),t._v(" "),a("p",[t._v("本章首先介绍了RPC框架的背景知识，随后对RPC框架的整体架构设计进行了详细的分析。接下来，对RPC框架的核心技术点进行了深度剖析，涵盖：服务注册与发现、网络通信协议、序列化与反序列化、RPC的调用方式。线程模型、动态代理和负载均衡。")]),t._v(" "),a("p",[t._v("希望本章的内容能够为大家带来实质性的帮助。")]),t._v(" "),a("h2",{attrs:{id:"六、一点点建议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六、一点点建议"}},[t._v("#")]),t._v(" 六、一点点建议")]),t._v(" "),a("p",[t._v("咱们这个专栏属于实战类型比较强的专栏，加上咱们一起从零开始手撸的RPC框架会涉及众多的知识点。正所谓纸上得来终觉浅，绝知此事要躬行。冰河希望大家在学习这个专栏的时候勤动手，跟着专栏一起实现代码。期间要多动脑，多总结，这样才能够加深对各项知识点的理解。切忌眼高手低，学了半天却最终啥也没学会。")]),t._v(" "),a("p",[a("strong",[t._v("好了，今天的文章就到这儿吧，如果文章对你有点帮助，记得给冰河一键三连哦，欢迎将文章转发给更多的小伙伴，冰河将不胜感激~~")])]),t._v(" "),a("h2",{attrs:{id:"七、关于星球"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#七、关于星球"}},[t._v("#")]),t._v(" 七、关于星球")]),t._v(" "),a("p",[t._v("我会将《"),a("a",{attrs:{href:"https://binghe001.github.io/md/middleware/rpc/2022-06-25-%E3%80%8ARPC%E6%89%8B%E6%92%B8%E4%B8%93%E6%A0%8F%E3%80%8B-%E7%AC%AC1%E7%AB%A0-%E5%BC%80%E7%AF%87-%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E8%83%BD%E5%9C%A8%E5%AE%9E%E9%99%85%E5%9C%BA%E6%99%AF%E4%BD%BF%E7%94%A8%E7%9A%84RPC%E6%A1%86%E6%9E%B6.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("RPC手撸专栏"),a("OutboundLink")],1),t._v("》的源码获取方式放到知识星球中，同时在微信上会创建专门的知识星球群，冰河会在知识星球上和星球群里解答球友的提问。")]),t._v(" "),a("p",[t._v("今天，【冰河技术】知识星球再开放200张优惠券，还没上车的小伙伴赶紧啦，"),a("strong",[t._v("星球的球友们正在一起手撸可用于实际场景的高性能RPC框架")]),t._v("，再不上车就跟不上啦！！")]),t._v(" "),a("h3",{attrs:{id:"星球提供的服务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#星球提供的服务"}},[t._v("#")]),t._v(" 星球提供的服务")]),t._v(" "),a("p",[t._v("冰河整理了星球提供的一些服务，如下所示。")]),t._v(" "),a("p",[t._v("加入星球，你将获得：")]),t._v(" "),a("p",[t._v("1.学习从零开始手撸可用于实际场景的高性能RPC框架项目")]),t._v(" "),a("p",[t._v("2.学习SpringCloud Alibaba实战项目—从零开发微服务项目")]),t._v(" "),a("p",[t._v("3.学习高并发、大流量业务场景的解决方案，体验大厂真正的高并发、大流量的业务场景")]),t._v(" "),a("p",[t._v("4.学习进大厂必备技能：性能调优、并发编程、分布式、微服务、框架源码、中间件开发、项目实战")]),t._v(" "),a("p",[t._v("5.提供站点 https://binghe001.github.io 所有学习内容的指导、帮助")]),t._v(" "),a("p",[t._v("6.GitHub：https://github.com/binghe001/BingheGuide - 非常有价值的技术资料仓库，包括冰河所有的博客开放案例代码")]),t._v(" "),a("p",[t._v("7.可以发送你的简历到我的邮箱，提供简历批阅服务")]),t._v(" "),a("p",[t._v("8.提供技术问题、系统架构、学习成长、晋升答辩等各项内容的回答")]),t._v(" "),a("p",[t._v("9.定期的整理和分享出各类专属星球的技术小册、电子书、编程视频、PDF文件")]),t._v(" "),a("p",[t._v("10.定期组织技术直播分享，传道、授业、解惑，指导阶段瓶颈突破技巧")]),t._v(" "),a("h3",{attrs:{id:"如何加入星球"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何加入星球"}},[t._v("#")]),t._v(" 如何加入星球")]),t._v(" "),a("p",[t._v("加入星球：扫描优惠券二维码即可加入星球。")]),t._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"sa-2022-04-21-007","data-src":"https://binghe001.github.io/assets/images/microservices/springcloudalibaba/sa-2022-04-28-008.png",loading:"lazy"}})]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("扫码")]),t._v(" ：通过扫描优惠券二维码加入星球。")]),t._v(" "),a("li",[a("strong",[t._v("链接")]),t._v(" ：打开链接 "),a("a",{attrs:{href:"http://m6z.cn/6aeFbs",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://m6z.cn/6aeFbs"),a("OutboundLink")],1),t._v(" 加入星球。")]),t._v(" "),a("li",[a("strong",[t._v("回复")]),t._v(" ：在公众号 "),a("strong",[t._v("冰河技术")]),t._v(" 回复 "),a("strong",[t._v("星球")]),t._v(" 领取优惠券加入星球。")])]),t._v(" "),a("p",[a("strong",[t._v("特别提醒：")]),t._v(" 苹果用户进圈或续费，请加微信 "),a("strong",[t._v("hacker_binghe")]),t._v(" 扫二维码，或者去公众号 "),a("strong",[t._v("冰河技术")]),t._v(" 回复 "),a("strong",[t._v("星球")]),t._v(" 扫二维码加入星球。")]),t._v(" "),a("p",[a("strong",[t._v("好了，今天就到这儿吧，我是冰河，我们下期见~~")])]),t._v(" "),a("h2",{attrs:{id:"写在最后"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#写在最后"}},[t._v("#")]),t._v(" 写在最后")]),t._v(" "),a("p",[t._v("如果你觉得冰河写的还不错，请微信搜索并关注「 "),a("strong",[t._v("冰河技术")]),t._v(" 」微信公众号，跟冰河学习高并发、分布式、微服务、大数据、互联网和云原生技术，「 "),a("strong",[t._v("冰河技术")]),t._v(" 」微信公众号更新了大量技术专题，每一篇技术文章干货满满！不少读者已经通过阅读「 "),a("strong",[t._v("冰河技术")]),t._v(" 」微信公众号文章，吊打面试官，成功跳槽到大厂；也有不少读者实现了技术上的飞跃，成为公司的技术骨干！如果你也想像他们一样提升自己的能力，实现技术能力的飞跃，进大厂，升职加薪，那就关注「 "),a("strong",[t._v("冰河技术")]),t._v(" 」微信公众号吧，每天更新超硬核技术干货，让你对如何提升技术能力不再迷茫！")]),t._v(" "),a("h2",{attrs:{id:"加群交流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#加群交流"}},[t._v("#")]),t._v(" 加群交流")]),t._v(" "),a("p",[t._v("本群的宗旨是给大家提供一个良好的技术学习交流平台，所以杜绝一切广告！由于微信群人满 100 之后无法加入，请扫描下方二维码先添加作者 “冰河” 微信(hacker_binghe)，备注："),a("code",[t._v("学习加群")]),t._v("。")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:"https://binghe001.github.io/images/personal/hacker_binghe.jpg?raw=true",width:"180px"}}),t._v(" "),a("div",{staticStyle:{"font-size":"9px"}},[t._v("冰河微信")]),t._v(" "),a("br")]),t._v(" "),a("h2",{attrs:{id:"公众号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#公众号"}},[t._v("#")]),t._v(" 公众号")]),t._v(" "),a("p",[t._v("分享各种编程语言、开发技术、分布式与微服务架构、分布式数据库、分布式事务、云原生、大数据与云计算技术和渗透技术。另外，还会分享各种面试题和面试技巧。内容在 "),a("strong",[t._v("冰河技术")]),t._v(" 微信公众号首发，强烈建议大家关注。")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210426115714643.jpg?raw=true",width:"180px"}}),t._v(" "),a("div",{staticStyle:{"font-size":"9px"}},[t._v("公众号：冰河技术")]),t._v(" "),a("br")]),t._v(" "),a("h2",{attrs:{id:"星球"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#星球"}},[t._v("#")]),t._v(" 星球")]),t._v(" "),a("p",[t._v("加入星球 "),a("strong",[a("a",{attrs:{href:"http://m6z.cn/6aeFbs",target:"_blank",rel:"noopener noreferrer"}},[t._v("冰河技术"),a("OutboundLink")],1)]),t._v("，可以获得本站点所有学习内容的指导与帮助。如果你遇到不能独立解决的问题，也可以添加冰河的微信："),a("strong",[t._v("hacker_binghe")]),t._v("， 我们一起沟通交流。另外，在星球中不只能学到实用的硬核技术，还能学习"),a("strong",[t._v("实战项目")]),t._v("！")]),t._v(" "),a("p",[t._v("关注 "),a("a",{attrs:{href:"https://img-blog.csdnimg.cn/20210426115714643.jpg?raw=true",target:"_blank",rel:"noopener noreferrer"}},[t._v("冰河技术"),a("OutboundLink")],1),t._v("公众号，回复 "),a("code",[t._v("星球")]),t._v(" 可以获取入场优惠券。")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:"https://binghe001.github.io/images/personal/xingqiu.png?raw=true",width:"180px"}}),t._v(" "),a("div",{staticStyle:{"font-size":"9px"}},[t._v("知识星球：冰河技术")]),t._v(" "),a("br")])])}),[],!1,null,null,null);a.default=s.exports}}]);