(window.webpackJsonp=window.webpackJsonp||[]).push([[551],{856:function(t,s,a){"use strict";a.r(s);var e=a(7),r=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"sa实战-·《springcloud-alibaba实战》第20章-消息服务-rocketmq核心技术"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sa实战-·《springcloud-alibaba实战》第20章-消息服务-rocketmq核心技术"}},[t._v("#")]),t._v(" SA实战 ·《SpringCloud Alibaba实战》第20章-消息服务：RocketMQ核心技术")]),t._v(" "),s("p",[t._v("作者：冰河\n"),s("br"),t._v("星球："),s("a",{attrs:{href:"http://m6z.cn/6aeFbs",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://m6z.cn/6aeFbs"),s("OutboundLink")],1),t._v(" "),s("br"),t._v("博客："),s("a",{attrs:{href:"https://binghe.gitcode.host",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://binghe.gitcode.host"),s("OutboundLink")],1),t._v(" "),s("br"),t._v("文章汇总："),s("a",{attrs:{href:"https://binghe.gitcode.host/md/all/all.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://binghe.gitcode.host/md/all/all.html"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("strong",[t._v("大家好，我是冰河~~")])]),t._v(" "),s("blockquote",[s("p",[t._v("一不小心《"),s("a",{attrs:{href:"https://mp.weixin.qq.com/mp/appmsgalbum?__biz=Mzg4MjU0OTM1OA==&action=getalbum&album_id=2337104419664084992&scene=173&from_msgid=2247500408&from_itemidx=1&count=3&nolastread=1#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("SpringCloud Alibaba实战"),s("OutboundLink")],1),t._v("》专栏都更新到第20章了，再不上车就跟不上了，小伙伴们快跟上啊！")]),t._v(" "),s("p",[t._v("注意：本项目完整源码加入 "),s("strong",[s("a",{attrs:{href:"https://public.zsxq.com/groups/48848484411888.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("冰河技术"),s("OutboundLink")],1)]),t._v(" 知识星球即可获取，文末有入场方式。")]),t._v(" "),s("p",[t._v("本文大部分内容来源：https://github.com/apache/rocketmq/tree/master/docs/cn")])]),t._v(" "),s("p",[t._v("在《"),s("a",{attrs:{href:"https://mp.weixin.qq.com/mp/appmsgalbum?__biz=Mzg4MjU0OTM1OA==&action=getalbum&album_id=2337104419664084992&scene=173&from_msgid=2247500408&from_itemidx=1&count=3&nolastread=1#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("SpringCloud Alibaba实战"),s("OutboundLink")],1),t._v("》专栏前面的文章中，我们实现了用户微服务、商品微服务和订单微服务之间的远程调用，并且实现了服务调用的负载均衡。也基于阿里开源的Sentinel实现了服务的限流与容错，并详细介绍了Sentinel的核心技术与配置规则。简单介绍了服务网关，并对SpringCloud Gateway的核心架构进行了简要说明，也在项目中整合了SpringCloud Gateway网关实现了通过网关访问后端微服务.")]),t._v(" "),s("p",[t._v("同时，也基于SpringCloud Gateway整合Sentinel实现了网关的限流功能，详细介绍了SpringCloud Gateway网关的核心技术。在链路追踪章节，我们开始简单介绍了分布式链路追踪技术与解决方案，随后在项目中整合Sleuth实现了链路追踪，并使用Sleuth整合ZipKin实现了分布式链路追踪的可视化 。")]),t._v(" "),s("p",[t._v("在消息服务章节，我们介绍了MQ的使用场景，引入MQ后的注意事项以及MQ的选型对比，在项目中整合了RocketMQ。接下来，再给大家介绍下RocketMQ的核心技术。")]),t._v(" "),s("h2",{attrs:{id:"本章总览"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#本章总览"}},[t._v("#")]),t._v(" 本章总览")]),t._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"sa-2022-05-20-010","data-src":"https://binghe.gitcode.host/assets/images/microservices/springcloudalibaba/sa-2022-05-20-010.png",loading:"lazy"}})]),t._v(" "),s("h2",{attrs:{id:"idea启动rocketmq源码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#idea启动rocketmq源码"}},[t._v("#")]),t._v(" IDEA启动RocketMQ源码")]),t._v(" "),s("p",[t._v("RocketMQ是使用Java语言开发的，我们可以将RocketMQ的源码导入到IDEA中，使用IDEA来导入并启动RocketMQ的源码，接下来就可以在IDEA中调试RocketMQ的源码。")]),t._v(" "),s("h3",{attrs:{id:"下载rocketmq源码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#下载rocketmq源码"}},[t._v("#")]),t._v(" 下载RocketMQ源码")]),t._v(" "),s("p",[t._v("到链接"),s("a",{attrs:{href:"https://github.com/apache/rocketmq/releases/tag/rocketmq-all-4.9.3",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/apache/rocketmq/releases/tag/rocketmq-all-4.9.3"),s("OutboundLink")],1),t._v("下载RocketMQ源码，这里下载的是RocketMQ 4.9.3版本。")]),t._v(" "),s("h3",{attrs:{id:"将源码导入idea"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#将源码导入idea"}},[t._v("#")]),t._v(" 将源码导入IDEA")]),t._v(" "),s("p",[t._v("将RocketMQ下载的本地后，就可以将RocketMQ的源码导入到IDEA中了。导入后的项目结构如下所示。")]),t._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"sa-2022-05-20-001","data-src":"https://binghe.gitcode.host/assets/images/microservices/springcloudalibaba/sa-2022-05-20-001.png",loading:"lazy"}})]),t._v(" "),s("h3",{attrs:{id:"编译rocketmq源码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编译rocketmq源码"}},[t._v("#")]),t._v(" 编译RocketMQ源码")]),t._v(" "),s("p",[t._v("在IDEA编译RocketMQ源码，需要在IDEA中配置Maven编译，如下所示。")]),t._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"sa-2022-05-20-002","data-src":"https://binghe.gitcode.host/assets/images/microservices/springcloudalibaba/sa-2022-05-20-002.png",loading:"lazy"}})]),t._v(" "),s("p",[t._v("如图所示，需要输入名称、在Working directory对应的地方选择要使用Maven编译的项目目录，这里，选择RocketMQ项目的根目录，表示编译整个RocketMQ项目。在Command line对应的文本框中输入"),s("code",[t._v("clean install -Dmaven.test.skip=true")]),t._v("来编译RocketMQ源码。其中"),s("code",[t._v("-Dmaven.test.skip=true")]),t._v("参数表示在编译的过程中忽略测试。")]),t._v(" "),s("p",[t._v("配置好之后点击IDEA右上角的运行按钮开始编译RocketMQ的源码，如下所示。")]),t._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"sa-2022-05-20-003","data-src":"https://binghe.gitcode.host/assets/images/microservices/springcloudalibaba/sa-2022-05-20-003.png",loading:"lazy"}})]),t._v(" "),s("p",[t._v("在编译的过程中可能会下载一些RocketMQ源码依赖的Jar包和插件，等待一会即可。")]),t._v(" "),s("h3",{attrs:{id:"启动rocketmq"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#启动rocketmq"}},[t._v("#")]),t._v(" 启动RocketMQ")]),t._v(" "),s("p",[t._v("在IDEA中启动RocketMQ的源码需要进行简单的配置，具体的步骤如下所示。")]),t._v(" "),s("p",[t._v("（1）在RocketMQ源码的根目录下创建conf目录，并将distribution模块下的conf目录的broker.conf文件、logback_namesrv.xml文件和logback_broker.xml文件复制到RocketMQ源码的根目录下创建conf目录中，如下所示。")]),t._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"sa-2022-05-20-004","data-src":"https://binghe.gitcode.host/assets/images/microservices/springcloudalibaba/sa-2022-05-20-004.png",loading:"lazy"}})]),t._v(" "),s("p",[t._v("（2）文件复制完成后，修改broker.conf文件的内容，修改后的内容如下所示。")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("brokerClusterName "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" DefaultCluster\nbrokerName "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" broker-a\nbrokerId "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\ndeleteWhen "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 04\nfileReservedTime "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("48")]),t._v("\nbrokerRole "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ASYNC_MASTER\nflushDiskType "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ASYNC_FLUSH\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 自动创建Topic")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("autoCreateTopicEnable")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("true\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# nameServ地址")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("namesrvAddr")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("127.0")]),t._v(".0.1:9876\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 存储路径")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("storePathRootDir")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("E:/RocketMQ/data/rocketmq/dataDir\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# commitLog路径")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("storePathCommitLog")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("E:/RocketMQ/data/rocketmq/dataDir/commitlog\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 消息队列存储路径")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("storePathConsumeQueue")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("E:/RocketMQ/data/rocketmq/dataDir/consumequeue\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 消息索引存储路径")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("storePathIndex")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("E:/RocketMQ/data/rocketmq/dataDir/index\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# checkpoint文件路径")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("storeCheckpoint")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("E:/RocketMQ/data/rocketmq/dataDir/checkpoint\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# abort文件存储路径")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("abortFile")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("E:/RocketMQ/data/rocketmq/dataDir/abort\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br")])]),s("p",[t._v("（3）配置NameServer启动项，NameServer的启动类，在RocketMQ源码的namesrv模块中，如下所示。")]),t._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"sa-2022-05-20-005","data-src":"https://binghe.gitcode.host/assets/images/microservices/springcloudalibaba/sa-2022-05-20-005.png",loading:"lazy"}})]),t._v(" "),s("p",[t._v("启动前先要在IDEA中配置下NameServer的启动类，如下所示。")]),t._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"sa-2022-05-20-006","data-src":"https://binghe.gitcode.host/assets/images/microservices/springcloudalibaba/sa-2022-05-20-006.png",loading:"lazy"}})]),t._v(" "),s("p",[t._v("启动NameServer前重点是要在IDEA的Environment variables中配置ROCKETMQ_HOME环境变量，这里，ROCKETMQ_HOME环境变量的值是RocketMQ源码的根目录。")]),t._v(" "),s("p",[t._v("（4）配置Broker启动项，Broker的启动类，在RocketMQ源码中的broker模块中，如下所示。")]),t._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"sa-2022-05-20-007","data-src":"https://binghe.gitcode.host/assets/images/microservices/springcloudalibaba/sa-2022-05-20-007.png",loading:"lazy"}})]),t._v(" "),s("p",[t._v("启动前先要在IDEA中配置下Broker的启动类，如下所示。")]),t._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"sa-2022-05-20-008","data-src":"https://binghe.gitcode.host/assets/images/microservices/springcloudalibaba/sa-2022-05-20-008.png",loading:"lazy"}})]),t._v(" "),s("p",[t._v("配置Broker的启动类时，除了要在Environment variables后面配置ROCKETMQ_HOME环境变量外，还要在Program arguments后面配置启动RocketMQ时加载的配置文件，这里的配置文件使用-c参数指向RocketMQ源码根目录下的conf目录中的broker.conf文件，如下所示。")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-c")]),t._v(" D:"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Workspaces"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("myself"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("rocketmq"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("src"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("rocketmq-rocketmq-all-4.9.3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("conf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("broker.conf\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("（5）在IDEA中分别启动RocketMQ的NameServer和Broker，可以发现在启动NameServer的控制台输出了如下日志信息。")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("The Name Server boot success. "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("serializeType")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("JSON\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("在启动Broker的控制台输出了如下日志信息。")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("The broker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("broker-a, "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v(".184.1:10911"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" boot success. "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("serializeType")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("JSON and name server is "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("127.0")]),t._v(".0.1:9876\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("此时，我们到在broker.conf文件中配置的RocketMQ存储数据的根目录"),s("code",[t._v("E:/RocketMQ/data/rocketmq/dataDir")]),t._v("下查看具体信息，如下所示。")]),t._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"sa-2022-05-20-009","data-src":"https://binghe.gitcode.host/assets/images/microservices/springcloudalibaba/sa-2022-05-20-009.png",loading:"lazy"}})]),t._v(" "),s("p",[t._v("可以看到，在"),s("code",[t._v("E:/RocketMQ/data/rocketmq/dataDir")]),t._v("目录下生成了RocketMQ相关的存储信息。")]),t._v(" "),s("p",[t._v("综上，我们成功在IDEA中导入并启动了RocketMQ的源码。接下来，小伙伴们就可以在IDEA中随心所欲的调试RocketMQ的源码了。")]),t._v(" "),s("h2",{attrs:{id:"rocketmq基本概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rocketmq基本概念"}},[t._v("#")]),t._v(" RocketMQ基本概念")]),t._v(" "),s("h3",{attrs:{id:"消息模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#消息模型"}},[t._v("#")]),t._v(" 消息模型")]),t._v(" "),s("p",[t._v("RocketMQ主要由 Producer、Broker、Consumer 三部分组成，其中Producer 负责生产消息，Consumer 负责消费消息，Broker 负责存储消息。Broker 在实际部署过程中对应一台服务器，每个 Broker 可以存储多个Topic的消息，每个Topic的消息也可以分片存储于不同的 Broker。Message Queue 用于存储消息的物理地址，每个Topic中的消息地址存储于多个 Message Queue 中。ConsumerGroup 由多个Consumer 实例构成。")]),t._v(" "),s("h3",{attrs:{id:"消息生产者"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#消息生产者"}},[t._v("#")]),t._v(" 消息生产者")]),t._v(" "),s("p",[t._v("负责生产消息，一般由业务系统负责生产消息。一个消息生产者会把业务应用系统里产生的消息发送到broker服务器。RocketMQ提供多种发送方式，同步发送、异步发送、顺序发送、单向发送。同步和异步方式均需要Broker返回确认信息，单向发送不需要。")]),t._v(" "),s("h3",{attrs:{id:"消息消费者"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#消息消费者"}},[t._v("#")]),t._v(" 消息消费者")]),t._v(" "),s("p",[t._v("负责消费消息，一般是后台系统负责异步消费。一个消息消费者会从Broker服务器拉取消息、并将其提供给应用程序。从用户应用的角度而言提供了两种消费形式：拉取式消费、推动式消费。")]),t._v(" "),s("h3",{attrs:{id:"主题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#主题"}},[t._v("#")]),t._v(" 主题")]),t._v(" "),s("p",[t._v("表示一类消息的集合，每个主题包含若干条消息，每条消息只能属于一个主题，是RocketMQ进行消息订阅的基本单位。")]),t._v(" "),s("h3",{attrs:{id:"代理服务器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代理服务器"}},[t._v("#")]),t._v(" 代理服务器")]),t._v(" "),s("p",[t._v("消息中转角色，负责存储消息、转发消息。代理服务器在RocketMQ系统中负责接收从生产者发送来的消息并存储、同时为消费者的拉取请求作准备。代理服务器也存储消息相关的元数据，包括消费者组、消费进度偏移和主题和队列消息等。")]),t._v(" "),s("h3",{attrs:{id:"名字服务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#名字服务"}},[t._v("#")]),t._v(" 名字服务")]),t._v(" "),s("p",[t._v("名称服务充当路由消息的提供者。生产者或消费者能够通过名字服务查找各主题相应的Broker IP列表。多个Namesrv实例组成集群，但相互独立，没有信息交换。")]),t._v(" "),s("h3",{attrs:{id:"拉取式消费"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#拉取式消费"}},[t._v("#")]),t._v(" 拉取式消费")]),t._v(" "),s("p",[t._v("Consumer消费的一种类型，应用通常主动调用Consumer的拉消息方法从Broker服务器拉消息、主动权由应用控制。一旦获取了批量消息，应用就会启动消费过程。")]),t._v(" "),s("h3",{attrs:{id:"推动式消费"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#推动式消费"}},[t._v("#")]),t._v(" 推动式消费")]),t._v(" "),s("p",[t._v("Consumer消费的一种类型，该模式下Broker收到数据后会主动推送给消费端，该消费模式一般实时性较高。")]),t._v(" "),s("h3",{attrs:{id:"生产者组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生产者组"}},[t._v("#")]),t._v(" 生产者组")]),t._v(" "),s("p",[t._v("同一类Producer的集合，这类Producer发送同一类消息且发送逻辑一致。如果发送的是事务消息且原始生产者在发送之后崩溃，则Broker服务器会联系同一生产者组的其他生产者实例以提交或回溯消费。")]),t._v(" "),s("h3",{attrs:{id:"消费者组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#消费者组"}},[t._v("#")]),t._v(" 消费者组")]),t._v(" "),s("p",[t._v("同一类Consumer的集合，这类Consumer通常消费同一类消息且消费逻辑一致。消费者组使得在消息消费方面，实现负载均衡和容错的目标变得非常容易。要注意的是，消费者组的消费者实例必须订阅完全相同的Topic。RocketMQ 支持两种消息模式：集群消费（Clustering）和广播消费（Broadcasting）。")]),t._v(" "),s("h3",{attrs:{id:"集群消费"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#集群消费"}},[t._v("#")]),t._v(" 集群消费")]),t._v(" "),s("p",[t._v("集群消费模式下,相同Consumer Group的每个Consumer实例平均分摊消息。")]),t._v(" "),s("h3",{attrs:{id:"广播消费"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#广播消费"}},[t._v("#")]),t._v(" 广播消费")]),t._v(" "),s("p",[t._v("广播消费模式下，相同Consumer Group的每个Consumer实例都接收全量的消息。")]),t._v(" "),s("h3",{attrs:{id:"普通顺序消息"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#普通顺序消息"}},[t._v("#")]),t._v(" 普通顺序消息")]),t._v(" "),s("p",[t._v("普通顺序消费模式下，消费者通过同一个消息队列（ Topic 分区，称作 Message Queue） 收到的消息是有顺序的，不同消息队列收到的消息则可能是无顺序的。")]),t._v(" "),s("h3",{attrs:{id:"严格顺序消息"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#严格顺序消息"}},[t._v("#")]),t._v(" 严格顺序消息")]),t._v(" "),s("p",[t._v("严格顺序消息模式下，消费者收到的所有消息均是有顺序的。")]),t._v(" "),s("h3",{attrs:{id:"消息"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#消息"}},[t._v("#")]),t._v(" 消息")]),t._v(" "),s("p",[t._v("消息系统所传输信息的物理载体，生产和消费数据的最小单位，每条消息必须属于一个主题。RocketMQ中每个消息拥有唯一的Message ID，且可以携带具有业务标识的Key。系统提供了通过Message ID和Key查询消息的功能。")]),t._v(" "),s("h3",{attrs:{id:"标签"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#标签"}},[t._v("#")]),t._v(" 标签")]),t._v(" "),s("p",[t._v("为消息设置的标志，用于同一主题下区分不同类型的消息。来自同一业务单元的消息，可以根据不同业务目的在同一主题下设置不同标签。标签能够有效地保持代码的清晰度和连贯性，并优化RocketMQ提供的查询系统。消费者可以根据Tag实现对不同子主题的不同消费逻辑，实现更好的扩展性。")]),t._v(" "),s("h2",{attrs:{id:"rocketmq特性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rocketmq特性"}},[t._v("#")]),t._v(" RocketMQ特性")]),t._v(" "),s("h3",{attrs:{id:"订阅与发布"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#订阅与发布"}},[t._v("#")]),t._v(" 订阅与发布")]),t._v(" "),s("p",[t._v("消息的发布是指某个生产者向某个topic发送消息；消息的订阅是指某个消费者关注了某个topic中带有某些tag的消息，进而从该topic消费数据。")]),t._v(" "),s("h3",{attrs:{id:"消息顺序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#消息顺序"}},[t._v("#")]),t._v(" 消息顺序")]),t._v(" "),s("p",[t._v("消息有序指的是一类消息消费时，能按照发送的顺序来消费。例如：一个订单产生了三条消息分别是订单创建、订单付款、订单完成。消费时要按照这个顺序消费才能有意义，但是同时订单之间是可以并行消费的。RocketMQ可以严格的保证消息有序。")]),t._v(" "),s("p",[t._v("顺序消息分为全局顺序消息与分区顺序消息，全局顺序是指某个Topic下的所有消息都要保证顺序；部分顺序消息只要保证每一组消息被顺序消费即可。")]),t._v(" "),s("ul",[s("li",[t._v("全局顺序\n对于指定的一个 Topic，所有消息按照严格的先入先出（FIFO）的顺序进行发布和消费。\n适用场景：性能要求不高，所有的消息严格按照 FIFO 原则进行消息发布和消费的场景")]),t._v(" "),s("li",[t._v("分区顺序\n对于指定的一个 Topic，所有消息根据 sharding key 进行区块分区。 同一个分区内的消息按照严格的 FIFO 顺序进行发布和消费。 Sharding key 是顺序消息中用来区分不同分区的关键字段，和普通消息的 Key 是完全不同的概念。\n适用场景：性能要求高，以 sharding key 作为分区字段，在同一个区块中严格的按照 FIFO 原则进行消息发布和消费的场景。")])]),t._v(" "),s("h3",{attrs:{id:"消息过滤"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#消息过滤"}},[t._v("#")]),t._v(" 消息过滤")]),t._v(" "),s("p",[t._v("RocketMQ的消费者可以根据Tag进行消息过滤，也支持自定义属性过滤。消息过滤目前是在Broker端实现的，优点是减少了对于Consumer无用消息的网络传输，缺点是增加了Broker的负担、而且实现相对复杂。")]),t._v(" "),s("h3",{attrs:{id:"消息可靠性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#消息可靠性"}},[t._v("#")]),t._v(" 消息可靠性")]),t._v(" "),s("p",[t._v("RocketMQ支持消息的高可靠，影响消息可靠性的几种情况：")]),t._v(" "),s("ol",[s("li",[t._v("Broker非正常关闭")]),t._v(" "),s("li",[t._v("Broker异常Crash")]),t._v(" "),s("li",[t._v("OS Crash")]),t._v(" "),s("li",[t._v("机器掉电，但是能立即恢复供电情况")]),t._v(" "),s("li",[t._v("机器无法开机（可能是cpu、主板、内存等关键设备损坏）")]),t._v(" "),s("li",[t._v("磁盘设备损坏")])]),t._v(" "),s("p",[t._v("1)、2)、3)、4) 四种情况都属于硬件资源可立即恢复情况，RocketMQ在这四种情况下能保证消息不丢，或者丢失少量数据（依赖刷盘方式是同步还是异步）。")]),t._v(" "),s("p",[t._v("5)、6)属于单点故障，且无法恢复，一旦发生，在此单点上的消息全部丢失。RocketMQ在这两种情况下，通过异步复制，可保证99%的消息不丢，但是仍然会有极少量的消息可能丢失。通过同步双写技术可以完全避免单点，同步双写势必会影响性能，适合对消息可靠性要求极高的场合，例如与Money相关的应用。注：RocketMQ从3.0版本开始支持同步双写。")]),t._v(" "),s("h3",{attrs:{id:"至少一次"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#至少一次"}},[t._v("#")]),t._v(" 至少一次")]),t._v(" "),s("p",[t._v("至少一次(At least Once)指每个消息必须投递一次。Consumer先Pull消息到本地，消费完成后，才向服务器返回ack，如果没有消费一定不会ack消息，所以RocketMQ可以很好的支持此特性。")]),t._v(" "),s("h3",{attrs:{id:"回溯消费"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#回溯消费"}},[t._v("#")]),t._v(" 回溯消费")]),t._v(" "),s("p",[t._v("回溯消费是指Consumer已经消费成功的消息，由于业务上需求需要重新消费，要支持此功能，Broker在向Consumer投递成功消息后，消息仍然需要保留。并且重新消费一般是按照时间维度，例如由于Consumer系统故障，恢复后需要重新消费1小时前的数据，那么Broker要提供一种机制，可以按照时间维度来回退消费进度。RocketMQ支持按照时间回溯消费，时间维度精确到毫秒。")]),t._v(" "),s("h3",{attrs:{id:"事务消息"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事务消息"}},[t._v("#")]),t._v(" 事务消息")]),t._v(" "),s("p",[t._v("RocketMQ事务消息（Transactional Message）是指应用本地事务和发送消息操作可以被定义到全局事务中，要么同时成功，要么同时失败。RocketMQ的事务消息提供类似 X/Open XA 的分布事务功能，通过事务消息能达到分布式事务的最终一致。")]),t._v(" "),s("h3",{attrs:{id:"定时消息"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#定时消息"}},[t._v("#")]),t._v(" 定时消息")]),t._v(" "),s("p",[t._v("定时消息（延迟队列）是指消息发送到broker后，不会立即被消费，等待特定时间投递给真正的topic。\nbroker有配置项messageDelayLevel，默认值为“1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h”，18个level。可以配置自定义messageDelayLevel。注意，messageDelayLevel是broker的属性，不属于某个topic。发消息时，设置delayLevel等级即可：msg.setDelayLevel(level)。level有以下三种情况：")]),t._v(" "),s("ul",[s("li",[t._v("level == 0，消息为非延迟消息")]),t._v(" "),s("li",[t._v("1<=level<=maxLevel，消息延迟特定时间，例如level==1，延迟1s")]),t._v(" "),s("li",[t._v("level > maxLevel，则level== maxLevel，例如level==20，延迟2h")])]),t._v(" "),s("p",[t._v("定时消息会暂存在名为SCHEDULE_TOPIC_XXXX的topic中，并根据delayTimeLevel存入特定的queue，queueId = delayTimeLevel – 1，即一个queue只存相同延迟的消息，保证具有相同发送延迟的消息能够顺序消费。broker会调度地消费SCHEDULE_TOPIC_XXXX，将消息写入真实的topic。")]),t._v(" "),s("p",[t._v("需要注意的是，定时消息会在第一次写入和调度写入真实topic时都会计数，因此发送数量、tps都会变高。")]),t._v(" "),s("h3",{attrs:{id:"消息重试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#消息重试"}},[t._v("#")]),t._v(" 消息重试")]),t._v(" "),s("p",[t._v("Consumer消费消息失败后，要提供一种重试机制，令消息再消费一次。Consumer消费消息失败通常可以认为有以下几种情况：")]),t._v(" "),s("ul",[s("li",[t._v("由于消息本身的原因，例如反序列化失败，消息数据本身无法处理（例如话费充值，当前消息的手机号被注销，无法充值）等。这种错误通常需要跳过这条消息，再消费其它消息，而这条失败的消息即使立刻重试消费，99%也不成功，所以最好提供一种定时重试机制，即过10秒后再重试。")]),t._v(" "),s("li",[t._v("由于依赖的下游应用服务不可用，例如db连接不可用，外系统网络不可达等。遇到这种错误，即使跳过当前失败的消息，消费其他消息同样也会报错。这种情况建议应用sleep 30s，再消费下一条消息，这样可以减轻Broker重试消息的压力。")])]),t._v(" "),s("p",[t._v("RocketMQ会为每个消费组都设置一个Topic名称为“%RETRY%+consumerGroup”的重试队列（这里需要注意的是，这个Topic的重试队列是针对消费组，而不是针对每个Topic设置的），用于暂时保存因为各种异常而导致Consumer端无法消费的消息。")]),t._v(" "),s("p",[t._v("考虑到异常恢复起来需要一些时间，会为重试队列设置多个重试级别，每个重试级别都有与之对应的重新投递延时，重试次数越多投递延时就越大。RocketMQ对于重试消息的处理是先保存至Topic名称为“SCHEDULE_TOPIC_XXXX”的延迟队列中，后台定时任务按照对应的时间进行Delay后重新保存至“%RETRY%+consumerGroup”的重试队列中。")]),t._v(" "),s("h3",{attrs:{id:"消息重投"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#消息重投"}},[t._v("#")]),t._v(" 消息重投")]),t._v(" "),s("p",[t._v("生产者在发送消息时，同步消息失败会重投，异步消息有重试，oneway没有任何保证。消息重投保证消息尽可能发送成功、不丢失，但可能会造成消息重复，消息重复在RocketMQ中是无法避免的问题。消息重复在一般情况下不会发生，当出现消息量大、网络抖动，消息重复就会是大概率事件。另外，生产者主动重发、consumer负载变化也会导致重复消息。如下方法可以设置消息重试策略：")]),t._v(" "),s("ul",[s("li",[t._v("retryTimesWhenSendFailed:同步发送失败重投次数，默认为2，因此生产者会最多尝试发送retryTimesWhenSendFailed + 1次。不会选择上次失败的broker，尝试向其他broker发送，最大程度保证消息不丢。超过重投次数，抛出异常，由客户端保证消息不丢。当出现RemotingException、MQClientException和部分MQBrokerException时会重投。")]),t._v(" "),s("li",[t._v("retryTimesWhenSendAsyncFailed:异步发送失败重试次数，异步重试不会选择其他broker，仅在同一个broker上做重试，不保证消息不丢。")]),t._v(" "),s("li",[t._v("retryAnotherBrokerWhenNotStoreOK:消息刷盘（主或备）超时或slave不可用（返回状态非SEND_OK），是否尝试发送到其他broker，默认false。十分重要消息可以开启。")])]),t._v(" "),s("h3",{attrs:{id:"流量控制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#流量控制"}},[t._v("#")]),t._v(" 流量控制")]),t._v(" "),s("p",[t._v("生产者流控，因为broker处理能力达到瓶颈；消费者流控，因为消费能力达到瓶颈。")]),t._v(" "),s("p",[t._v("生产者流控：")]),t._v(" "),s("ul",[s("li",[t._v("commitLog文件被锁时间超过osPageCacheBusyTimeOutMills时，参数默认为1000ms，返回流控。")]),t._v(" "),s("li",[t._v("如果开启transientStorePoolEnable == true，且broker为异步刷盘的主机，且transientStorePool中资源不足，拒绝当前send请求，返回流控。")]),t._v(" "),s("li",[t._v("broker每隔10ms检查send请求队列头部请求的等待时间，如果超过waitTimeMillsInSendQueue，默认200ms，拒绝当前send请求，返回流控。")]),t._v(" "),s("li",[t._v("broker通过拒绝send 请求方式实现流量控制。")])]),t._v(" "),s("p",[t._v("注意，生产者流控，不会尝试消息重投。")]),t._v(" "),s("p",[t._v("消费者流控：")]),t._v(" "),s("ul",[s("li",[t._v("消费者本地缓存消息数超过pullThresholdForQueue时，默认1000。")]),t._v(" "),s("li",[t._v("消费者本地缓存消息大小超过pullThresholdSizeForQueue时，默认100MB。")]),t._v(" "),s("li",[t._v("消费者本地缓存消息跨度超过consumeConcurrentlyMaxSpan时，默认2000。")])]),t._v(" "),s("p",[t._v("消费者流控的结果是降低拉取频率。")]),t._v(" "),s("h3",{attrs:{id:"死信队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#死信队列"}},[t._v("#")]),t._v(" 死信队列")]),t._v(" "),s("p",[t._v("死信队列用于处理无法被正常消费的消息。当一条消息初次消费失败，消息队列会自动进行消息重试；达到最大重试次数后，若消费依然失败，则表明消费者在正常情况下无法正确地消费该消息，此时，消息队列 不会立刻将消息丢弃，而是将其发送到该消费者对应的特殊队列中。")]),t._v(" "),s("p",[t._v("RocketMQ将这种正常情况下无法被消费的消息称为死信消息（Dead-Letter Message），将存储死信消息的特殊队列称为死信队列（Dead-Letter Queue）。在RocketMQ中，可以通过使用console控制台对死信队列中的消息进行重发来使得消费者实例再次进行消费。")]),t._v(" "),s("h2",{attrs:{id:"rocketmq最佳实践"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rocketmq最佳实践"}},[t._v("#")]),t._v(" RocketMQ最佳实践")]),t._v(" "),s("h3",{attrs:{id:"生产者"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生产者"}},[t._v("#")]),t._v(" 生产者")]),t._v(" "),s("h4",{attrs:{id:"发送消息注意事项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#发送消息注意事项"}},[t._v("#")]),t._v(" 发送消息注意事项")]),t._v(" "),s("p",[s("strong",[t._v("Tags的使用")])]),t._v(" "),s("p",[t._v('一个应用尽可能用一个Topic，而消息子类型则可以用tags来标识。tags可以由应用自由设置，只有生产者在发送消息设置了tags，消费方在订阅消息时才可以利用tags通过broker做消息过滤：message.setTags("TagA")。')]),t._v(" "),s("p",[s("strong",[t._v("Keys的使用")])]),t._v(" "),s("p",[t._v("每个消息在业务层面的唯一标识码要设置到keys字段，方便将来定位消息丢失问题。服务器会为每个消息创建索引（哈希索引），应用可以通过topic、key来查询这条消息内容，以及消息被谁消费。由于是哈希索引，请务必保证key尽可能唯一，这样可以避免潜在的哈希冲突。")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 订单Id   ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" orderId "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"20034568923546"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   \nmessage"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setKeys")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("orderId"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   \n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[s("strong",[t._v("日志的打印")])]),t._v(" "),s("p",[t._v("消息发送成功或者失败要打印消息日志，务必要打印SendResult和key字段。send消息方法只要不抛异常，就代表发送成功。发送成功会有多个状态，在sendResult里定义。以下对每个状态进行说明：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("SEND_OK")])])]),t._v(" "),s("p",[t._v("消息发送成功。要注意的是消息发送成功也不意味着它是可靠的。要确保不会丢失任何消息，还应启用同步Master服务器或同步刷盘，即SYNC_MASTER或SYNC_FLUSH。")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("FLUSH_DISK_TIMEOUT")])])]),t._v(" "),s("p",[t._v("消息发送成功但是服务器刷盘超时。此时消息已经进入服务器队列（内存），只有服务器宕机，消息才会丢失。消息存储配置参数中可以设置刷盘方式和同步刷盘时间长度，如果Broker服务器设置了刷盘方式为同步刷盘，即FlushDiskType=SYNC_FLUSH（默认为异步刷盘方式），当Broker服务器未在同步刷盘时间内（默认为5s）完成刷盘，则将返回该状态——刷盘超时。")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("FLUSH_SLAVE_TIMEOUT")])])]),t._v(" "),s("p",[t._v("消息发送成功，但是服务器同步到Slave时超时。此时消息已经进入服务器队列，只有服务器宕机，消息才会丢失。如果Broker服务器的角色是同步Master，即SYNC_MASTER（默认是异步Master即ASYNC_MASTER），并且从Broker服务器未在同步刷盘时间（默认为5秒）内完成与主服务器的同步，则将返回该状态——数据同步到Slave服务器超时。")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("SLAVE_NOT_AVAILABLE")])])]),t._v(" "),s("p",[t._v("消息发送成功，但是此时Slave不可用。如果Broker服务器的角色是同步Master，即SYNC_MASTER（默认是异步Master服务器即ASYNC_MASTER），但没有配置slave Broker服务器，则将返回该状态——无Slave服务器可用。")]),t._v(" "),s("h4",{attrs:{id:"消息发送失败处理方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#消息发送失败处理方式"}},[t._v("#")]),t._v(" 消息发送失败处理方式")]),t._v(" "),s("p",[t._v("Producer的send方法本身支持内部重试，重试逻辑如下：")]),t._v(" "),s("ul",[s("li",[t._v("至多重试2次。")]),t._v(" "),s("li",[t._v("如果同步模式发送失败，则轮转到下一个Broker，如果异步模式发送失败，则只会在当前Broker进行重试。这个方法的总耗时时间不超过sendMsgTimeout设置的值，默认10s。")]),t._v(" "),s("li",[t._v("如果本身向broker发送消息产生超时异常，就不会再重试。")])]),t._v(" "),s("p",[t._v("以上策略也是在一定程度上保证了消息可以发送成功。如果业务对消息可靠性要求比较高，建议应用增加相应的重试逻辑：比如调用send同步方法发送失败时，则尝试将消息存储到db，然后由后台线程定时重试，确保消息一定到达Broker。")]),t._v(" "),s("p",[t._v("上述db重试方式为什么没有集成到MQ客户端内部做，而是要求应用自己去完成，主要基于以下几点考虑：首先，MQ的客户端设计为无状态模式，方便任意的水平扩展，且对机器资源的消耗仅仅是cpu、内存、网络。其次，如果MQ客户端内部集成一个KV存储模块，那么数据只有同步落盘才能较可靠，而同步落盘本身性能开销较大，所以通常会采用异步落盘，又由于应用关闭过程不受MQ运维人员控制，可能经常会发生 kill -9 这样暴力方式关闭，造成数据没有及时落盘而丢失。第三，Producer所在机器的可靠性较低，一般为虚拟机，不适合存储重要数据。综上，建议重试过程交由应用来控制。")]),t._v(" "),s("h4",{attrs:{id:"选择oneway形式发送"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#选择oneway形式发送"}},[t._v("#")]),t._v(" 选择oneway形式发送")]),t._v(" "),s("p",[t._v("通常消息的发送是这样一个过程：")]),t._v(" "),s("ul",[s("li",[t._v("客户端发送请求到服务器")]),t._v(" "),s("li",[t._v("服务器处理请求")]),t._v(" "),s("li",[t._v("服务器向客户端返回应答")])]),t._v(" "),s("p",[t._v("所以，一次消息发送的耗时时间是上述三个步骤的总和，而某些场景要求耗时非常短，但是对可靠性要求并不高，例如日志收集类应用，此类应用可以采用oneway形式调用，oneway形式只发送请求不等待应答，而发送请求在客户端实现层面仅仅是一个操作系统系统调用的开销，即将数据写入客户端的socket缓冲区，此过程耗时通常在微秒级。")]),t._v(" "),s("h3",{attrs:{id:"消费者"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#消费者"}},[t._v("#")]),t._v(" 消费者")]),t._v(" "),s("h4",{attrs:{id:"消费过程幂等"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#消费过程幂等"}},[t._v("#")]),t._v(" 消费过程幂等")]),t._v(" "),s("p",[t._v("RocketMQ无法避免消息重复（Exactly-Once），所以如果业务对消费重复非常敏感，务必要在业务层面进行去重处理。可以借助关系数据库进行去重。首先需要确定消息的唯一键，可以是msgId，也可以是消息内容中的唯一标识字段，例如订单Id等。在消费之前判断唯一键是否在关系数据库中存在。如果不存在则插入，并消费，否则跳过。（实际过程要考虑原子性问题，判断是否存在可以尝试插入，如果报主键冲突，则插入失败，直接跳过）")]),t._v(" "),s("p",[t._v("msgId一定是全局唯一标识符，但是实际使用中，可能会存在相同的消息有两个不同msgId的情况（消费者主动重发、因客户端重投机制导致的重复等），这种情况就需要使业务字段进行重复消费。")]),t._v(" "),s("h4",{attrs:{id:"消费速度慢的处理方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#消费速度慢的处理方式"}},[t._v("#")]),t._v(" 消费速度慢的处理方式")]),t._v(" "),s("p",[s("strong",[t._v("提高消费并行度")])]),t._v(" "),s("p",[t._v("绝大部分消息消费行为都属于 IO 密集型，即可能是操作数据库，或者调用 RPC，这类消费行为的消费速度在于后端数据库或者外系统的吞吐量，通过增加消费并行度，可以提高总的消费吞吐量，但是并行度增加到一定程度，反而会下降。所以，应用必须要设置合理的并行度。 如下有几种修改消费并行度的方法：")]),t._v(" "),s("ul",[s("li",[t._v("同一个 ConsumerGroup 下，通过增加 Consumer 实例数量来提高并行度（需要注意的是超过订阅队列数的 Consumer 实例无效）。可以通过加机器，或者在已有机器启动多个进程的方式。")]),t._v(" "),s("li",[t._v("提高单个 Consumer 的消费并行线程，通过修改参数 consumeThreadMin、consumeThreadMax实现。")])]),t._v(" "),s("p",[s("strong",[t._v("批量方式消费")])]),t._v(" "),s("p",[t._v("某些业务流程如果支持批量方式消费，则可以很大程度上提高消费吞吐量，例如订单扣款类应用，一次处理一个订单耗时 1 s，一次处理 10 个订单可能也只耗时 2 s，这样即可大幅度提高消费的吞吐量，通过设置 consumer的 consumeMessageBatchMaxSize 返个参数，默认是 1，即一次只消费一条消息，例如设置为 N，那么每次消费的消息数小于等于 N。")]),t._v(" "),s("p",[s("strong",[t._v("跳过非重要消息")])]),t._v(" "),s("p",[t._v("发生消息堆积时，如果消费速度一直追不上发送速度，如果业务对数据要求不高的话，可以选择丢弃不重要的消息。例如，当某个队列的消息数堆积到100000条以上，则尝试丢弃部分或全部消息，这样就可以快速追上发送消息的速度。示例代码如下：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConsumeConcurrentlyStatus")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("consumeMessage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MessageExt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" msgs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConsumeConcurrentlyContext")]),t._v(" context"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" offset "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" msgs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getQueueOffset")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" maxOffset "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n        msgs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getProperty")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Message")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PROPERTY_MAX_OFFSET")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" diff "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Long")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseLong")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("maxOffset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" offset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("diff "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// TODO 消息堆积情况的特殊处理")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConsumeConcurrentlyStatus")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CONSUME_SUCCESS")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// TODO 正常消费过程")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConsumeConcurrentlyStatus")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CONSUME_SUCCESS")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("    \n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br")])]),s("p",[s("strong",[t._v("优化每条消息消费过程")])]),t._v(" "),s("p",[t._v("举例如下，某条消息的消费过程如下：")]),t._v(" "),s("ul",[s("li",[t._v("根据消息从 DB 查询【数据 1】")]),t._v(" "),s("li",[t._v("根据消息从 DB 查询【数据 2】")]),t._v(" "),s("li",[t._v("复杂的业务计算")]),t._v(" "),s("li",[t._v("向 DB 插入【数据 3】")]),t._v(" "),s("li",[t._v("向 DB 插入【数据 4】")])]),t._v(" "),s("p",[t._v("这条消息的消费过程中有4次与 DB的 交互，如果按照每次 5ms 计算，那么总共耗时 20ms，假设业务计算耗时 5ms，那么总过耗时 25ms，所以如果能把 4 次 DB 交互优化为 2 次，那么总耗时就可以优化到 15ms，即总体性能提高了 40%。所以应用如果对时延敏感的话，可以把DB部署在SSD硬盘，相比于SCSI磁盘，前者的RT会小很多。")]),t._v(" "),s("h4",{attrs:{id:"消费打印日志"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#消费打印日志"}},[t._v("#")]),t._v(" 消费打印日志")]),t._v(" "),s("p",[t._v("如果消息量较少，建议在消费入口方法打印消息，消费耗时等，方便后续排查问题。")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConsumeConcurrentlyStatus")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("consumeMessage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MessageExt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" msgs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConsumeConcurrentlyContext")]),t._v(" context"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    log"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("info")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"RECEIVE_MSG_BEGIN: "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" msgs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// TODO 正常消费过程")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConsumeConcurrentlyStatus")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CONSUME_SUCCESS")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("   \n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("p",[t._v("如果能打印每条消息消费耗时，那么在排查消费慢等线上问题时，会更方便。")]),t._v(" "),s("h4",{attrs:{id:"其他消费建议"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其他消费建议"}},[t._v("#")]),t._v(" 其他消费建议")]),t._v(" "),s("p",[s("strong",[t._v("关于消费者和订阅")])]),t._v(" "),s("p",[t._v("第一件需要注意的事情是，不同的消费者组可以独立的消费一些 topic，并且每个消费者组都有自己的消费偏移量，请确保同一组内的每个消费者订阅信息保持一致。")]),t._v(" "),s("p",[s("strong",[t._v("关于有序消息")])]),t._v(" "),s("p",[t._v("消费者将锁定每个消息队列，以确保他们被逐个消费，虽然这将会导致性能下降，但是当你关心消息顺序的时候会很有用。我们不建议抛出异常，你可以返回 ConsumeOrderlyStatus.SUSPEND_CURRENT_QUEUE_A_MOMENT 作为替代。")]),t._v(" "),s("p",[s("strong",[t._v("关于并发消费")])]),t._v(" "),s("p",[t._v("顾名思义，消费者将并发消费这些消息，建议你使用它来获得良好性能，我们不建议抛出异常，你可以返回 ConsumeConcurrentlyStatus.RECONSUME_LATER 作为替代。")]),t._v(" "),s("p",[s("strong",[t._v("关于消费状态Consume Status")])]),t._v(" "),s("p",[t._v("对于并发的消费监听器，你可以返回 RECONSUME_LATER 来通知消费者现在不能消费这条消息，并且希望可以稍后重新消费它。然后，你可以继续消费其他消息。对于有序的消息监听器，因为你关心它的顺序，所以不能跳过消息，但是你可以返回SUSPEND_CURRENT_QUEUE_A_MOMENT 告诉消费者等待片刻。")]),t._v(" "),s("p",[s("strong",[t._v("关于Blocking")])]),t._v(" "),s("p",[t._v("不建议阻塞监听器，因为它会阻塞线程池，并最终可能会终止消费进程")]),t._v(" "),s("p",[s("strong",[t._v("关于线程数设置")])]),t._v(" "),s("p",[t._v("消费者使用 ThreadPoolExecutor 在内部对消息进行消费，所以你可以通过设置 setConsumeThreadMin 或 setConsumeThreadMax 来改变它。")]),t._v(" "),s("p",[s("strong",[t._v("关于消费位点")])]),t._v(" "),s("p",[t._v("当建立一个新的消费者组时，需要决定是否需要消费已经存在于 Broker 中的历史消息CONSUME_FROM_LAST_OFFSET 将会忽略历史消息，并消费之后生成的任何消息。CONSUME_FROM_FIRST_OFFSET 将会消费每个存在于 Broker 中的信息。你也可以使用 CONSUME_FROM_TIMESTAMP 来消费在指定时间戳后产生的消息。")]),t._v(" "),s("h3",{attrs:{id:"broker"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#broker"}},[t._v("#")]),t._v(" Broker")]),t._v(" "),s("h4",{attrs:{id:"broker-角色"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#broker-角色"}},[t._v("#")]),t._v(" Broker 角色")]),t._v(" "),s("p",[t._v("Broker 角色分为 ASYNC_MASTER（异步主机）、SYNC_MASTER（同步主机）以及SLAVE（从机）。如果对消息的可靠性要求比较严格，可以采用 SYNC_MASTER加SLAVE的部署方式。如果对消息可靠性要求不高，可以采用ASYNC_MASTER加SLAVE的部署方式。如果只是测试方便，则可以选择仅ASYNC_MASTER或仅SYNC_MASTER的部署方式。")]),t._v(" "),s("h4",{attrs:{id:"flushdisktype"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#flushdisktype"}},[t._v("#")]),t._v(" FlushDiskType")]),t._v(" "),s("p",[t._v("SYNC_FLUSH（同步刷新）相比于ASYNC_FLUSH（异步处理）会损失很多性能，但是也更可靠，所以需要根据实际的业务场景做好权衡。")]),t._v(" "),s("h4",{attrs:{id:"broker-配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#broker-配置"}},[t._v("#")]),t._v(" Broker 配置")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("参数名")]),t._v(" "),s("th",[t._v("默认值")]),t._v(" "),s("th",[t._v("说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("listenPort")]),t._v(" "),s("td",[t._v("10911")]),t._v(" "),s("td",[t._v("接受客户端连接的监听端口")])]),t._v(" "),s("tr",[s("td",[t._v("namesrvAddr")]),t._v(" "),s("td",[t._v("null")]),t._v(" "),s("td",[t._v("nameServer 地址")])]),t._v(" "),s("tr",[s("td",[t._v("brokerIP1")]),t._v(" "),s("td",[t._v("网卡的 InetAddress")]),t._v(" "),s("td",[t._v("当前 broker 监听的 IP")])]),t._v(" "),s("tr",[s("td",[t._v("brokerIP2")]),t._v(" "),s("td",[t._v("跟 brokerIP1 一样")]),t._v(" "),s("td",[t._v("存在主从 broker 时，如果在 broker 主节点上配置了 brokerIP2 属性，broker 从节点会连接主节点配置的 brokerIP2 进行同步")])]),t._v(" "),s("tr",[s("td",[t._v("brokerName")]),t._v(" "),s("td",[t._v("null")]),t._v(" "),s("td",[t._v("broker 的名称")])]),t._v(" "),s("tr",[s("td",[t._v("brokerClusterName")]),t._v(" "),s("td",[t._v("DefaultCluster")]),t._v(" "),s("td",[t._v("本 broker 所属的 Cluser 名称")])]),t._v(" "),s("tr",[s("td",[t._v("brokerId")]),t._v(" "),s("td",[t._v("0")]),t._v(" "),s("td",[t._v("broker id, 0 表示 master, 其他的正整数表示 slave")])]),t._v(" "),s("tr",[s("td",[t._v("storePathRootDir")]),t._v(" "),s("td",[t._v("$HOME/store/")]),t._v(" "),s("td",[t._v("存储根路径")])]),t._v(" "),s("tr",[s("td",[t._v("storePathCommitLog")]),t._v(" "),s("td",[t._v("$HOME/store/commitlog/")]),t._v(" "),s("td",[t._v("存储 commit log 的路径")])]),t._v(" "),s("tr",[s("td",[t._v("mappedFileSizeCommitLog")]),t._v(" "),s("td",[t._v("1024 * 1024 * 1024(1G)")]),t._v(" "),s("td",[t._v("commit log 的映射文件大小")])]),t._v(" "),s("tr",[s("td",[t._v("deleteWhen")]),t._v(" "),s("td",[t._v("04")]),t._v(" "),s("td",[t._v("在每天的什么时间删除已经超过文件保留时间的 commit log")])]),t._v(" "),s("tr",[s("td",[t._v("fileReservedTime")]),t._v(" "),s("td",[t._v("72")]),t._v(" "),s("td",[t._v("以小时计算的文件保留时间")])]),t._v(" "),s("tr",[s("td",[t._v("brokerRole")]),t._v(" "),s("td",[t._v("ASYNC_MASTER")]),t._v(" "),s("td",[t._v("SYNC_MASTER/ASYNC_MASTER/SLAVE")])]),t._v(" "),s("tr",[s("td",[t._v("flushDiskType")]),t._v(" "),s("td",[t._v("ASYNC_FLUSH")]),t._v(" "),s("td",[t._v("SYNC_FLUSH/ASYNC_FLUSH SYNC_FLUSH 模式下的 broker 保证在收到确认生产者之前将消息刷盘。ASYNC_FLUSH 模式下的 broker 则利用刷盘一组消息的模式，可以取得更好的性能。")])])])]),t._v(" "),s("h3",{attrs:{id:"nameserver"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nameserver"}},[t._v("#")]),t._v(" NameServer")]),t._v(" "),s("p",[t._v("RocketMQ 中，Name Servers 被设计用来做简单的路由管理。其职责包括：")]),t._v(" "),s("ul",[s("li",[t._v("Brokers 定期向每个名称服务器注册路由数据。")]),t._v(" "),s("li",[t._v("名称服务器为客户端，包括生产者，消费者和命令行客户端提供最新的路由信息。")])]),t._v(" "),s("h3",{attrs:{id:"客户端配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#客户端配置"}},[t._v("#")]),t._v(" 客户端配置")]),t._v(" "),s("p",[t._v("相对于RocketMQ的Broker集群，生产者和消费者都是客户端。本小节主要描述生产者和消费者公共的行为配置。")]),t._v(" "),s("h4",{attrs:{id:"客户端寻址方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#客户端寻址方式"}},[t._v("#")]),t._v(" 客户端寻址方式")]),t._v(" "),s("p",[t._v("RocketMQ可以令客户端找到Name Server, 然后通过Name Server再找到Broker。如下所示有多种配置方式，优先级由高到低，高优先级会覆盖低优先级。")]),t._v(" "),s("ul",[s("li",[t._v("代码中指定Name Server地址，多个namesrv地址之间用分号分割")])]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("producer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setNamesrvAddr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"192.168.0.1:9876;192.168.0.2:9876"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \nconsumer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setNamesrvAddr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"192.168.0.1:9876;192.168.0.2:9876"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("ul",[s("li",[t._v("Java启动参数中指定Name Server地址")])]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-Drocketmq.namesrv.addr")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v(".0.1:9876"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v(".0.2:9876  \n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("ul",[s("li",[t._v("环境变量指定Name Server地址")])]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("export")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("NAMESRV_ADDR")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v(".0.1:9876"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v(".0.2:9876   \n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("ul",[s("li",[t._v("HTTP静态服务器寻址（默认）")])]),t._v(" "),s("p",[t._v("客户端启动后，会定时访问一个静态HTTP服务器，地址如下："),s("a",{attrs:{href:"http://jmenv.tbsite.net:8080/rocketmq/nsaddr",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://jmenv.tbsite.net:8080/rocketmq/nsaddr"),s("OutboundLink")],1),t._v("，这个URL的返回内容如下：")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v(".0.1:9876"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v(".0.2:9876   \n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("客户端默认每隔2分钟访问一次这个HTTP服务器，并更新本地的Name Server地址。URL已经在代码中硬编码，可通过修改/etc/hosts文件来改变要访问的服务器，例如在/etc/hosts增加如下配置：")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10.232")]),t._v(".22.67    jmenv.tbsite.net   \n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("推荐使用HTTP静态服务器寻址方式，好处是客户端部署简单，且Name Server集群可以热升级。")]),t._v(" "),s("h4",{attrs:{id:"客户端配置-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#客户端配置-2"}},[t._v("#")]),t._v(" 客户端配置")]),t._v(" "),s("p",[t._v('DefaultMQProducer、TransactionMQProducer、DefaultMQPushConsumer、DefaultMQPullConsumer都继承于ClientConfig类，ClientConfig为客户端的公共配置类。客户端的配置都是get、set形式，每个参数都可以用spring来配置，也可以在代码中配置，例如namesrvAddr这个参数可以这样配置，producer.setNamesrvAddr("192.168.0.1:9876")，其他参数同理。')]),t._v(" "),s("p",[s("strong",[t._v("客户端的公共配置")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("参数名")]),t._v(" "),s("th",[t._v("默认值")]),t._v(" "),s("th",[t._v("说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("namesrvAddr")]),t._v(" "),s("td"),t._v(" "),s("td",[t._v("Name Server地址列表，多个NameServer地址用分号隔开")])]),t._v(" "),s("tr",[s("td",[t._v("clientIP")]),t._v(" "),s("td",[t._v("本机IP")]),t._v(" "),s("td",[t._v("客户端本机IP地址，某些机器会发生无法识别客户端IP地址情况，需要应用在代码中强制指定")])]),t._v(" "),s("tr",[s("td",[t._v("instanceName")]),t._v(" "),s("td",[t._v("DEFAULT")]),t._v(" "),s("td",[t._v("客户端实例名称，客户端创建的多个Producer、Consumer实际是共用一个内部实例（这个实例包含网络连接、线程资源等）")])]),t._v(" "),s("tr",[s("td",[t._v("clientCallbackExecutorThreads")]),t._v(" "),s("td",[t._v("4")]),t._v(" "),s("td",[t._v("通信层异步回调线程数")])]),t._v(" "),s("tr",[s("td",[t._v("pollNameServerInteval")]),t._v(" "),s("td",[t._v("30000")]),t._v(" "),s("td",[t._v("轮询Name Server间隔时间，单位毫秒")])]),t._v(" "),s("tr",[s("td",[t._v("heartbeatBrokerInterval")]),t._v(" "),s("td",[t._v("30000")]),t._v(" "),s("td",[t._v("向Broker发送心跳间隔时间，单位毫秒")])]),t._v(" "),s("tr",[s("td",[t._v("persistConsumerOffsetInterval")]),t._v(" "),s("td",[t._v("5000")]),t._v(" "),s("td",[t._v("持久化Consumer消费进度间隔时间，单位毫秒")])])])]),t._v(" "),s("p",[s("strong",[t._v("Producer配置")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("参数名")]),t._v(" "),s("th",[t._v("默认值")]),t._v(" "),s("th",[t._v("说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("producerGroup")]),t._v(" "),s("td",[t._v("DEFAULT_PRODUCER")]),t._v(" "),s("td",[t._v("Producer组名，多个Producer如果属于一个应用，发送同样的消息，则应该将它们归为同一组")])]),t._v(" "),s("tr",[s("td",[t._v("createTopicKey")]),t._v(" "),s("td",[t._v("TBW102")]),t._v(" "),s("td",[t._v("在发送消息时，自动创建服务器不存在的topic，需要指定Key，该Key可用于配置发送消息所在topic的默认路由。")])]),t._v(" "),s("tr",[s("td",[t._v("defaultTopicQueueNums")]),t._v(" "),s("td",[t._v("4")]),t._v(" "),s("td",[t._v("在发送消息，自动创建服务器不存在的topic时，默认创建的队列数")])]),t._v(" "),s("tr",[s("td",[t._v("sendMsgTimeout")]),t._v(" "),s("td",[t._v("3000")]),t._v(" "),s("td",[t._v("发送消息超时时间，单位毫秒")])]),t._v(" "),s("tr",[s("td",[t._v("compressMsgBodyOverHowmuch")]),t._v(" "),s("td",[t._v("4096")]),t._v(" "),s("td",[t._v("消息Body超过多大开始压缩（Consumer收到消息会自动解压缩），单位字节")])]),t._v(" "),s("tr",[s("td",[t._v("retryAnotherBrokerWhenNotStoreOK")]),t._v(" "),s("td",[t._v("FALSE")]),t._v(" "),s("td",[t._v("如果发送消息返回sendResult，但是sendStatus!=SEND_OK，是否重试发送")])]),t._v(" "),s("tr",[s("td",[t._v("retryTimesWhenSendFailed")]),t._v(" "),s("td",[t._v("2")]),t._v(" "),s("td",[t._v("如果消息发送失败，最大重试次数，该参数只对同步发送模式起作用")])]),t._v(" "),s("tr",[s("td",[t._v("maxMessageSize")]),t._v(" "),s("td",[t._v("4MB")]),t._v(" "),s("td",[t._v("客户端限制的消息大小，超过报错，同时服务端也会限制，所以需要跟服务端配合使用。")])]),t._v(" "),s("tr",[s("td",[t._v("transactionCheckListener")]),t._v(" "),s("td"),t._v(" "),s("td",[t._v("事务消息回查监听器，如果发送事务消息，必须设置")])]),t._v(" "),s("tr",[s("td",[t._v("checkThreadPoolMinSize")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("Broker回查Producer事务状态时，线程池最小线程数")])]),t._v(" "),s("tr",[s("td",[t._v("checkThreadPoolMaxSize")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("Broker回查Producer事务状态时，线程池最大线程数")])]),t._v(" "),s("tr",[s("td",[t._v("checkRequestHoldMax")]),t._v(" "),s("td",[t._v("2000")]),t._v(" "),s("td",[t._v("Broker回查Producer事务状态时，Producer本地缓冲请求队列大小")])]),t._v(" "),s("tr",[s("td",[t._v("RPCHook")]),t._v(" "),s("td",[t._v("null")]),t._v(" "),s("td",[t._v("该参数是在Producer创建时传入的，包含消息发送前的预处理和消息响应后的处理两个接口，用户可以在第一个接口中做一些安全控制或者其他操作。")])])])]),t._v(" "),s("p",[s("strong",[t._v("PushConsumer配置")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("参数名")]),t._v(" "),s("th",[t._v("默认值")]),t._v(" "),s("th",[t._v("说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("consumerGroup")]),t._v(" "),s("td",[t._v("DEFAULT_CONSUMER")]),t._v(" "),s("td",[t._v("Consumer组名，多个Consumer如果属于一个应用，订阅同样的消息，且消费逻辑一致，则应该将它们归为同一组")])]),t._v(" "),s("tr",[s("td",[t._v("messageModel")]),t._v(" "),s("td",[t._v("CLUSTERING")]),t._v(" "),s("td",[t._v("消费模型支持集群消费和广播消费两种")])]),t._v(" "),s("tr",[s("td",[t._v("consumeFromWhere")]),t._v(" "),s("td",[t._v("CONSUME_FROM_LAST_OFFSET")]),t._v(" "),s("td",[t._v("Consumer启动后，默认从上次消费的位置开始消费，这包含两种情况：一种是上次消费的位置未过期，则消费从上次中止的位置进行；一种是上次消费位置已经过期，则从当前队列第一条消息开始消费")])]),t._v(" "),s("tr",[s("td",[t._v("consumeTimestamp")]),t._v(" "),s("td",[t._v("半个小时前")]),t._v(" "),s("td",[t._v("只有当consumeFromWhere值为CONSUME_FROM_TIMESTAMP时才起作用。")])]),t._v(" "),s("tr",[s("td",[t._v("allocateMessageQueueStrategy")]),t._v(" "),s("td",[t._v("AllocateMessageQueueAveragely")]),t._v(" "),s("td",[t._v("Rebalance算法实现策略")])]),t._v(" "),s("tr",[s("td",[t._v("subscription")]),t._v(" "),s("td"),t._v(" "),s("td",[t._v("订阅关系")])]),t._v(" "),s("tr",[s("td",[t._v("messageListener")]),t._v(" "),s("td"),t._v(" "),s("td",[t._v("消息监听器")])]),t._v(" "),s("tr",[s("td",[t._v("offsetStore")]),t._v(" "),s("td"),t._v(" "),s("td",[t._v("消费进度存储")])]),t._v(" "),s("tr",[s("td",[t._v("consumeThreadMin")]),t._v(" "),s("td",[t._v("20")]),t._v(" "),s("td",[t._v("消费线程池最小线程数")])]),t._v(" "),s("tr",[s("td",[t._v("consumeThreadMax")]),t._v(" "),s("td",[t._v("20")]),t._v(" "),s("td",[t._v("消费线程池最大线程数")])]),t._v(" "),s("tr",[s("td",[t._v("consumeConcurrentlyMaxSpan")]),t._v(" "),s("td",[t._v("2000")]),t._v(" "),s("td",[t._v("单队列并行消费允许的最大跨度")])]),t._v(" "),s("tr",[s("td",[t._v("pullThresholdForQueue")]),t._v(" "),s("td",[t._v("1000")]),t._v(" "),s("td",[t._v("拉消息本地队列缓存消息最大数")])]),t._v(" "),s("tr",[s("td",[t._v("pullInterval")]),t._v(" "),s("td",[t._v("0")]),t._v(" "),s("td",[t._v("拉消息间隔，由于是长轮询，所以为0，但是如果应用为了流控，也可以设置大于0的值，单位毫秒")])]),t._v(" "),s("tr",[s("td",[t._v("consumeMessageBatchMaxSize")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("批量消费，一次消费多少条消息")])]),t._v(" "),s("tr",[s("td",[t._v("pullBatchSize")]),t._v(" "),s("td",[t._v("32")]),t._v(" "),s("td",[t._v("批量拉消息，一次最多拉多少条")])])])]),t._v(" "),s("p",[s("strong",[t._v("PullConsumer配置")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("参数名")]),t._v(" "),s("th",[t._v("默认值")]),t._v(" "),s("th",[t._v("说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("consumerGroup")]),t._v(" "),s("td",[t._v("DEFAULT_CONSUMER")]),t._v(" "),s("td",[t._v("Consumer组名，多个Consumer如果属于一个应用，订阅同样的消息，且消费逻辑一致，则应该将它们归为同一组")])]),t._v(" "),s("tr",[s("td",[t._v("brokerSuspendMaxTimeMillis")]),t._v(" "),s("td",[t._v("20000")]),t._v(" "),s("td",[t._v("长轮询，Consumer拉消息请求在Broker挂起最长时间，单位毫秒")])]),t._v(" "),s("tr",[s("td",[t._v("consumerTimeoutMillisWhenSuspend")]),t._v(" "),s("td",[t._v("30000")]),t._v(" "),s("td",[t._v("长轮询，Consumer拉消息请求在Broker挂起超过指定时间，客户端认为超时，单位毫秒")])]),t._v(" "),s("tr",[s("td",[t._v("consumerPullTimeoutMillis")]),t._v(" "),s("td",[t._v("10000")]),t._v(" "),s("td",[t._v("非长轮询，拉消息超时时间，单位毫秒")])]),t._v(" "),s("tr",[s("td",[t._v("messageModel")]),t._v(" "),s("td",[t._v("BROADCASTING")]),t._v(" "),s("td",[t._v("消息支持两种模式：集群消费和广播消费")])]),t._v(" "),s("tr",[s("td",[t._v("messageQueueListener")]),t._v(" "),s("td"),t._v(" "),s("td",[t._v("监听队列变化")])]),t._v(" "),s("tr",[s("td",[t._v("offsetStore")]),t._v(" "),s("td"),t._v(" "),s("td",[t._v("消费进度存储")])]),t._v(" "),s("tr",[s("td",[t._v("registerTopics")]),t._v(" "),s("td"),t._v(" "),s("td",[t._v("注册的topic集合")])]),t._v(" "),s("tr",[s("td",[t._v("allocateMessageQueueStrategy")]),t._v(" "),s("td",[t._v("AllocateMessageQueueAveragely")]),t._v(" "),s("td",[t._v("Rebalance算法实现策略")])])])]),t._v(" "),s("p",[s("strong",[t._v("Message数据结构")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("字段名")]),t._v(" "),s("th",[t._v("默认值")]),t._v(" "),s("th",[t._v("说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("Topic")]),t._v(" "),s("td",[t._v("null")]),t._v(" "),s("td",[t._v("必填，消息所属topic的名称")])]),t._v(" "),s("tr",[s("td",[t._v("Body")]),t._v(" "),s("td",[t._v("null")]),t._v(" "),s("td",[t._v("必填，消息体")])]),t._v(" "),s("tr",[s("td",[t._v("Tags")]),t._v(" "),s("td",[t._v("null")]),t._v(" "),s("td",[t._v("选填，消息标签，方便服务器过滤使用。目前只支持每个消息设置一个tag")])]),t._v(" "),s("tr",[s("td",[t._v("Keys")]),t._v(" "),s("td",[t._v("null")]),t._v(" "),s("td",[t._v("选填，代表这条消息的业务关键词，服务器会根据keys创建哈希索引，设置后，可以在Console系统根据Topic、Keys来查询消息，由于是哈希索引，请尽可能保证key唯一，例如订单号，商品Id等。")])]),t._v(" "),s("tr",[s("td",[t._v("Flag")]),t._v(" "),s("td",[t._v("0")]),t._v(" "),s("td",[t._v("选填，完全由应用来设置，RocketMQ不做干预")])]),t._v(" "),s("tr",[s("td",[t._v("DelayTimeLevel")]),t._v(" "),s("td",[t._v("0")]),t._v(" "),s("td",[t._v("选填，消息延时级别，0表示不延时，大于0会延时特定的时间才会被消费")])]),t._v(" "),s("tr",[s("td",[t._v("WaitStoreMsgOK")]),t._v(" "),s("td",[t._v("TRUE")]),t._v(" "),s("td",[t._v("选填，表示消息是否在服务器落盘后才返回应答。")])])])]),t._v(" "),s("h3",{attrs:{id:"系统配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#系统配置"}},[t._v("#")]),t._v(" 系统配置")]),t._v(" "),s("p",[t._v("本小节主要介绍系统（JVM/OS）相关的配置。")]),t._v(" "),s("h4",{attrs:{id:"jvm选项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jvm选项"}},[t._v("#")]),t._v(" JVM选项")]),t._v(" "),s("p",[t._v("推荐使用最新发布的JDK 1.8版本。通过设置相同的Xms和Xmx值来防止JVM调整堆大小以获得更好的性能。简单的JVM配置如下所示：")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-server")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-Xms8g")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-Xmx8g")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-Xmn4g")]),t._v("   \n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("如果您不关心RocketMQ Broker的启动时间，还有一种更好的选择，就是通过“预触摸”Java堆以确保在JVM初始化期间每个页面都将被分配。那些不关心启动时间的人可以启用它：")]),t._v(" "),s("p",[t._v("-XX:+AlwaysPreTouch")]),t._v(" "),s("p",[t._v("禁用偏置锁定可能会减少JVM暂停。")]),t._v(" "),s("p",[t._v("-XX:-UseBiasedLocking")]),t._v(" "),s("p",[t._v("至于垃圾回收，建议使用带JDK 1.8的G1收集器。")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-XX:+UseG1GC")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-XX:G1HeapRegionSize")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("16m   \n"),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-XX:G1ReservePercent")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("25")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-XX:InitiatingHeapOccupancyPercent")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("这些GC选项看起来有点激进，但事实证明它在我们的生产环境中具有良好的性能。另外不要把-XX:MaxGCPauseMillis的值设置太小，否则JVM将使用一个小的年轻代来实现这个目标，这将导致非常频繁的minor GC，所以建议使用rolling GC日志文件：")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-XX:+UseGCLogFileRotation")]),t._v("   \n"),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-XX:NumberOfGCLogFiles")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-XX:GCLogFileSize")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("30m\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("如果写入GC文件会增加代理的延迟，可以考虑将GC日志文件重定向到内存文件系统：")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("-Xloggc:/dev/shm/mq_gc_%p.log123   \n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("h4",{attrs:{id:"linux内核参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#linux内核参数"}},[t._v("#")]),t._v(" Linux内核参数")]),t._v(" "),s("p",[t._v("os.sh脚本在bin文件夹中列出了许多内核参数，可以进行微小的更改然后用于生产用途。下面的参数需要注意，更多细节请参考/proc/sys/vm/*的"),s("a",{attrs:{href:"https://www.kernel.org/doc/Documentation/sysctl/vm.txt",target:"_blank",rel:"noopener noreferrer"}},[t._v("文档"),s("OutboundLink")],1)]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("vm.extra_free_kbytes")]),t._v("，告诉VM在后台回收（kswapd）启动的阈值与直接回收（通过分配进程）的阈值之间保留额外的可用内存。RocketMQ使用此参数来避免内存分配中的长延迟。（与具体内核版本相关）")]),t._v(" "),s("li",[s("strong",[t._v("vm.min_free_kbytes")]),t._v("，如果将其设置为低于1024KB，将会巧妙的将系统破坏，并且系统在高负载下容易出现死锁。")]),t._v(" "),s("li",[s("strong",[t._v("vm.max_map_count")]),t._v("，限制一个进程可能具有的最大内存映射区域数。RocketMQ将使用mmap加载CommitLog和ConsumeQueue，因此建议将为此参数设置较大的值。（agressiveness --\x3e aggressiveness）")]),t._v(" "),s("li",[s("strong",[t._v("vm.swappiness")]),t._v("，定义内核交换内存页面的积极程度。较高的值会增加攻击性，较低的值会减少交换量。建议将值设置为10来避免交换延迟。")]),t._v(" "),s("li",[s("strong",[t._v("File descriptor limits")]),t._v("，RocketMQ需要为文件（CommitLog和ConsumeQueue）和网络连接打开文件描述符。我们建议设置文件描述符的值为655350。")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Performance_Tuning_Guide/ch06s04s02.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Disk scheduler"),s("OutboundLink")],1),t._v("，RocketMQ建议使用I/O截止时间调度器，它试图为请求提供有保证的延迟。")])]),t._v(" "),s("p",{attrs:{align:"right"}},[s("font",{attrs:{size:"1"}},[t._v("注意：本章内容大部分内容来源：https://github.com/apache/rocketmq/tree/master/docs/cn")])],1),t._v(" "),s("p",[s("strong",[t._v("好了，今天我们就到儿吧，限于篇幅，文中并未给出完整的案例源代码，想要完整源代码的小伙伴可加入【冰河技术】知识星球获取源码。也可以加我微信：hacker_binghe，一起交流技术。")])]),t._v(" "),s("p",[s("strong",[t._v("另外，一不小心就写了20章了，小伙伴们你们再不上车就真的跟不上了！！！")])]),t._v(" "),s("h2",{attrs:{id:"星球服务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#星球服务"}},[t._v("#")]),t._v(" 星球服务")]),t._v(" "),s("p",[t._v("加入星球，你将获得：")]),t._v(" "),s("p",[t._v("1.项目学习：微服务入门必备的SpringCloud  Alibaba实战项目、手写RPC项目—所有大厂都需要的项目【含上百个经典面试题】、深度解析Spring6核心技术—只要学习Java就必须深度掌握的框架【含数十个经典思考题】、Seckill秒杀系统项目—进大厂必备高并发、高性能和高可用技能。")]),t._v(" "),s("p",[t._v("2.框架源码：手写RPC项目—所有大厂都需要的项目【含上百个经典面试题】、深度解析Spring6核心技术—只要学习Java就必须深度掌握的框架【含数十个经典思考题】。")]),t._v(" "),s("p",[t._v("3.硬核技术：深入理解高并发系列（全册）、深入理解JVM系列（全册）、深入浅出Java设计模式（全册）、MySQL核心知识（全册）。")]),t._v(" "),s("p",[t._v("4.技术小册：深入理解高并发编程（第1版）、深入理解高并发编程（第2版）、从零开始手写RPC框架、SpringCloud  Alibaba实战、冰河的渗透实战笔记、MySQL核心知识手册、Spring IOC核心技术、Nginx核心技术、面经手册等。")]),t._v(" "),s("p",[t._v("5.技术与就业指导：提供相关就业辅导和未来发展指引，冰河从初级程序员不断沉淀，成长，突破，一路成长为互联网资深技术专家，相信我的经历和经验对你有所帮助。")]),t._v(" "),s("p",[t._v("冰河的知识星球是一个简单、干净、纯粹交流技术的星球，不吹水，目前加入享5折优惠，价值远超门票。加入星球的用户，记得添加冰河微信：hacker_binghe，冰河拉你进星球专属VIP交流群。")]),t._v(" "),s("h2",{attrs:{id:"星球重磅福利"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#星球重磅福利"}},[t._v("#")]),t._v(" 星球重磅福利")]),t._v(" "),s("p",[t._v("跟冰河一起从根本上提升自己的技术能力，架构思维和设计思路，以及突破自身职场瓶颈，冰河特推出重大优惠活动，扫码领券进行星球，"),s("strong",[t._v("直接立减149元，相当于5折，")]),t._v(" 这已经是星球最大优惠力度！")]),t._v(" "),s("div",{attrs:{align:"center"}},[s("img",{attrs:{src:"https://binghe.gitcode.host/images/personal/xingqiu_149.png?raw=true",width:"80%"}}),t._v(" "),s("br")]),t._v(" "),s("p",[t._v("领券加入星球，跟冰河一起学习《SpringCloud Alibaba实战》、《手撸RPC专栏》和《Spring6核心技术》，更有已经上新的《大规模分布式Seckill秒杀系统》，从零开始介绍原理、设计架构、手撸代码。后续更有硬核中间件项目和业务项目，而这些都是你升职加薪必备的基础技能。")]),t._v(" "),s("p",[s("strong",[t._v("100多元就能学这么多硬核技术、中间件项目和大厂秒杀系统，如果是我，我会买他个终身会员！")])]),t._v(" "),s("h2",{attrs:{id:"其他方式加入星球"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其他方式加入星球"}},[t._v("#")]),t._v(" 其他方式加入星球")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("链接")]),t._v(" ：打开链接 "),s("a",{attrs:{href:"http://m6z.cn/6aeFbs",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://m6z.cn/6aeFbs"),s("OutboundLink")],1),t._v(" 加入星球。")]),t._v(" "),s("li",[s("strong",[t._v("回复")]),t._v(" ：在公众号 "),s("strong",[t._v("冰河技术")]),t._v(" 回复 "),s("strong",[t._v("星球")]),t._v(" 领取优惠券加入星球。")])]),t._v(" "),s("p",[s("strong",[t._v("特别提醒：")]),t._v(" 苹果用户进圈或续费，请加微信 "),s("strong",[t._v("hacker_binghe")]),t._v(" 扫二维码，或者去公众号 "),s("strong",[t._v("冰河技术")]),t._v(" 回复 "),s("strong",[t._v("星球")]),t._v(" 扫二维码加入星球。")]),t._v(" "),s("h2",{attrs:{id:"星球规划"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#星球规划"}},[t._v("#")]),t._v(" 星球规划")]),t._v(" "),s("p",[t._v("后续冰河还会在星球更新大规模中间件项目和深度剖析核心技术的专栏，目前已经规划的专栏如下所示。")]),t._v(" "),s("h3",{attrs:{id:"中间件项目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#中间件项目"}},[t._v("#")]),t._v(" 中间件项目")]),t._v(" "),s("ul",[s("li",[t._v("《大规模分布式定时调度中间件项目实战（非Demo）》：全程手撸代码。")]),t._v(" "),s("li",[t._v("《大规模分布式IM（即时通讯）项目实战（非Demo）》：全程手撸代码。")]),t._v(" "),s("li",[t._v("《大规模分布式网关项目实战（非Demo）》：全程手撸代码。")]),t._v(" "),s("li",[t._v("《手写Redis》：全程手撸代码。")]),t._v(" "),s("li",[t._v("《手写JVM》全程手撸代码。")])]),t._v(" "),s("h3",{attrs:{id:"超硬核项目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#超硬核项目"}},[t._v("#")]),t._v(" 超硬核项目")]),t._v(" "),s("ul",[s("li",[t._v("《从零落地秒杀系统项目》：全程手撸代码，在阿里云实现压测（"),s("strong",[t._v("已上新")]),t._v("）。")]),t._v(" "),s("li",[t._v("《大规模电商系统商品详情页项目》：全程手撸代码，在阿里云实现压测。")]),t._v(" "),s("li",[t._v("其他待规划的实战项目，小伙伴们也可以提一些自己想学的，想一起手撸的实战项目。。。")])]),t._v(" "),s("p",[t._v("既然星球规划了这么多内容，那么肯定就会有小伙伴们提出疑问：这么多内容，能更新完吗？我的回答就是：一个个攻破呗，咱这星球干就干真实中间件项目，剖析硬核技术和项目，不做Demo。初衷就是能够让小伙伴们学到真正的核心技术，不再只是简单的做CRUD开发。所以，每个专栏都会是硬核内容，像《SpringCloud Alibaba实战》、《手撸RPC专栏》和《Spring6核心技术》就是很好的示例。后续的专栏只会比这些更加硬核，杜绝Demo开发。")]),t._v(" "),s("p",[t._v("小伙伴们跟着冰河认真学习，多动手，多思考，多分析，多总结，有问题及时在星球提问，相信在技术层面，都会有所提高。将学到的知识和技术及时运用到实际的工作当中，学以致用。星球中不少小伙伴都成为了公司的核心技术骨干，实现了升职加薪的目标。")]),t._v(" "),s("h2",{attrs:{id:"联系冰河"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#联系冰河"}},[t._v("#")]),t._v(" 联系冰河")]),t._v(" "),s("h3",{attrs:{id:"加群交流"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#加群交流"}},[t._v("#")]),t._v(" 加群交流")]),t._v(" "),s("p",[t._v("本群的宗旨是给大家提供一个良好的技术学习交流平台，所以杜绝一切广告！由于微信群人满 100 之后无法加入，请扫描下方二维码先添加作者 “冰河” 微信(hacker_binghe)，备注："),s("code",[t._v("星球编号")]),t._v("。")]),t._v(" "),s("div",{attrs:{align:"center"}},[s("img",{attrs:{src:"https://binghe.gitcode.host/images/personal/hacker_binghe.jpg?raw=true",width:"180px"}}),t._v(" "),s("div",{staticStyle:{"font-size":"18px"}},[t._v("冰河微信")]),t._v(" "),s("br")]),t._v(" "),s("h3",{attrs:{id:"公众号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#公众号"}},[t._v("#")]),t._v(" 公众号")]),t._v(" "),s("p",[t._v("分享各种编程语言、开发技术、分布式与微服务架构、分布式数据库、分布式事务、云原生、大数据与云计算技术和渗透技术。另外，还会分享各种面试题和面试技巧。内容在 "),s("strong",[t._v("冰河技术")]),t._v(" 微信公众号首发，强烈建议大家关注。")]),t._v(" "),s("div",{attrs:{align:"center"}},[s("img",{attrs:{src:"https://binghe.gitcode.host/images/personal/ice_wechat.jpg?raw=true",width:"180px"}}),t._v(" "),s("div",{staticStyle:{"font-size":"18px"}},[t._v("公众号：冰河技术")]),t._v(" "),s("br")]),t._v(" "),s("h3",{attrs:{id:"视频号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#视频号"}},[t._v("#")]),t._v(" 视频号")]),t._v(" "),s("p",[t._v("定期分享各种编程语言、开发技术、分布式与微服务架构、分布式数据库、分布式事务、云原生、大数据与云计算技术和渗透技术。另外，还会分享各种面试题和面试技巧。")]),t._v(" "),s("div",{attrs:{align:"center"}},[s("img",{attrs:{src:"https://binghe.gitcode.host/images/personal/ice_video.png?raw=true",width:"180px"}}),t._v(" "),s("div",{staticStyle:{"font-size":"18px"}},[t._v("视频号：冰河技术")]),t._v(" "),s("br")]),t._v(" "),s("h3",{attrs:{id:"星球"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#星球"}},[t._v("#")]),t._v(" 星球")]),t._v(" "),s("p",[t._v("加入星球 "),s("strong",[s("a",{attrs:{href:"http://m6z.cn/6aeFbs",target:"_blank",rel:"noopener noreferrer"}},[t._v("冰河技术"),s("OutboundLink")],1)]),t._v("，可以获得本站点所有学习内容的指导与帮助。如果你遇到不能独立解决的问题，也可以添加冰河的微信："),s("strong",[t._v("hacker_binghe")]),t._v("， 我们一起沟通交流。另外，在星球中不只能学到实用的硬核技术，还能学习"),s("strong",[t._v("实战项目")]),t._v("！")]),t._v(" "),s("p",[t._v("关注 "),s("a",{attrs:{href:"https://img-blog.csdnimg.cn/20210426115714643.jpg?raw=true",target:"_blank",rel:"noopener noreferrer"}},[t._v("冰河技术"),s("OutboundLink")],1),t._v("公众号，回复 "),s("code",[t._v("星球")]),t._v(" 可以获取入场优惠券。")]),t._v(" "),s("div",{attrs:{align:"center"}},[s("img",{attrs:{src:"https://binghe.gitcode.host/images/personal/xingqiu.png?raw=true",width:"180px"}}),t._v(" "),s("div",{staticStyle:{"font-size":"18px"}},[t._v("知识星球：冰河技术")]),t._v(" "),s("br")])])}),[],!1,null,null,null);s.default=r.exports}}]);