(window.webpackJsonp=window.webpackJsonp||[]).push([[116],{421:function(t,r,e){"use strict";e.r(r);var a=e(8),s=Object(a.a)({},(function(){var t=this,r=t._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"《并发设计模式》第48章-串行线程封闭模式-优化报表系统导出数据功能"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#《并发设计模式》第48章-串行线程封闭模式-优化报表系统导出数据功能"}},[t._v("#")]),t._v(" 《并发设计模式》第48章-串行线程封闭模式-优化报表系统导出数据功能")]),t._v(" "),r("p",[t._v("作者：冰河\n"),r("br"),t._v("星球："),r("a",{attrs:{href:"http://m6z.cn/6aeFbs",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://m6z.cn/6aeFbs"),r("OutboundLink")],1),t._v(" "),r("br"),t._v("博客："),r("a",{attrs:{href:"https://binghe.gitcode.host",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://binghe.gitcode.host"),r("OutboundLink")],1),t._v(" "),r("br"),t._v("文章汇总："),r("a",{attrs:{href:"https://binghe.gitcode.host/md/all/all.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://binghe.gitcode.host/md/all/all.html"),r("OutboundLink")],1),t._v(" "),r("br"),t._v("源码获取地址："),r("a",{attrs:{href:"https://t.zsxq.com/0dhvFs5oR",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://t.zsxq.com/0dhvFs5oR"),r("OutboundLink")],1)]),t._v(" "),r("blockquote",[r("p",[t._v("沉淀，成长，突破，帮助他人，成就自我。")])]),t._v(" "),r("ul",[r("li",[t._v("本章难度：★★☆☆☆")]),t._v(" "),r("li",[t._v("本章重点：了解串行线程封闭模式的核心原理与使用场景，能够初步结合自身项目实际场景思考如何将串行线程封闭模式灵活应用到自身实际项目中。")])]),t._v(" "),r("p",[r("strong",[t._v("大家好，我是冰河~~")])]),t._v(" "),r("p",[t._v("串行线程封闭模式的核心思想就是通过将多个并发的任务存入队列实现任务的串行执行，并且会为串行执行的任务创建唯一的一个工作线程进行处理。由于只有一个线程执行任务，自然无需对这些任务所访问的非线程安全对象加锁，从而避免了由于加锁带来的性能开销，也避免了死锁等一系列的问题。")]),t._v(" "),r("h2",{attrs:{id:"一、故事背景"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#一、故事背景"}},[t._v("#")]),t._v(" 一、故事背景")]),t._v(" "),r("p",[t._v("小菜在老王的指导下使用单线程线程池初步解决了报表系统导出数据错乱的问题，也通过老王了解到使用串行线程封闭模式可以很好的解决问题。并且老王也为小菜详细的讲解了什么是串行线程封闭模式。了解完这些内容后，小菜极力想基于串行线程封闭模式优化报表系统。但是缺乏实际项目应用经验，不得不再次向老王请教，老王还是不厌其烦的为其讲解。")]),t._v(" "),r("h2",{attrs:{id:"二、问题回顾"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#二、问题回顾"}},[t._v("#")]),t._v(" 二、问题回顾")]),t._v(" "),r("p",[t._v("公司生产环境的报表系统导出数据时，总是产生数据错乱的问题，经过排查和分析问题，发现是报表系统统计数据时，会将一个大的任务拆分成多个小的子任务，并且同一个任务下的所有子任务之间，具有严格的执行顺序，按照业务逻辑分析，同一个任务下的子任务需要由同一个线程分析和统计，但是生产环境同一个任务下的子任务却出现了由不同线程分析和统计的现象，这就导致了数据错乱的问题，如图48-1所示。")]),t._v(" "),r("div",{attrs:{align:"center"}},[r("img",{attrs:{src:"https://binghe.gitcode.host/assets/images/core/concurrent/2023-11-03-003.png?raw=true",width:"80%"}}),t._v(" "),r("br")]),t._v(" "),r("p",[t._v("以上图中的任务A为例，假设任务A下有子任务A-1和子任务A-2两个子任务，子任务A-1和子任务A-2的执行有着严格的执行顺序，也就是说必须执行完子任务A-1，得出结果数据后，再执行子任务A-2。但是，此时却出现了线程A执行子任务A-1，线程C执行子任务A-2的情况，由于无法保证线程A和线程C的执行顺序，此时就会出现数据错乱的问题。")]),t._v(" "),r("h2",{attrs:{id:"三、初步解决"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#三、初步解决"}},[t._v("#")]),t._v(" 三、初步解决")]),t._v(" "),r("p",[t._v("为了保证按照严格的顺序执行每个任务下的子任务，需要将这些任务放到同一个线程中执行，这样不仅能够按照严格的顺序执行任务，也能够避免由于多线程加锁带来的开销。使用线程池初步解决问题的流程如图48-2所示。")]),t._v(" "),r("div",{attrs:{align:"center"}},[r("img",{attrs:{src:"https://binghe.gitcode.host/assets/images/core/concurrent/2023-11-04-001.png?raw=true",width:"80%"}}),t._v(" "),r("br")]),t._v(" "),r("p",[t._v("可以看到，使用只有一个线程的线程池执行所有任务，不仅能够保证每个任务的执行顺序，还能避免由于多线程之间的加锁带来的性能开销问题。")]),t._v(" "),r("h2",{attrs:{id:"四、串行线程封闭模式流程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#四、串行线程封闭模式流程"}},[t._v("#")]),t._v(" 四、串行线程封闭模式流程")]),t._v(" "),r("p",[t._v("使用串行线程封闭模式时，会将多个并发执行的任务存入队列实现任务的串行执行，并且会为串行执行的任务创建唯一的一个工作线程进行处理，如图48-3所示。")]),t._v(" "),r("h2",{attrs:{id:"查看全文"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#查看全文"}},[t._v("#")]),t._v(" 查看全文")]),t._v(" "),r("p",[t._v("加入"),r("a",{attrs:{href:"http://m6z.cn/6aeFbs",target:"_blank",rel:"noopener noreferrer"}},[t._v("冰河技术"),r("OutboundLink")],1),t._v("知识星球，解锁完整技术文章与完整代码")])])}),[],!1,null,null,null);r.default=s.exports}}]);