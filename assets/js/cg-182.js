(window.webpackJsonp=window.webpackJsonp||[]).push([[182],{484:function(t,a,s){"use strict";s.r(a);var e=s(7),n=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"《jvm核心技术》第10章-jvm-内存布局"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#《jvm核心技术》第10章-jvm-内存布局"}},[t._v("#")]),t._v(" 《JVM核心技术》第10章：JVM 内存布局")]),t._v(" "),a("p",[a("strong",[t._v("大家好，我是冰河~~")])]),t._v(" "),a("p",[t._v("本JVM系列属于本人学习过程当中总结的一些知识点，目的是想让读者更快地掌握JVM相关的知识要点，难免会有所侧重，若想要更加系统更加详细的学习JVM知识，还是需要去阅读专业的书籍和文档。")]),t._v(" "),a("p",[t._v("本文主题内容：")]),t._v(" "),a("ul",[a("li",[t._v("JVM 内存区域概览")]),t._v(" "),a("li",[a("strong",[t._v("堆区的空间分配是怎么样？堆溢出的演示")])]),t._v(" "),a("li",[a("strong",[t._v("创建一个新对象内存是怎么分配的？")])]),t._v(" "),a("li",[a("strong",[t._v("方法区 到 Metaspace 元空间")])]),t._v(" "),a("li",[a("strong",[t._v("栈帧是什么？栈帧里有什么？怎么理解？")])]),t._v(" "),a("li",[t._v("本地方法栈")]),t._v(" "),a("li",[t._v("程序计数器")]),t._v(" "),a("li",[a("strong",[t._v("Code Cache 是什么？")])])]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("注：请 区分 JVM内存结构（内存布局） 和 JMM（Java内存模型）这两个不同的概念！")])])]),t._v(" "),a("h2",{attrs:{id:"概览"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概览"}},[t._v("#")]),t._v(" 概览")]),t._v(" "),a("p",[t._v("内存是非常重要的系统资源，是硬盘和CPU的中间仓库及桥梁，承载着操作系统和应用程序的实时运行。JVM 内存布局规定了 Java 在运行过程中内存申请、分配、管理的策略 ，保证了 JVM 的高效稳定运行。")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:"https://binghe.gitcode.host/assets/images/core/jvm/jvm-2023-07-25-059.png?raw=true",width:"80%"}}),t._v(" "),a("br")]),t._v(" "),a("p",[t._v("上图描述了当前比较经典的JVM内存布局。（堆区画小了2333，按理来说应该是最大的区域）")]),t._v(" "),a("p",[t._v("如果按照线程是否共享来分类的话，如下图所示：")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:"https://binghe.gitcode.host/assets/images/core/jvm/jvm-2023-07-25-060.png?raw=true",width:"80%"}}),t._v(" "),a("br")]),t._v(" "),a("blockquote",[a("p",[t._v("PS：线程是否共享这点，实际上理解了每块区域的实际用处之后，就很自然而然的就记住了。不需要死记硬背。")])]),t._v(" "),a("p",[t._v("下面让我们来了解下各个区域。")]),t._v(" "),a("h2",{attrs:{id:"一、heap-堆区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、heap-堆区"}},[t._v("#")]),t._v(" 一、Heap (堆区）")]),t._v(" "),a("h3",{attrs:{id:"_1-1-堆区的介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-堆区的介绍"}},[t._v("#")]),t._v(" 1.1 堆区的介绍")]),t._v(" "),a("p",[t._v("我们先来说堆。堆是 OOM故障最主要的发生区域。它是内存区域中最大的一块区域，被所有"),a("strong",[t._v("线程共享")]),t._v("，存储着"),a("strong",[t._v("几乎所有")]),t._v("的实例对象、数组。"),a("strong",[t._v("所有的对象实例以及数组都要在堆上分配")]),t._v("，但是随着JIT编译器的发展与"),a("strong",[t._v("逃逸分析技术")]),t._v("逐渐成熟，栈上分配、标量替换优化技术将会导致一些微妙的变化发生，"),a("strong",[t._v("所有的对象都分配在堆上也渐渐变得不是那么“绝对”了")]),t._v("。")]),t._v(" "),a("p",[t._v("Java堆是垃圾收集器管理的主要区域，因此"),a("strong",[t._v("很多时候也被称做“GC堆”")]),t._v("。从内存回收的角度来看，由于现在收集器基本都采用分代收集算法，所以Java堆中还可以细分为："),a("strong",[t._v("新生代和老年代")]),t._v("。再细致一点的有"),a("strong",[t._v("Eden空间、From Survivor空间、To Survivor空间")]),t._v("等。从内存分配的角度来看，线程共享的Java堆中可能划分出多个线程私有的分配缓冲区（Thread Local Allocation Buffer,TLAB）。不过无论如何划分，都与存放内容无关，无论哪个区域，存储的都仍然是对象实例，进一步划分的目的是为了更好地回收内存，或者更快地分配内存。")]),t._v(" "),a("h3",{attrs:{id:"_1-2-堆区的调整"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-堆区的调整"}},[t._v("#")]),t._v(" 1.2 堆区的调整")]),t._v(" "),a("p",[t._v("根据Java虚拟机规范的规定，"),a("strong",[t._v("Java堆可以处于物理上不连续的内存空间中")]),t._v("，只要逻辑上是连续的即可，就像我们的磁盘空间一样。在实现时，既可以实现成固定大小的，也可以在运行时动态地调整。")]),t._v(" "),a("p",[a("strong",[t._v("如何调整呢？")])]),t._v(" "),a("p",[t._v("通过设置如下参数，可以设定堆区的初始值和最大值，比如 "),a("code",[t._v("-Xms256M -Xmx 1024M")]),t._v("，其中 "),a("code",[t._v("-X")]),t._v("这个字母代表它是JVM运行时参数，"),a("code",[t._v("ms")]),t._v("是"),a("code",[t._v("memory start")]),t._v("的简称，中文意思就是内存初始值，"),a("code",[t._v("mx")]),t._v(" 是 "),a("code",[t._v("memory max")]),t._v("的简称，意思就是最大内存。")]),t._v(" "),a("p",[a("strong",[t._v("值得注意的是，在通常情况下，服务器在运行过程中，堆空间不断地扩容与回缩，会形成不必要的系统压力 所以在线上生产环境中 JVM的"),a("code",[t._v("Xms")]),t._v("和 "),a("code",[t._v("Xmx")]),t._v("会设置成同样大小，避免在GC 后调整堆大小时带来的额外压力。")])]),t._v(" "),a("h3",{attrs:{id:"_1-3-堆的默认空间分配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-堆的默认空间分配"}},[t._v("#")]),t._v(" 1.3 堆的默认空间分配")]),t._v(" "),a("p",[t._v("另外，再强调一下堆空间内存分配的大体情况。")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:"https://binghe.gitcode.host/assets/images/core/jvm/jvm-2023-07-25-061.png?raw=true",width:"80%"}}),t._v(" "),a("br")]),t._v(" "),a("p",[t._v("这里可能就会有人来问了，你从哪里知道的呢？如果我想配置这个比例，要怎么修改呢？")]),t._v(" "),a("p",[t._v("我先来告诉你怎么看虚拟机的默认配置。命令行上执行如下命令，就可以查看当前JDK版本所有默认的JVM参数。")]),t._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("java")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-XX:+PrintFlagsFinal")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-version")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("h4",{attrs:{id:"输出"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#输出"}},[t._v("#")]),t._v(" 输出")]),t._v(" "),a("p",[t._v("对应的输出应该有几百行，我们这里去看和堆内存分配相关的两个参数")]),t._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("java "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-XX:+PrintFlagsFinal")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-version")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Global flags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n    uintx InitialSurvivorRatio                      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("\n    uintx NewRatio                                  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("java")]),t._v(" version "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1.8.0_131"')]),t._v("\nJava"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TM"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" SE Runtime Environment "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("build "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.8")]),t._v(".0_131-b11"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nJava HotSpot"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TM"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("64")]),t._v("-Bit Server VM "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("build "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("25.131")]),t._v("-b11, mixed mode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("h4",{attrs:{id:"参数解释"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参数解释"}},[t._v("#")]),t._v(" 参数解释")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("参数")]),t._v(" "),a("th",[t._v("作用")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("-XX:InitialSurvivorRatio")]),t._v(" "),a("td",[t._v("新生代Eden/Survivor空间的初始比例")])]),t._v(" "),a("tr",[a("td",[t._v("-XX:NewRatio")]),t._v(" "),a("td",[t._v("Old区/Young区的内存比例")])])])]),t._v(" "),a("p",[t._v("因为新生代是由Eden + S0 + S1组成的，所以按照上述默认比例，如果eden区内存大小是40M，那么两个survivor区就是5M，整个young区就是50M，然后可以算出Old区内存大小是100M，堆区总大小就是150M。")]),t._v(" "),a("h3",{attrs:{id:"_1-4-堆溢出-演示"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-堆溢出-演示"}},[t._v("#")]),t._v(" 1.4 堆溢出 演示")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * VM Args：-Xms10m -Xmx10m -XX:+HeapDumpOnOutOfMemoryError\n * @author Richard_Yi\n */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HeapOOMTest")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" _1MB "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" byteList "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" bytes "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" _1MB"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            byteList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bytes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br")])]),a("h4",{attrs:{id:"输出-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#输出-2"}},[t._v("#")]),t._v(" 输出")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lang"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),t._v("OutOfMemoryError")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Java")]),t._v(" heap space\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Dumping")]),t._v(" heap "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("to")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java_pid32372"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hprof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Heap")]),t._v(" dump file created "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7774077")]),t._v(" bytes in "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.009")]),t._v(" secs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" in thread "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"main"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lang"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),t._v("OutOfMemoryError")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Java")]),t._v(" heap space\n    at "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("jvm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),t._v("HeapOOMTest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HeapOOMTest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("java"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[a("code",[t._v("-XX:+HeapDumpOnOutOfMemoryError")]),t._v(" 可以让JVM在遇到OOM异常时，输出堆内信息，特别是对相隔数月才出现的OOM异常尤为重要。")]),t._v(" "),a("h3",{attrs:{id:"创建一个新对象-内存分配流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建一个新对象-内存分配流程"}},[t._v("#")]),t._v(" 创建一个新对象 内存分配流程")]),t._v(" "),a("p",[t._v("看完上面对堆的介绍，我们趁热打铁再学习一下JVM创建一个新对象的内存分配流程。")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:"https://binghe.gitcode.host/assets/images/core/jvm/jvm-2023-07-25-062.png?raw=true",width:"80%"}}),t._v(" "),a("br")]),t._v(" "),a("p",[t._v("绝大部分对象在Eden区生成，当Eden区装填满的时候，会触发"),a("code",[t._v("Young Garbage Collection")]),t._v("，即"),a("code",[t._v("YGC")]),t._v("。垃圾回收的时候，在Eden区实现清除策略，没有被引用的对象则直接回收。依然存活的对象会被移送到Survivor区。Survivor区分为so和s1两块内存空间。每次"),a("code",[t._v("YGC")]),t._v("的时候，它们将存活的对象复制到未使用的那块空间，然后将当前正在使用的空间完全清除，交换两块空间的使用状态。如果"),a("code",[t._v("YGC")]),t._v("要移送的对象大于Survivor区容量的上限，则直接移交给老年代。一个对象也不可能永远呆在新生代，就像人到了18岁就会成年一样，在JVM中"),a("code",[t._v("－XX:MaxTenuringThreshold")]),t._v("参数就是来配置一个对象从新生代晋升到老年代的阈值。默认值是"),a("strong",[t._v("15")]),t._v("， 可以在Survivor区交换14次之后，晋升至老年代。")]),t._v(" "),a("blockquote",[a("p",[t._v("上述涉及到一部分垃圾回收的名词，不熟悉的读者可以查阅资料或者看下本系列的垃圾回收章节。")])]),t._v(" "),a("h2",{attrs:{id:"二、metaspace-元空间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、metaspace-元空间"}},[t._v("#")]),t._v(" 二、Metaspace 元空间")]),t._v(" "),a("p",[t._v("在 HotSpot JVM 中，"),a("strong",[t._v("永久代（ ≈ 方法区）"),a("strong",[t._v("中用于")]),t._v("存放类和方法的元数据以及常量池")]),t._v("，比如"),a("code",[t._v("Class")]),t._v("和"),a("code",[t._v("Method")]),t._v("。每当一个类初次被加载的时候，它的元数据都会放到永久代中。")]),t._v(" "),a("p",[t._v("永久代是有大小限制的，因此如果加载的类太多，很有可能导致永久代内存溢出，即万恶的 "),a("code",[t._v("java.lang.OutOfMemoryError: PermGen")]),t._v("，为此我们不得不对虚拟机做调优。")]),t._v(" "),a("p",[t._v("那么，Java 8 中 PermGen 为什么被移出 HotSpot JVM 了？")]),t._v(" "),a("ol",[a("li",[t._v("由于 PermGen 内存经常会溢出，引发恼人的 "),a("code",[t._v("java.lang.OutOfMemoryError: PermGen")]),t._v("，因此 JVM 的开发者希望这一块内存可以更灵活地被管理，不要再经常出现这样的 OOM")]),t._v(" "),a("li",[t._v("移除 PermGen 可以促进 HotSpot JVM 与 JRockit VM 的融合，因为 JRockit 没有永久代。")])]),t._v(" "),a("p",[t._v("根据上面的各种原因，PermGen 最终被移除，"),a("strong",[t._v("方法区移至 Metaspace，字符串常量池移至堆区")]),t._v("。")]),t._v(" "),a("p",[t._v("准确来说，Perm 区中的"),a("strong",[t._v("字符串常量池被移到了堆内存")]),t._v("中是在Java7 之后，Java 8 时，PermGen 被元空间代替，"),a("strong",[t._v("其他内容比如类元信息、字段、静态属性、方法、常量等都移动到元空间区")]),t._v("。比如"),a("code",[t._v("java/lang/Object")]),t._v("类元信息、静态属性"),a("code",[t._v("System.out")]),t._v("、整形常量 "),a("code",[t._v("100000")]),t._v("等。")]),t._v(" "),a("p",[t._v("元空间的本质和永久代类似，都是对JVM规范中方法区的实现。不过元空间与永久代之间最大的区别在于："),a("strong",[t._v("元空间并不在虚拟机中，而是使用本地内存")]),t._v("。因此，默认情况下，元空间的大小仅受本地内存限制。（和后面提到的直接内存一样，都是使用本地内存）")]),t._v(" "),a("blockquote",[a("p",[t._v("In JDK 8, classes metadata is now stored in the "),a("strong",[t._v("native heap")]),t._v(" and this space is called "),a("strong",[t._v("Metaspace")]),t._v(".")])]),t._v(" "),a("p",[a("strong",[t._v("对应的JVM调参：")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("参数")]),t._v(" "),a("th",[t._v("作用")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("-XX:MetaspaceSize")]),t._v(" "),a("td",[t._v("分配给Metaspace（以字节计）的初始大小")])]),t._v(" "),a("tr",[a("td",[t._v("-XX:MaxMetaspaceSize")]),t._v(" "),a("td",[t._v("分配给Metaspace 的最大值，超过此值就会触发Full GC，此值默认没有限制，但应取决于系统内存的大小。JVM会动态地改变此值。")])]),t._v(" "),a("tr",[a("td",[t._v("-XX:MinMetaspaceFreeRatio")]),t._v(" "),a("td",[t._v("在GC之后，最小的Metaspace剩余空间容量的百分比，减少为分配空间所导致的垃圾收集")])]),t._v(" "),a("tr",[a("td",[t._v("-XX:MaxMetaspaceFreeRatio")]),t._v(" "),a("td",[t._v("在GC之后，最大的Metaspace剩余空间容量的百分比，减少为释放空间所导致的垃圾收集")])])])]),t._v(" "),a("h2",{attrs:{id:"三、-java-虚拟机栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、-java-虚拟机栈"}},[t._v("#")]),t._v(" 三、 Java 虚拟机栈")]),t._v(" "),a("p",[t._v("对于每一个线程，JVM 都会在线程被创建的时候，创建一个单独的栈。也就是说虚拟机栈的生命周期和线程是一致，并且是线程私有的。除了Native方法以外，Java方法都是通过Java 虚拟机栈来实现调用和执行过程的（需要程序技术器、堆、元空间内数据的配合）。所以Java虚拟机栈是虚拟机执行引擎的核心之一。而Java虚拟机栈中出栈入栈的元素就称为「栈帧」。")]),t._v(" "),a("p",[a("strong",[t._v("栈帧(Stack Frame)是用于支持虚拟机进行方法调用和方法执行的数据结构。栈帧存储了方法的局部变量表、操作数栈、动态连接和方法返回地址等信息。每一个方法从调用至执行完成的过程，都对应着一个栈帧在虚拟机栈里从入栈到出栈的过程。")])]),t._v(" "),a("blockquote",[a("p",[t._v("栈对应线程，栈帧对应方法")])]),t._v(" "),a("p",[t._v("在活动线程中， 只有位于栈顶的帧才是有效的， 称为"),a("strong",[t._v("当前栈帧")]),t._v("。正在执行的方法称为"),a("strong",[t._v("当前方法")]),t._v("。在执行引擎运行时， 所有指令都只能针对当前栈帧进行操作。而"),a("code",[t._v("StackOverflowError")]),t._v(" 表示请求的"),a("strong",[t._v("栈溢出")]),t._v("， 导致内存耗尽， 通常出现在递归方法中。")]),t._v(" "),a("p",[t._v("虚拟机栈通过pop和push的方式，对每个方法对应的活动栈帧进行运算处理，方法正常执行结束，肯定会跳转到另一个栈帧上。在执行的过程中，如果出现了异常，会进行异常回溯，返回地址通过异常处理表确定。")]),t._v(" "),a("p",[t._v("可以看出栈帧在整个JVM 体系中的地位颇高。下面也具体介绍一下栈帧中的存储信息。")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:"https://binghe.gitcode.host/assets/images/core/jvm/jvm-2023-07-25-063.png?raw=true",width:"80%"}}),t._v(" "),a("br")]),t._v(" "),a("h3",{attrs:{id:"_1-局部变量表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-局部变量表"}},[t._v("#")]),t._v(" 1. 局部变量表")]),t._v(" "),a("blockquote",[a("p",[t._v("局部变量表就是"),a("strong",[t._v("存放方法参数和方法内部定义的局部变量的区域")]),t._v("。")])]),t._v(" "),a("p",[a("strong",[t._v("局部变量表所需的内存空间在编译期间完成分配，当进入一个方法时，这个方法需要在帧中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的大小")]),t._v("。")]),t._v(" "),a("p",[t._v("这里直接上代码，更好理解。")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("如果局部变量是Java的8种基本基本数据类型，则存在局部变量表中，如果是引用类型。如new出来的String，局部变量表中存的是引用，而实例在堆中。")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:"https://binghe.gitcode.host/assets/images/core/jvm/jvm-2023-07-25-064.png?raw=true",width:"80%"}}),t._v(" "),a("br")]),t._v(" "),a("h3",{attrs:{id:"_2-操作栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-操作栈"}},[t._v("#")]),t._v(" 2. 操作栈")]),t._v(" "),a("p",[a("strong",[t._v("操作数栈（Operand Stack）"),a("strong",[t._v("看名字可以知道是一个栈结构。Java虚拟机的解释执行引擎称为“基于栈的执行引擎”，其中所指的“栈”就是操作数栈。当JVM为方法创建栈帧的时候，在")]),t._v("栈帧")]),t._v("中为方法创建一个"),a("strong",[t._v("操作数栈")]),t._v("，保证方法内指令可以完成工作。")]),t._v(" "),a("p",[t._v("还是用实操理解一下。")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * @author Richard_yyf\n */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("OperandStackTest")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("p",[t._v("编译生成"),a("code",[t._v(".class")]),t._v("文件之后，再反汇编查看汇编指令")]),t._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" javac OperandStackTest.java\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" javap "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-v")]),t._v(" OperandStackTest.class "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(".txt\n  public int sum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("int, int"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    descriptor: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("II"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("I\n    flags: ACC_PUBLIC\n    Code:\n      "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("stack")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(", "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("locals")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(", "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("args_size")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" // 最大栈深度为2 局部变量个数为3\n         "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(": iload_1 // 局部变量1 压栈\n         "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(": iload_2 // 局部变量2 压栈\n         "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(": iadd    // 栈顶两个元素相加，计算结果压栈\n         "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(": ireturn\n      LineNumberTable:\n        line "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(": "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br")])]),a("h3",{attrs:{id:"_3-动态连接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-动态连接"}},[t._v("#")]),t._v(" 3. 动态连接")]),t._v(" "),a("p",[t._v("每个栈帧中包含一个在常量池中"),a("strong",[t._v("对当前方法的引用")]),t._v("， 目的是"),a("strong",[t._v("支持方法调用过程的动态连接")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"_4-方法返回地址"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-方法返回地址"}},[t._v("#")]),t._v(" 4. 方法返回地址")]),t._v(" "),a("p",[t._v("方法执行时有两种退出情况：")]),t._v(" "),a("ul",[a("li",[t._v("正常退出，即正常执行到任何方法的返回字节码指令，如 "),a("code",[t._v("RETURN")]),t._v("、"),a("code",[t._v("IRETURN")]),t._v("、"),a("code",[t._v("ARETURN")]),t._v("等")]),t._v(" "),a("li",[t._v("异常退出")])]),t._v(" "),a("p",[t._v("无论何种退出情况，都将返回至方法当前"),a("strong",[t._v("被")]),t._v("调用的位置。方法退出的过程相当于弹出当前栈帧，退出可能有三种方式：")]),t._v(" "),a("ul",[a("li",[t._v("返回值压入上层调用栈帧")]),t._v(" "),a("li",[t._v("异常信息抛给"),a("strong",[t._v("能够处理")]),t._v("的栈帧")]),t._v(" "),a("li",[t._v("PC 计数器指向方法调用后的下一条指令")])]),t._v(" "),a("h2",{attrs:{id:"四、本地方法栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、本地方法栈"}},[t._v("#")]),t._v(" 四、本地方法栈")]),t._v(" "),a("p",[t._v("本地方法栈（Native Method Stack）与虚拟机栈所发挥的作用是非常相似的，"),a("strong",[t._v("它们之间的区别不过是虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈则为虚拟机使用到的Native方法服务")]),t._v("。在虚拟机规范中对本地方法栈中方法使用的语言、使用方式与数据结构并没有强制规定，因此具体的虚拟机可以自由实现它。甚至有的虚拟机（譬如Sun HotSpot虚拟机）直接就把本地方法栈和虚拟机栈合二为一。与虚拟机栈一样，"),a("strong",[t._v("本地方法栈区域也会抛出StackOverflowError和OutOfMemoryError异常")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"五、程序计数器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、程序计数器"}},[t._v("#")]),t._v(" 五、程序计数器")]),t._v(" "),a("p",[t._v("程序计数器（Program Counter Register）是一块较小的内存空间。是线程私有的。"),a("strong",[t._v("它可以看作是当前线程所执行的字节码的行号指示器")]),t._v("。什么意思呢？")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("白话版本：因为代码是在线程中运行的，线程有可能被挂起。即CPU一会执行线程A，线程A还没有执行完被挂起了，接着执行线程B，最后又来执行线程A了，CPU得知道执行线程A的哪一部分指令，线程计数器会告诉CPU。")])])]),t._v(" "),a("p",[t._v("由于Java虚拟机的多线程是通过"),a("strong",[t._v("线程轮流切换并分配处理器执行时间的方式来实现")]),t._v("的，CPU 只有把数据装载到寄存器才能够运行。寄存器存储指令相关的现场信息，由于CPU 时间片轮限制，众多线程在并发执行过程中，"),a("strong",[t._v("任何一个确定的时刻，一个处理器或者多核处理器中的一个内核，只会执行某个线程中的一条指令")]),t._v("。")]),t._v(" "),a("p",[t._v("因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各条线程之间计数器互不影响，独立存储。每个线程在创建后，都会产生自己的程序计数器和栈帧，程序计数器用来存放执行指令的偏移量和行号指示器等，线程执行或恢复都要依赖程序计数器。此区域也不会发生内存溢出异常。")]),t._v(" "),a("h2",{attrs:{id:"六、直接内存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六、直接内存"}},[t._v("#")]),t._v(" 六、直接内存")]),t._v(" "),a("p",[t._v("直接内存（Direct Memory）并不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域。但是这部分内存也被频繁地使用，而且也可能导致OutOfMemoryError异常出现，所以我们放到这里一起讲解。")]),t._v(" "),a("p",[t._v("在JDK 1.4中新加入了NIO（New Input/Output）类，引入了一种基于通道（Channel）与缓冲区（Buffer）的I/O方式，它可以"),a("strong",[t._v("使用Native函数库直接分配堆外内存")]),t._v("，然后通过一个"),a("strong",[t._v("存储在Java堆中的DirectByteBuffer对象作为这块内存的引用进行操作")]),t._v("。这样能在一些场景中显著提高性能，因为"),a("strong",[t._v("避免了在Java堆和Native堆中来回复制数据")]),t._v("。")]),t._v(" "),a("p",[t._v("显然，本机直接内存的分配不会受到Java堆大小的限制，但是，既然是内存，肯定还是会受到本机总内存（包括RAM以及SWAP区或者分页文件）大小以及处理器寻址空间的限制。如果内存区域总和大于物理内存的限制，也会出现OOM。")]),t._v(" "),a("h2",{attrs:{id:"code-cache"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#code-cache"}},[t._v("#")]),t._v(" Code Cache")]),t._v(" "),a("p",[t._v("简而言之， "),a("strong",[t._v("JVM代码缓存是JVM将其字节码存储为本机代码的区域")]),t._v(" 。我们将可执行本机代码的每个块称为 "),a("code",[t._v("nmethod")]),t._v(" 。该 "),a("code",[t._v("nmethod")]),t._v("可能是一个完整的或内联Java方法。")]),t._v(" "),a("p",[t._v("实时（JIT）编译器是代码缓存区域的最大消费者。这就是为什么一些开发人员将此内存称为JIT代码缓存的原因。")]),t._v(" "),a("p",[t._v("这部分代码所占用的内存空间成为CodeCache区域。一般情况下我们是不会关心这部分区域的且大部分开发人员对这块区域也不熟悉。如果这块区域OOM了，在日志里面就会看到 "),a("code",[t._v("java.lang.OutOfMemoryError code cache")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"诊断选项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#诊断选项"}},[t._v("#")]),t._v(" 诊断选项")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("选项")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("默认值")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("PrintCodeCache")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("false")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("是否在JVM退出前打印CodeCache的使用情况")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("PrintCodeCacheOnCompilation")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("false")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("是否在每个方法被JIT编译后打印CodeCache区域的使用情况")])])])]),t._v(" "),a("p",[t._v("上面的知识点，你都学会了吗？")]),t._v(" "),a("p",[a("strong",[t._v("好了，今天就到这儿吧，我是冰河，我们下期见~~")])]),t._v(" "),a("h2",{attrs:{id:"星球服务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#星球服务"}},[t._v("#")]),t._v(" 星球服务")]),t._v(" "),a("p",[t._v("加入星球，你将获得：")]),t._v(" "),a("p",[t._v("1.项目学习：微服务入门必备的SpringCloud  Alibaba实战项目、手写RPC项目—所有大厂都需要的项目【含上百个经典面试题】、深度解析Spring6核心技术—只要学习Java就必须深度掌握的框架【含数十个经典思考题】、Seckill秒杀系统项目—进大厂必备高并发、高性能和高可用技能。")]),t._v(" "),a("p",[t._v("2.框架源码：手写RPC项目—所有大厂都需要的项目【含上百个经典面试题】、深度解析Spring6核心技术—只要学习Java就必须深度掌握的框架【含数十个经典思考题】。")]),t._v(" "),a("p",[t._v("3.硬核技术：深入理解高并发系列（全册）、深入理解JVM系列（全册）、深入浅出Java设计模式（全册）、MySQL核心知识（全册）。")]),t._v(" "),a("p",[t._v("4.技术小册：深入理解高并发编程（第1版）、深入理解高并发编程（第2版）、从零开始手写RPC框架、SpringCloud  Alibaba实战、冰河的渗透实战笔记、MySQL核心知识手册、Spring IOC核心技术、Nginx核心技术、面经手册等。")]),t._v(" "),a("p",[t._v("5.技术与就业指导：提供相关就业辅导和未来发展指引，冰河从初级程序员不断沉淀，成长，突破，一路成长为互联网资深技术专家，相信我的经历和经验对你有所帮助。")]),t._v(" "),a("p",[t._v("冰河的知识星球是一个简单、干净、纯粹交流技术的星球，不吹水，目前加入享5折优惠，价值远超门票。加入星球的用户，记得添加冰河微信：hacker_binghe，冰河拉你进星球专属VIP交流群。")]),t._v(" "),a("h2",{attrs:{id:"星球重磅福利"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#星球重磅福利"}},[t._v("#")]),t._v(" 星球重磅福利")]),t._v(" "),a("p",[t._v("跟冰河一起从根本上提升自己的技术能力，架构思维和设计思路，以及突破自身职场瓶颈，冰河特推出重大优惠活动，扫码领券进行星球，"),a("strong",[t._v("直接立减149元，相当于5折，")]),t._v(" 这已经是星球最大优惠力度！")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:"https://binghe.gitcode.host/images/personal/xingqiu_149.png?raw=true",width:"80%"}}),t._v(" "),a("br")]),t._v(" "),a("p",[t._v("领券加入星球，跟冰河一起学习《SpringCloud Alibaba实战》、《手撸RPC专栏》和《Spring6核心技术》，更有已经上新的《大规模分布式Seckill秒杀系统》，从零开始介绍原理、设计架构、手撸代码。后续更有硬核中间件项目和业务项目，而这些都是你升职加薪必备的基础技能。")]),t._v(" "),a("p",[a("strong",[t._v("100多元就能学这么多硬核技术、中间件项目和大厂秒杀系统，如果是我，我会买他个终身会员！")])]),t._v(" "),a("h2",{attrs:{id:"其他方式加入星球"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他方式加入星球"}},[t._v("#")]),t._v(" 其他方式加入星球")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("链接")]),t._v(" ：打开链接 "),a("a",{attrs:{href:"http://m6z.cn/6aeFbs",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://m6z.cn/6aeFbs"),a("OutboundLink")],1),t._v(" 加入星球。")]),t._v(" "),a("li",[a("strong",[t._v("回复")]),t._v(" ：在公众号 "),a("strong",[t._v("冰河技术")]),t._v(" 回复 "),a("strong",[t._v("星球")]),t._v(" 领取优惠券加入星球。")])]),t._v(" "),a("p",[a("strong",[t._v("特别提醒：")]),t._v(" 苹果用户进圈或续费，请加微信 "),a("strong",[t._v("hacker_binghe")]),t._v(" 扫二维码，或者去公众号 "),a("strong",[t._v("冰河技术")]),t._v(" 回复 "),a("strong",[t._v("星球")]),t._v(" 扫二维码加入星球。")]),t._v(" "),a("h2",{attrs:{id:"星球规划"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#星球规划"}},[t._v("#")]),t._v(" 星球规划")]),t._v(" "),a("p",[t._v("后续冰河还会在星球更新大规模中间件项目和深度剖析核心技术的专栏，目前已经规划的专栏如下所示。")]),t._v(" "),a("h3",{attrs:{id:"中间件项目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#中间件项目"}},[t._v("#")]),t._v(" 中间件项目")]),t._v(" "),a("ul",[a("li",[t._v("《大规模分布式定时调度中间件项目实战（非Demo）》：全程手撸代码。")]),t._v(" "),a("li",[t._v("《大规模分布式IM（即时通讯）项目实战（非Demo）》：全程手撸代码。")]),t._v(" "),a("li",[t._v("《大规模分布式网关项目实战（非Demo）》：全程手撸代码。")]),t._v(" "),a("li",[t._v("《手写Redis》：全程手撸代码。")]),t._v(" "),a("li",[t._v("《手写JVM》全程手撸代码。")])]),t._v(" "),a("h3",{attrs:{id:"超硬核项目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#超硬核项目"}},[t._v("#")]),t._v(" 超硬核项目")]),t._v(" "),a("ul",[a("li",[t._v("《从零落地秒杀系统项目》：全程手撸代码，在阿里云实现压测（"),a("strong",[t._v("已上新")]),t._v("）。")]),t._v(" "),a("li",[t._v("《大规模电商系统商品详情页项目》：全程手撸代码，在阿里云实现压测。")]),t._v(" "),a("li",[t._v("其他待规划的实战项目，小伙伴们也可以提一些自己想学的，想一起手撸的实战项目。。。")])]),t._v(" "),a("p",[t._v("既然星球规划了这么多内容，那么肯定就会有小伙伴们提出疑问：这么多内容，能更新完吗？我的回答就是：一个个攻破呗，咱这星球干就干真实中间件项目，剖析硬核技术和项目，不做Demo。初衷就是能够让小伙伴们学到真正的核心技术，不再只是简单的做CRUD开发。所以，每个专栏都会是硬核内容，像《SpringCloud Alibaba实战》、《手撸RPC专栏》和《Spring6核心技术》就是很好的示例。后续的专栏只会比这些更加硬核，杜绝Demo开发。")]),t._v(" "),a("p",[t._v("小伙伴们跟着冰河认真学习，多动手，多思考，多分析，多总结，有问题及时在星球提问，相信在技术层面，都会有所提高。将学到的知识和技术及时运用到实际的工作当中，学以致用。星球中不少小伙伴都成为了公司的核心技术骨干，实现了升职加薪的目标。")]),t._v(" "),a("h2",{attrs:{id:"联系冰河"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#联系冰河"}},[t._v("#")]),t._v(" 联系冰河")]),t._v(" "),a("h3",{attrs:{id:"加群交流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#加群交流"}},[t._v("#")]),t._v(" 加群交流")]),t._v(" "),a("p",[t._v("本群的宗旨是给大家提供一个良好的技术学习交流平台，所以杜绝一切广告！由于微信群人满 100 之后无法加入，请扫描下方二维码先添加作者 “冰河” 微信(hacker_binghe)，备注："),a("code",[t._v("星球编号")]),t._v("。")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:"https://binghe.gitcode.host/images/personal/hacker_binghe.jpg?raw=true",width:"180px"}}),t._v(" "),a("div",{staticStyle:{"font-size":"18px"}},[t._v("冰河微信")]),t._v(" "),a("br")]),t._v(" "),a("h3",{attrs:{id:"公众号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#公众号"}},[t._v("#")]),t._v(" 公众号")]),t._v(" "),a("p",[t._v("分享各种编程语言、开发技术、分布式与微服务架构、分布式数据库、分布式事务、云原生、大数据与云计算技术和渗透技术。另外，还会分享各种面试题和面试技巧。内容在 "),a("strong",[t._v("冰河技术")]),t._v(" 微信公众号首发，强烈建议大家关注。")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:"https://binghe.gitcode.host/images/personal/ice_wechat.jpg?raw=true",width:"180px"}}),t._v(" "),a("div",{staticStyle:{"font-size":"18px"}},[t._v("公众号：冰河技术")]),t._v(" "),a("br")]),t._v(" "),a("h3",{attrs:{id:"视频号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#视频号"}},[t._v("#")]),t._v(" 视频号")]),t._v(" "),a("p",[t._v("定期分享各种编程语言、开发技术、分布式与微服务架构、分布式数据库、分布式事务、云原生、大数据与云计算技术和渗透技术。另外，还会分享各种面试题和面试技巧。")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:"https://binghe.gitcode.host/images/personal/ice_video.png?raw=true",width:"180px"}}),t._v(" "),a("div",{staticStyle:{"font-size":"18px"}},[t._v("视频号：冰河技术")]),t._v(" "),a("br")]),t._v(" "),a("h3",{attrs:{id:"星球"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#星球"}},[t._v("#")]),t._v(" 星球")]),t._v(" "),a("p",[t._v("加入星球 "),a("strong",[a("a",{attrs:{href:"http://m6z.cn/6aeFbs",target:"_blank",rel:"noopener noreferrer"}},[t._v("冰河技术"),a("OutboundLink")],1)]),t._v("，可以获得本站点所有学习内容的指导与帮助。如果你遇到不能独立解决的问题，也可以添加冰河的微信："),a("strong",[t._v("hacker_binghe")]),t._v("， 我们一起沟通交流。另外，在星球中不只能学到实用的硬核技术，还能学习"),a("strong",[t._v("实战项目")]),t._v("！")]),t._v(" "),a("p",[t._v("关注 "),a("a",{attrs:{href:"https://img-blog.csdnimg.cn/20210426115714643.jpg?raw=true",target:"_blank",rel:"noopener noreferrer"}},[t._v("冰河技术"),a("OutboundLink")],1),t._v("公众号，回复 "),a("code",[t._v("星球")]),t._v(" 可以获取入场优惠券。")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:"https://binghe.gitcode.host/images/personal/xingqiu.png?raw=true",width:"180px"}}),t._v(" "),a("div",{staticStyle:{"font-size":"18px"}},[t._v("知识星球：冰河技术")]),t._v(" "),a("br")])])}),[],!1,null,null,null);a.default=n.exports}}]);